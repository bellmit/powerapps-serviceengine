package com.profitera.persistence;

import oracle.toplink.mappings.DirectToFieldMapping;
import oracle.toplink.mappings.ManyToManyMapping;
import oracle.toplink.mappings.OneToManyMapping;
import oracle.toplink.mappings.OneToOneMapping;
import oracle.toplink.publicinterface.Descriptor;
import oracle.toplink.sessions.DatabaseLogin;

import com.profitera.persistence.impl.AccountMapping;
import com.profitera.persistence.impl.CustomerMapping;
import com.profitera.persistence.impl.PaymentMapping;

/**
 * This class was generated by the TopLink project class generator. It stores
 * the meta-data (descriptors) that define the TopLink mappings. ## TopLink -
 * 9.0.3 (Build 423) ##
 * 
 * @see oracle.toplink.tools.workbench.ProjectClassGenerator
 */

public class PASWorkBench extends oracle.toplink.sessions.Project {
  public PASWorkBench(boolean userCode3Enabled) {
    setName("PASWorkBench");
    applyLogin();
    addDescriptor(buildAccountDescriptor());
    addDescriptor(buildAccountOwnerDetailsDescriptor());
    addDescriptor(buildAccountRelationshipRefDescriptor()); //new Added     
    addDescriptor(buildAccountTreatmentPlanDescriptor());
    addDescriptor(buildAccountUnbilledDescriptor());
    addDescriptor(buildAgentBankRefDescriptor());    
    addDescriptor(buildCustomerDescriptor());
    addDescriptor(buildCustomerSegmentDescriptor());
    addDescriptor(buildAgencyDescriptor());
    addDescriptor(buildClientDescriptor());
    addDescriptor(buildHolidayDescriptor());
    addDescriptor(buildSecuritySettingsDescriptor());
    addDescriptor(buildAddressDetailsDescriptor());
    addDescriptor(buildContactNumberDescriptor());
    addDescriptor(buildAccountWorkListHistoryDescriptor());
    addDescriptor(buildBlockCodeHistoryDescriptor());
    addDescriptor(buildPasswordHistoryDescriptor());
    addDescriptor(new PaymentMapping().buildPayment());
    addDescriptor(new PaymentMapping().buildPaymentCashDescriptor());
    addDescriptor(new PaymentMapping().buildPaymentCheckDescriptor());
    addDescriptor(new PaymentMapping().buildPaymentDebitAdjustmentDescriptor());
    addDescriptor(buildAccessRightsRefDescriptor());
    addDescriptor(buildAccountSexRefDescriptor());
    addDescriptor(buildAccountStatusRefDescriptor());
    addDescriptor(buildAccountWorkListStatusRefDescriptor());
    addDescriptor(buildAgencyTypeRefDescriptor());
    addDescriptor(buildAlternateWeekendRefDescriptor());
    addDescriptor(buildAutoPayRefDescriptor());
    addDescriptor(buildAutoPayStatusRefDescriptor());
    addDescriptor(buildBillingCycleRefDescriptor());
    addDescriptor(buildBlockCodeRefDescriptor());
    addDescriptor(buildBusinessGroupRefDescriptor());
    addDescriptor(buildCampaignCodeRefDescriptor());
    addDescriptor(buildChannelCodeRefDescriptor());
    addDescriptor(buildChargeOffReasonRefDescriptor());
    addDescriptor(buildChargeOffStatusRefDescriptor());
    addDescriptor(buildCheckStatusRefDescriptor());
    addDescriptor(buildCitizenshipRefDescriptor());
    addDescriptor(buildClarityMessagesRefDescriptor());
    addDescriptor(buildClassOfServiceRefDescriptor());
    addDescriptor(buildClientTypeRefDescriptor());
    addDescriptor(buildCollectabilityRefDescriptor());
    addDescriptor(buildCollectionReasonRefDescriptor());
    addDescriptor(buildCollectionStatusRefDescriptor());
    addDescriptor(buildContactNumberTypeRefDescriptor());
    addDescriptor(buildContactTypeRefDescriptor());
    addDescriptor(buildCostBillerRefDescriptor());
    addDescriptor(buildCostBillerTypeRefDescriptor());
    addDescriptor(buildCostingTypeRefDescriptor());
    addDescriptor(buildCostingUomRefDescriptor());
    addDescriptor(buildCountryRefDescriptor());
    addDescriptor(buildCreditCardStatusRefDescriptor());
    addDescriptor(buildDebtRecoveryStatusRefDescriptor());
    addDescriptor(buildDelinquencyTypeRefDescriptor());
    addDescriptor(buildDemandDraftStatusRefDescriptor());
    addDescriptor(buildDirectDebitStatusRefDescriptor());
    addDescriptor(buildDisputeReasonRefDescriptor());
    addDescriptor(buildEmailNotifyTypeRefDescriptor());
    addDescriptor(buildEmployeeProfileRefDescriptor());
    addDescriptor(buildEmployeeReportToTypeRefDescriptor());
    addDescriptor(buildEmployeeTypeRefDescriptor());
    addDescriptor(buildEmployerBusinessRefDescriptor());
    addDescriptor(buildEmployerTypeRefDescriptor());
    addDescriptor(buildEmploymentTypeRefDescriptor());
    addDescriptor(buildExternalRatingTypeRefDescriptor());
    addDescriptor(buildInstallmentPaidStatusRefDescriptor());
    addDescriptor(buildInstallmentStatusRefDescriptor());
    addDescriptor(buildInvoiceSummaryTypeRefDescriptor());
    addDescriptor(buildInvoiceTypeRefDescriptor());
    addDescriptor(buildLegalInvstgStatusRefDescriptor());
    addDescriptor(buildLegalReasonRefDescriptor());
    addDescriptor(buildLegalSummonsRefDescriptor());
    addDescriptor(buildLoanTypeRefDescriptor());
    addDescriptor(buildMaritalStatusRefDescriptor());
    addDescriptor(buildMerchantRefDescriptor());
    addDescriptor(buildMoneyOrderStatusRefDescriptor());
    addDescriptor(buildNotificationTypeRefDescriptor());
    addDescriptor(buildNotifierCodeRefDescriptor());
    addDescriptor(buildOccupationRefDescriptor());
    addDescriptor(buildPaymentBehaviourRefDescriptor());
    addDescriptor(buildPaymentFrequencyRefDescriptor());
    addDescriptor(buildPaymentLocationRefDescriptor());
    addDescriptor(buildPaymentTypeRefDescriptor());
    addDescriptor(buildPremisesRefDescriptor());
    addDescriptor(buildPriorityRefDescriptor());
    addDescriptor(buildProcessStatusRefDescriptor());
    addDescriptor(buildProcessTypeRefDescriptor());
    addDescriptor(buildProductTypeCategoryRefDescriptor());
    addDescriptor(buildProductTypeLevelRefDescriptor());
    addDescriptor(buildProductTypeRefDescriptor());
    addDescriptor(buildProfileSegmentRefDescriptor());
    addDescriptor(buildRaceTypeRefDescriptor());
    addDescriptor(buildReportTypeRefDescriptor());
    addDescriptor(buildRiskLevelRefDescriptor());
    addDescriptor(buildRiskStatusRefDescriptor());
    addDescriptor(buildSalutationTypeRefDescriptor());
    addDescriptor(buildSensitiveStatusRefDescriptor());
    addDescriptor(buildServiceStatusRefDescriptor());
    addDescriptor(buildStateRefDescriptor());
    addDescriptor(buildTemplateTypeRefDescriptor());
    addDescriptor(buildTransactionCodeRefDescriptor());
    addDescriptor(buildTreatProcessTypeStatusRefDescriptor());
    addDescriptor(buildTreatmentProcessStatusRefDescriptor());
    addDescriptor(buildTreatmentProcessTypeRefDescriptor());
    addDescriptor(buildTreatmentStageRefDescriptor());
    addDescriptor(buildTreatmentStreamRefDescriptor());
    addDescriptor(buildTreatprocSubtypeRefDescriptor());
    addDescriptor(buildUnbilledTypeRefDescriptor());
    addDescriptor(buildUomMeasureRefDescriptor());
    addDescriptor(buildUserRoleRefDescriptor());
    addDescriptor(buildWaiveReasonRefDescriptor());
    addDescriptor(buildWeekendRefDescriptor());
    addDescriptor(buildBusinessUnitGroupRelDescriptor());
    addDescriptor(buildHolidayStateRelDescriptor());
    addDescriptor(buildProductBillingCycleRelDescriptor());
    addDescriptor(buildRoleAccessRelDescriptor());
    addDescriptor(buildRuleDescriptor());
    addDescriptor(buildRuleBomDescriptor());
    addDescriptor(buildRuleGroupDescriptor());
    addDescriptor(buildRuleHistoryDescriptor());
    addDescriptor(buildActionConversionMatrixDescriptor());
    addDescriptor(buildPaymentInstallmentDescriptor());
    addDescriptor(buildPaymentPlanDescriptor());
    addDescriptor(buildPlaceACallDescriptor());
    addDescriptor(buildSmsMessageDescriptor());
    addDescriptor(buildTemplateDescriptor());
    addDescriptor(buildTreatmentActionNodeDescriptor());
    addDescriptor(buildTreatmentActionPropensityDescriptor());
    addDescriptor(buildTreatmentActionTransitionDescriptor());
    addDescriptor(buildTreatmentProcessDescriptor());
    addDescriptor(buildTreatmentProcessHistoryDescriptor());
    addDescriptor(buildTreatmentProcessHistoryRemarkDescription());
    addDescriptor(buildTreatprocTemplateDescriptor());
    addDescriptor(buildBusinessUnitDescriptor());
    addDescriptor(buildEmployeeDescriptor());
    addDescriptor(buildUserDescriptor());
    addDescriptor(buildUserTeamsDescriptor());
    addDescriptor(buildUserWorkListAssignDescriptor());
    addDescriptor(buildWorkListDescriptor());
    addDescriptor(buildWorkListBlockCodeDescriptor());

    //manually created
    addDescriptor(buildWorklistHistoryDescriptor());
    addDescriptor(buildProfileCodeRefDescriptor());
    addDescriptor(buildUserCode3RefDescriptor());
  }

  public void applyLogin() {
    DatabaseLogin login = new DatabaseLogin();    
    login.usePlatform(new oracle.toplink.internal.databaseaccess.DB2Platform());
    login.setDriverClassName("com.ibm.db2.jcc.DB2Driver");
    login.setConnectionString("jdbc:db2://oxygen:50000/DEV");
    login.setUserName("carma");
    login.setEncryptedPassword("74E271D069D863D05D892C852CA7FCAA504BA7E4FC");
    
    // Configuration properties.
    login.setUsesNativeSequencing(false);
    login.setSequencePreallocationSize(50);
    login.setSequenceTableName("SEQUENCE");
    login.setSequenceNameFieldName("SEQ_NAME");
    login.setSequenceCounterFieldName("SEQ_COUNT");
    login.setShouldBindAllParameters(false);
    login.setShouldCacheAllStatements(false);
    login.setUsesByteArrayBinding(true);
    login.setUsesStringBinding(false);
    if (login.shouldUseByteArrayBinding()) { // Can only be used with binding.
      login.setUsesStreamsForBinding(false);
    }
    login.setShouldForceFieldNamesToUpperCase(false);
    login.setShouldOptimizeDataConversion(true);
    login.setShouldTrimStrings(true);
    login.setUsesBatchWriting(false);
    if (login.shouldUseBatchWriting()) { // Can only be used with batch writing.
      login.setUsesJDBCBatchWriting(true);
    }
    login.setUsesExternalConnectionPooling(false);
    login.setUsesExternalTransactionController(false);
    setLogin(login);
  }

  public Descriptor buildAccessRightsRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AccessRightsRef.class);
    descriptor.addTableName("PTRACCESS_RIGHTS_REF");
    descriptor.addPrimaryKeyFieldName("PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtraccessRightsRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accessRightsDescMapping = new DirectToFieldMapping();
    accessRightsDescMapping.setAttributeName("accessRightsDesc");
    accessRightsDescMapping.setFieldName("PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_DESC");
    accessRightsDescMapping.setNullValue("");
    descriptor.addMapping(accessRightsDescMapping);

    DirectToFieldMapping accessRightsIdMapping = new DirectToFieldMapping();
    accessRightsIdMapping.setAttributeName("accessRightsId");
    accessRightsIdMapping.setFieldName("PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_ID");
    descriptor.addMapping(accessRightsIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRACCESS_RIGHTS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping parentAccessRightsIdMapping = new DirectToFieldMapping();
    parentAccessRightsIdMapping.setAttributeName("parentAccessRightsId");
    parentAccessRightsIdMapping
        .setFieldName("PTRACCESS_RIGHTS_REF.PARENT_ACCESS_RIGHTS_ID");
    descriptor.addMapping(parentAccessRightsIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRACCESS_RIGHTS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  /**
 * @return
 */
public Descriptor buildAccountDescriptor() {
  return AccountMapping.build(this);
  }

  public void addDirectToFieldMapping(String fieldName, String attribute, Descriptor descriptor) {
    DirectToFieldMapping mapping = new DirectToFieldMapping();
    mapping.setAttributeName(attribute);
    mapping.setFieldName(fieldName);
    descriptor.addMapping(mapping);
  }

  public Descriptor buildAccountOwnerDetailsDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.account.AccountOwnerDetails.class);
    descriptor.addTableName("PTRACCOUNT_OWNER_DET");
    descriptor.addPrimaryKeyFieldName("PTRACCOUNT_OWNER_DET.ACCOUNT_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtraccountOwnerDet");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping annualIncomeMapping = new DirectToFieldMapping();
    annualIncomeMapping.setAttributeName("annualIncome");
    annualIncomeMapping.setFieldName("PTRACCOUNT_OWNER_DET.ANNUAL_INCOME");
    descriptor.addMapping(annualIncomeMapping);

    DirectToFieldMapping businessRegDateMapping = new DirectToFieldMapping();
    businessRegDateMapping.setAttributeName("businessRegDate");
    businessRegDateMapping
        .setFieldName("PTRACCOUNT_OWNER_DET.BUSINESS_REG_DATE");
    descriptor.addMapping(businessRegDateMapping);

    DirectToFieldMapping businessRegNumberMapping = new DirectToFieldMapping();
    businessRegNumberMapping.setAttributeName("businessRegNumber");
    businessRegNumberMapping
        .setFieldName("PTRACCOUNT_OWNER_DET.BUSINESS_REG_NUMBER");
    descriptor.addMapping(businessRegNumberMapping);

    DirectToFieldMapping dateOfBirthMapping = new DirectToFieldMapping();
    dateOfBirthMapping.setAttributeName("dateOfBirth");
    dateOfBirthMapping.setFieldName("PTRACCOUNT_OWNER_DET.DATE_OF_BIRTH");
    descriptor.addMapping(dateOfBirthMapping);

    DirectToFieldMapping designationMapping = new DirectToFieldMapping();
    designationMapping.setAttributeName("designation");
    designationMapping.setFieldName("PTRACCOUNT_OWNER_DET.DESIGNATION");
    descriptor.addMapping(designationMapping);

    DirectToFieldMapping embossedNameMapping = new DirectToFieldMapping();
    embossedNameMapping.setAttributeName("embossedName");
    embossedNameMapping.setFieldName("PTRACCOUNT_OWNER_DET.EMBOSSED_NAME");
    descriptor.addMapping(embossedNameMapping);

    DirectToFieldMapping employementDateMapping = new DirectToFieldMapping();
    employementDateMapping.setAttributeName("employementDate");
    employementDateMapping
        .setFieldName("PTRACCOUNT_OWNER_DET.EMPLOYEMENT_DATE");
    descriptor.addMapping(employementDateMapping);

    DirectToFieldMapping identityNumberMapping = new DirectToFieldMapping();
    identityNumberMapping.setAttributeName("identityNumber");
    identityNumberMapping.setFieldName("PTRACCOUNT_OWNER_DET.IDENTITY_NUMBER");
    descriptor.addMapping(identityNumberMapping);

    DirectToFieldMapping militaryNumberMapping = new DirectToFieldMapping();
    militaryNumberMapping.setAttributeName("militaryNumber");
    militaryNumberMapping.setFieldName("PTRACCOUNT_OWNER_DET.MILITARY_NUMBER");
    descriptor.addMapping(militaryNumberMapping);

    DirectToFieldMapping noOfDependentsMapping = new DirectToFieldMapping();
    noOfDependentsMapping.setAttributeName("noOfDependents");
    noOfDependentsMapping.setFieldName("PTRACCOUNT_OWNER_DET.NO_OF_DEPENDENTS");
    descriptor.addMapping(noOfDependentsMapping);

    DirectToFieldMapping oldIdentityNumberMapping = new DirectToFieldMapping();
    oldIdentityNumberMapping.setAttributeName("oldIdentityNumber");
    oldIdentityNumberMapping
        .setFieldName("PTRACCOUNT_OWNER_DET.OLD_IDENTITY_NUMBER");
    descriptor.addMapping(oldIdentityNumberMapping);

    DirectToFieldMapping passportNumberMapping = new DirectToFieldMapping();
    passportNumberMapping.setAttributeName("passportNumber");
    passportNumberMapping.setFieldName("PTRACCOUNT_OWNER_DET.PASSPORT_NUMBER");
    descriptor.addMapping(passportNumberMapping);

    DirectToFieldMapping shortNameMapping = new DirectToFieldMapping();
    shortNameMapping.setAttributeName("shortName");
    shortNameMapping.setFieldName("PTRACCOUNT_OWNER_DET.SHORT_NAME");
    descriptor.addMapping(shortNameMapping);

    OneToOneMapping accountMapping = new OneToOneMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addForeignKeyFieldName("PTRACCOUNT_OWNER_DET.ACCOUNT_ID",
        "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountMapping);

    OneToOneMapping addressDetailsMapping = new OneToOneMapping();
    addressDetailsMapping.setAttributeName("addressDetails");
    addressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    addressDetailsMapping.useBasicIndirection();
    addressDetailsMapping.addForeignKeyFieldName(
        "PTRACCOUNT_OWNER_DET.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(addressDetailsMapping);

    OneToOneMapping citizenshipRefMapping = new OneToOneMapping();
    citizenshipRefMapping.setAttributeName("citizenshipRef");
    citizenshipRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CitizenshipRef.class);
    citizenshipRefMapping.useBasicIndirection();
    citizenshipRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_OWNER_DET.CITIZENSHIP_ID",
        "PTRCITIZENSHIP_REF.CITIZENSHIP_ID");
    descriptor.addMapping(citizenshipRefMapping);

    OneToOneMapping maritalStatusRefMapping = new OneToOneMapping();
    maritalStatusRefMapping.setAttributeName("maritalStatusRef");
    maritalStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.MaritalStatusRef.class);
    maritalStatusRefMapping.useBasicIndirection();
    maritalStatusRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_OWNER_DET.MARITAL_STATUS_ID",
        "PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_ID");
    descriptor.addMapping(maritalStatusRefMapping);

    OneToOneMapping occupationRefMapping = new OneToOneMapping();
    occupationRefMapping.setAttributeName("occupationRef");
    occupationRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.OccupationRef.class);
    occupationRefMapping.useBasicIndirection();
    occupationRefMapping
        .addForeignKeyFieldName("PTRACCOUNT_OWNER_DET.OCCUPATION_ID",
            "PTROCCUPATION_REF.OCCUPATION_ID");
    descriptor.addMapping(occupationRefMapping);

    OneToOneMapping premisesRefMapping = new OneToOneMapping();
    premisesRefMapping.setAttributeName("premisesRef");
    premisesRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.PremisesRef.class);
    premisesRefMapping.useBasicIndirection();
    premisesRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_OWNER_DET.PREMISES_ID", "PTRPREMISES_REF.PREMISES_ID");
    descriptor.addMapping(premisesRefMapping);

    OneToOneMapping raceTypeRefMapping = new OneToOneMapping();
    raceTypeRefMapping.setAttributeName("raceTypeRef");
    raceTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.RaceTypeRef.class);
    raceTypeRefMapping.useBasicIndirection();
    raceTypeRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_OWNER_DET.RACE_TYPE_ID", "PTRRACE_TYPE_REF.RACE_TYPE_ID");
    descriptor.addMapping(raceTypeRefMapping);

    OneToOneMapping sexRefMapping = new OneToOneMapping();
    sexRefMapping.setAttributeName("sexRef");
    sexRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AccountSexRef.class);
    sexRefMapping.useBasicIndirection();
    sexRefMapping.addForeignKeyFieldName("PTRACCOUNT_OWNER_DET.SEX_ID",
        "PTRACC_SEX_REF.ACC_SEX_ID");
    descriptor.addMapping(sexRefMapping);

    return descriptor;
  }

  public Descriptor buildAccountSexRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AccountSexRef.class);
    descriptor.addTableName("PTRACC_SEX_REF");
    descriptor.addPrimaryKeyFieldName("PTRACC_SEX_REF.ACC_SEX_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRACC_SEX_REF.ACC_SEX_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtraccSexRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accSexCodeMapping = new DirectToFieldMapping();
    accSexCodeMapping.setAttributeName("accSexCode");
    accSexCodeMapping.setFieldName("PTRACC_SEX_REF.ACC_SEX_CODE");
    descriptor.addMapping(accSexCodeMapping);

    DirectToFieldMapping accSexDescMapping = new DirectToFieldMapping();
    accSexDescMapping.setAttributeName("accSexDesc");
    accSexDescMapping.setFieldName("PTRACC_SEX_REF.ACC_SEX_DESC");
    accSexDescMapping.setNullValue("");
    descriptor.addMapping(accSexDescMapping);

    DirectToFieldMapping accSexIdMapping = new DirectToFieldMapping();
    accSexIdMapping.setAttributeName("accSexId");
    accSexIdMapping.setFieldName("PTRACC_SEX_REF.ACC_SEX_ID");
    descriptor.addMapping(accSexIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRACC_SEX_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRACC_SEX_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildAccountStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AccountStatusRef.class);
    descriptor.addTableName("PTRACC_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRACC_STATUS_REF.ACCOUNT_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACC_STATUS_REF.ACCOUNT_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtraccStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accountStatusCodeMapping = new DirectToFieldMapping();
    accountStatusCodeMapping.setAttributeName("accountStatusCode");
    accountStatusCodeMapping
        .setFieldName("PTRACC_STATUS_REF.ACCOUNT_STATUS_CODE");
    descriptor.addMapping(accountStatusCodeMapping);

    DirectToFieldMapping accountStatusDescMapping = new DirectToFieldMapping();
    accountStatusDescMapping.setAttributeName("accountStatusDesc");
    accountStatusDescMapping
        .setFieldName("PTRACC_STATUS_REF.ACCOUNT_STATUS_DESC");
    accountStatusDescMapping.setNullValue("");
    descriptor.addMapping(accountStatusDescMapping);

    DirectToFieldMapping accountStatusIdMapping = new DirectToFieldMapping();
    accountStatusIdMapping.setAttributeName("accountStatusId");
    accountStatusIdMapping.setFieldName("PTRACC_STATUS_REF.ACCOUNT_STATUS_ID");
    descriptor.addMapping(accountStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRACC_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRACC_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildAccountTreatmentPlanDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.account.AccountTreatmentPlan.class);
    descriptor.addTableName("PTRACC_TREATMENT_PLAN");
    descriptor
        .addPrimaryKeyFieldName("PTRACC_TREATMENT_PLAN.TREATMENT_PLAN_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACC_TREATMENT_PLAN.TREATMENT_PLAN_ID");
    descriptor.setSequenceNumberName("TREATMENT_PLAN_ID_SEQ");
    descriptor.setAlias("PtraccTreatmentPlan");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping nodeLocationMapping = new DirectToFieldMapping();
    nodeLocationMapping.setAttributeName("nodeLocation");
    nodeLocationMapping.setFieldName("PTRACC_TREATMENT_PLAN.NODE_LOCATION");
    descriptor.addMapping(nodeLocationMapping);

    DirectToFieldMapping treatmentEndDateMapping = new DirectToFieldMapping();
    treatmentEndDateMapping.setAttributeName("treatmentEndDate");
    treatmentEndDateMapping
        .setFieldName("PTRACC_TREATMENT_PLAN.TREATMENT_END_DATE");
    descriptor.addMapping(treatmentEndDateMapping);

    DirectToFieldMapping treatmentPlanDescMapping = new DirectToFieldMapping();
    treatmentPlanDescMapping.setAttributeName("treatmentPlanDesc");
    treatmentPlanDescMapping.setFieldName("PTRACC_TREATMENT_PLAN.DESCRIPTION");
    descriptor.addMapping(treatmentPlanDescMapping);

    DirectToFieldMapping treatmentPlanIdMapping = new DirectToFieldMapping();
    treatmentPlanIdMapping.setAttributeName("treatmentPlanId");
    treatmentPlanIdMapping
        .setFieldName("PTRACC_TREATMENT_PLAN.TREATMENT_PLAN_ID");
    descriptor.addMapping(treatmentPlanIdMapping);

    DirectToFieldMapping treatmentStartDateMapping = new DirectToFieldMapping();
    treatmentStartDateMapping.setAttributeName("treatmentStartDate");
    treatmentStartDateMapping
        .setFieldName("PTRACC_TREATMENT_PLAN.TREATMENT_START_DATE");
    descriptor.addMapping(treatmentStartDateMapping);

    OneToOneMapping accountMapping = new OneToOneMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addForeignKeyFieldName("PTRACC_TREATMENT_PLAN.ACCOUNT_ID",
        "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountMapping);

    OneToOneMapping lastTreatmentActionRefMapping = new OneToOneMapping();
    lastTreatmentActionRefMapping.setAttributeName("lastTreatmentActionRef");
    lastTreatmentActionRefMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentProcess.class);
    lastTreatmentActionRefMapping.useBasicIndirection();
    lastTreatmentActionRefMapping.addForeignKeyFieldName(
        "PTRACC_TREATMENT_PLAN.LAST_TREATMENT_ACTION_ID",
        "PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");
    descriptor.addMapping(lastTreatmentActionRefMapping);

    OneToOneMapping lastTreatmentResultRefMapping = new OneToOneMapping();
    lastTreatmentResultRefMapping.setAttributeName("lastTreatmentResultRef");
    lastTreatmentResultRefMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentProcess.class);
    lastTreatmentResultRefMapping.useBasicIndirection();
    lastTreatmentResultRefMapping.addForeignKeyFieldName(
        "PTRACC_TREATMENT_PLAN.LAST_TREATMENT_RESULT_ID",
        "PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");
    descriptor.addMapping(lastTreatmentResultRefMapping);

    OneToOneMapping treatmentStreamRefMapping = new OneToOneMapping();
    treatmentStreamRefMapping.setAttributeName("treatmentStreamRef");
    treatmentStreamRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStreamRef.class);
    treatmentStreamRefMapping.useBasicIndirection();
    treatmentStreamRefMapping.addForeignKeyFieldName(
        "PTRACC_TREATMENT_PLAN.TREATMENT_STREAM_ID",
        "PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.addMapping(treatmentStreamRefMapping);

    OneToManyMapping treatmentProcessesMapping = new OneToManyMapping();
    treatmentProcessesMapping.setAttributeName("treatmentProcesses");
    treatmentProcessesMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentProcess.class);
    treatmentProcessesMapping.useBasicIndirection();
    treatmentProcessesMapping.addTargetForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.TREATMENT_PLAN_ID",
        "PTRACC_TREATMENT_PLAN.TREATMENT_PLAN_ID");
    descriptor.addMapping(treatmentProcessesMapping);

    return descriptor;
  }

  public Descriptor buildAccountUnbilledDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.account.AccountUnbilled.class);
    descriptor.addTableName("PTRACCOUNT_UNBILLED");
    descriptor
        .addPrimaryKeyFieldName("PTRACCOUNT_UNBILLED.ACCOUNT_UNBILLED_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACCOUNT_UNBILLED.ACCOUNT_UNBILLED_ID");
    descriptor.setSequenceNumberName("ACCOUNT_UNBILLED_ID_SEQ");
    descriptor.setAlias("PtraccountUnbilled");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accountUnbilledIdMapping = new DirectToFieldMapping();
    accountUnbilledIdMapping.setAttributeName("accountUnbilledId");
    accountUnbilledIdMapping
        .setFieldName("PTRACCOUNT_UNBILLED.ACCOUNT_UNBILLED_ID");
    descriptor.addMapping(accountUnbilledIdMapping);

    DirectToFieldMapping chargeAmtMapping = new DirectToFieldMapping();
    chargeAmtMapping.setAttributeName("chargeAmt");
    chargeAmtMapping.setFieldName("PTRACCOUNT_UNBILLED.CHARGE_AMT");
    descriptor.addMapping(chargeAmtMapping);

    DirectToFieldMapping chargeDateMapping = new DirectToFieldMapping();
    chargeDateMapping.setAttributeName("chargeDate");
    chargeDateMapping.setFieldName("PTRACCOUNT_UNBILLED.CHARGE_DATE");
    descriptor.addMapping(chargeDateMapping);

    DirectToFieldMapping chargeReferenceNoMapping = new DirectToFieldMapping();
    chargeReferenceNoMapping.setAttributeName("chargeReferenceNo");
    chargeReferenceNoMapping
        .setFieldName("PTRACCOUNT_UNBILLED.CHARGE_REFERENCE_NO");
    descriptor.addMapping(chargeReferenceNoMapping);

    DirectToFieldMapping chargeRemarksMapping = new DirectToFieldMapping();
    chargeRemarksMapping.setAttributeName("chargeRemarks");
    chargeRemarksMapping.setFieldName("PTRACCOUNT_UNBILLED.CHARGE_REMARKS");
    descriptor.addMapping(chargeRemarksMapping);

    DirectToFieldMapping foreignChargeAmtMapping = new DirectToFieldMapping();
    foreignChargeAmtMapping.setAttributeName("foreignChargeAmt");
    foreignChargeAmtMapping
        .setFieldName("PTRACCOUNT_UNBILLED.FOREIGN_CHARGE_AMT");
    descriptor.addMapping(foreignChargeAmtMapping);

    OneToOneMapping accountMapping = new OneToOneMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addForeignKeyFieldName("PTRACCOUNT_UNBILLED.ACCOUNT_ID",
        "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountMapping);

    OneToOneMapping chargeTypeRefMapping = new OneToOneMapping();
    chargeTypeRefMapping.setAttributeName("chargeTypeRef");
    chargeTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.UnbilledTypeRef.class);
    chargeTypeRefMapping.useBasicIndirection();
    chargeTypeRefMapping.readOnly();
    chargeTypeRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_UNBILLED.CHARGE_TYPE_ID",
        "PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_ID");
    descriptor.addMapping(chargeTypeRefMapping);

    OneToOneMapping tranCodeRefMapping = new OneToOneMapping();
    tranCodeRefMapping.setAttributeName("tranCodeRef");
    tranCodeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TransactionCodeRef.class);
    tranCodeRefMapping.useBasicIndirection();
    tranCodeRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_UNBILLED.CHARGE_TRAN_CODE_ID",
        "PTRTRAN_CODE_REF.TRAN_CODE_ID");
    descriptor.addMapping(tranCodeRefMapping);

    return descriptor;
  }

  public Descriptor buildAccountWorkListHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.history.AccountWorkListHistory.class);
    descriptor.addTableName("PTRACCOUNT_WORKLIST_HISTORY");
    descriptor
        .addPrimaryKeyFieldName("PTRACCOUNT_WORKLIST_HISTORY.ACC_WORKLIST_HISTORY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACCOUNT_WORKLIST_HISTORY.ACC_WORKLIST_HISTORY_ID");
    descriptor.setSequenceNumberName("ACC_WORKLIST_HISTORY_ID_SEQ");
    descriptor.setAlias("PtraccountWorklistHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accWorklistHistoryIdMapping = new DirectToFieldMapping();
    accWorklistHistoryIdMapping.setAttributeName("accWorklistHistoryId");
    accWorklistHistoryIdMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.ACC_WORKLIST_HISTORY_ID");
    descriptor.addMapping(accWorklistHistoryIdMapping);

    DirectToFieldMapping assignedDateTimeMapping = new DirectToFieldMapping();
    assignedDateTimeMapping.setAttributeName("assignedDateTime");
    assignedDateTimeMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.ASSIGNED_DATE_TIME");
    descriptor.addMapping(assignedDateTimeMapping);

    DirectToFieldMapping delinqentAmtMapping = new DirectToFieldMapping();
    delinqentAmtMapping.setAttributeName("delinqentAmt");
    delinqentAmtMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.DELINQENT_AMT");
    descriptor.addMapping(delinqentAmtMapping);

    DirectToFieldMapping endDateTimeMapping = new DirectToFieldMapping();
    endDateTimeMapping.setAttributeName("endDateTime");
    endDateTimeMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.END_DATE_TIME");
    descriptor.addMapping(endDateTimeMapping);

    DirectToFieldMapping movedDateTimeMapping = new DirectToFieldMapping();
    movedDateTimeMapping.setAttributeName("movedDateTime");
    movedDateTimeMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.MOVED_DATE_TIME");
    descriptor.addMapping(movedDateTimeMapping);

    DirectToFieldMapping startDateTimeMapping = new DirectToFieldMapping();
    startDateTimeMapping.setAttributeName("startDateTime");
    startDateTimeMapping
        .setFieldName("PTRACCOUNT_WORKLIST_HISTORY.START_DATE_TIME");
    descriptor.addMapping(startDateTimeMapping);

    OneToOneMapping accWorklistStatusRefMapping = new OneToOneMapping();
    accWorklistStatusRefMapping.setAttributeName("accWorklistStatusRef");
    accWorklistStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AccountWorkListStatusRef.class);
    accWorklistStatusRefMapping.useBasicIndirection();
    accWorklistStatusRefMapping.addForeignKeyFieldName(
        "PTRACCOUNT_WORKLIST_HISTORY.ACC_WORKLIST_STATUS",
        "PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_ID");
    descriptor.addMapping(accWorklistStatusRefMapping);

    OneToOneMapping accountMapping = new OneToOneMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addForeignKeyFieldName(
        "PTRACCOUNT_WORKLIST_HISTORY.ACCOUNT_ID", "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountMapping);

    OneToOneMapping userMapping = new OneToOneMapping();
    userMapping.setAttributeName("user");
    userMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    userMapping.useBasicIndirection();
    userMapping.addForeignKeyFieldName("PTRACCOUNT_WORKLIST_HISTORY.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(userMapping);

    OneToOneMapping workListMapping = new OneToOneMapping();
    workListMapping.setAttributeName("workList");
    workListMapping
        .setReferenceClass(com.profitera.descriptor.db.worklist.WorkList.class);
    workListMapping.useBasicIndirection();
    workListMapping
        .addForeignKeyFieldName("PTRACCOUNT_WORKLIST_HISTORY.WORK_LIST_ID",
            "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(workListMapping);

    return descriptor;
  }

  public Descriptor buildAccountWorkListStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AccountWorkListStatusRef.class);
    descriptor.addTableName("PTRACC_WRKLIS_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtraccWrklisStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accWrklistStatusCodeMapping = new DirectToFieldMapping();
    accWrklistStatusCodeMapping.setAttributeName("accWrklistStatusCode");
    accWrklistStatusCodeMapping
        .setFieldName("PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_CODE");
    descriptor.addMapping(accWrklistStatusCodeMapping);

    DirectToFieldMapping accWrklistStatusDescMapping = new DirectToFieldMapping();
    accWrklistStatusDescMapping.setAttributeName("accWrklistStatusDesc");
    accWrklistStatusDescMapping
        .setFieldName("PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_DESC");
    accWrklistStatusDescMapping.setNullValue("");
    descriptor.addMapping(accWrklistStatusDescMapping);

    DirectToFieldMapping accWrklistStatusIdMapping = new DirectToFieldMapping();
    accWrklistStatusIdMapping.setAttributeName("accWrklistStatusId");
    accWrklistStatusIdMapping
        .setFieldName("PTRACC_WRKLIS_STATUS_REF.ACC_WRKLIST_STATUS_ID");
    descriptor.addMapping(accWrklistStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRACC_WRKLIS_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRACC_WRKLIS_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildActionConversionMatrixDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.ActionConversionMatrix.class);
    descriptor.addTableName("PTRACTION_CONVERSION_MATRIX");
    descriptor
        .addPrimaryKeyFieldName("PTRACTION_CONVERSION_MATRIX.ACTION_TYPE");
    descriptor
        .addPrimaryKeyFieldName("PTRACTION_CONVERSION_MATRIX.TREATMENT_PROCESS_CLASS");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtractionConversionMatrix");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping actionTypeMapping = new DirectToFieldMapping();
    actionTypeMapping.setAttributeName("actionType");
    actionTypeMapping.setFieldName("PTRACTION_CONVERSION_MATRIX.ACTION_TYPE");
    descriptor.addMapping(actionTypeMapping);

    DirectToFieldMapping treatmentProcessClassMapping = new DirectToFieldMapping();
    treatmentProcessClassMapping.setAttributeName("treatmentProcessClass");
    treatmentProcessClassMapping
        .setFieldName("PTRACTION_CONVERSION_MATRIX.TREATMENT_PROCESS_CLASS");
    descriptor.addMapping(treatmentProcessClassMapping);

    return descriptor;
  }

  public Descriptor buildAddressDetailsDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    descriptor.addTableName("PTRADDRESS_DET");
    descriptor.addPrimaryKeyFieldName("PTRADDRESS_DET.CONTACT_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRADDRESS_DET.CONTACT_ID");
    descriptor.setSequenceNumberName("CONTACT_ID_SEQ");
    descriptor.setAlias("PtraddressDet");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping address1Mapping = new DirectToFieldMapping();
    address1Mapping.setAttributeName("address1");
    address1Mapping.setFieldName("PTRADDRESS_DET.ADDRESS_1");
    descriptor.addMapping(address1Mapping);

    DirectToFieldMapping address2Mapping = new DirectToFieldMapping();
    address2Mapping.setAttributeName("address2");
    address2Mapping.setFieldName("PTRADDRESS_DET.ADDRESS_2");
    descriptor.addMapping(address2Mapping);

    DirectToFieldMapping cityMapping = new DirectToFieldMapping();
    cityMapping.setAttributeName("city");
    cityMapping.setFieldName("PTRADDRESS_DET.CITY");
    descriptor.addMapping(cityMapping);

    DirectToFieldMapping contactAliasMapping = new DirectToFieldMapping();
    contactAliasMapping.setAttributeName("contactAlias");
    contactAliasMapping.setFieldName("PTRADDRESS_DET.CONTACT_ALIAS");
    descriptor.addMapping(contactAliasMapping);

    DirectToFieldMapping contactCategoryMapping = new DirectToFieldMapping();
    contactCategoryMapping.setAttributeName("contactCategory");
    contactCategoryMapping.setFieldName("PTRADDRESS_DET.CONTACT_CATEGORY");
    descriptor.addMapping(contactCategoryMapping);

    DirectToFieldMapping contactFirstNameMapping = new DirectToFieldMapping();
    contactFirstNameMapping.setAttributeName("contactFirstName");
    contactFirstNameMapping.setFieldName("PTRADDRESS_DET.CONTACT_FIRST_NAME");
    descriptor.addMapping(contactFirstNameMapping);

    DirectToFieldMapping contactIdMapping = new DirectToFieldMapping();
    contactIdMapping.setAttributeName("contactId");
    contactIdMapping.setFieldName("PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(contactIdMapping);

    DirectToFieldMapping contactLastNameMapping = new DirectToFieldMapping();
    contactLastNameMapping.setAttributeName("contactLastName");
    contactLastNameMapping.setFieldName("PTRADDRESS_DET.CONTACT_LAST_NAME");
    descriptor.addMapping(contactLastNameMapping);

    DirectToFieldMapping contactMiddleNameMapping = new DirectToFieldMapping();
    contactMiddleNameMapping.setAttributeName("contactMiddleName");
    contactMiddleNameMapping.setFieldName("PTRADDRESS_DET.CONTACT_MIDDLE_NAME");
    descriptor.addMapping(contactMiddleNameMapping);

    DirectToFieldMapping contactOwnerIdMapping = new DirectToFieldMapping();
    contactOwnerIdMapping.setAttributeName("contactOwnerId");
    contactOwnerIdMapping.setFieldName("PTRADDRESS_DET.CONTACT_OWNER_ID");
    descriptor.addMapping(contactOwnerIdMapping);

    DirectToFieldMapping contactTimeAfterMapping = new DirectToFieldMapping();
    contactTimeAfterMapping.setAttributeName("contactTimeAfter");
    contactTimeAfterMapping.setFieldName("PTRADDRESS_DET.CONTACT_TIME_AFTER");
    descriptor.addMapping(contactTimeAfterMapping);

    DirectToFieldMapping contactTimeBeforeMapping = new DirectToFieldMapping();
    contactTimeBeforeMapping.setAttributeName("contactTimeBefore");
    contactTimeBeforeMapping.setFieldName("PTRADDRESS_DET.CONTACT_TIME_BEFORE");
    descriptor.addMapping(contactTimeBeforeMapping);

    DirectToFieldMapping preferredPositionMapping = new DirectToFieldMapping();
    preferredPositionMapping.setAttributeName("preferredPosition");
    preferredPositionMapping.setFieldName("PTRADDRESS_DET.PREFERRED_POSITION");
    descriptor.addMapping(preferredPositionMapping);

    DirectToFieldMapping remarksMapping = new DirectToFieldMapping();
    remarksMapping.setAttributeName("remarks");
    remarksMapping.setFieldName("PTRADDRESS_DET.REMARKS");
    descriptor.addMapping(remarksMapping);

    DirectToFieldMapping sectionMapping = new DirectToFieldMapping();
    sectionMapping.setAttributeName("section");
    sectionMapping.setFieldName("PTRADDRESS_DET.SECTION");
    descriptor.addMapping(sectionMapping);

    DirectToFieldMapping streetNameMapping = new DirectToFieldMapping();
    streetNameMapping.setAttributeName("streetName");
    streetNameMapping.setFieldName("PTRADDRESS_DET.STREET_NAME");
    descriptor.addMapping(streetNameMapping);

    DirectToFieldMapping zipCodeMapping = new DirectToFieldMapping();
    zipCodeMapping.setAttributeName("zipCode");
    zipCodeMapping.setFieldName("PTRADDRESS_DET.ZIP_CODE");
    descriptor.addMapping(zipCodeMapping);

    OneToOneMapping contactTypeRefMapping = new OneToOneMapping();
    contactTypeRefMapping.setAttributeName("contactTypeRef");
    contactTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ContactTypeRef.class);
    contactTypeRefMapping.useBasicIndirection();
    contactTypeRefMapping
        .addForeignKeyFieldName("PTRADDRESS_DET.CONTACT_TYPE_ID",
            "PTRCONTACT_TYPE_REF.CONTACT_TYPE_ID");
    descriptor.addMapping(contactTypeRefMapping);

    OneToOneMapping countryRefMapping = new OneToOneMapping();
    countryRefMapping.setAttributeName("countryRef");
    countryRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CountryRef.class);
    countryRefMapping.useBasicIndirection();
    countryRefMapping.addForeignKeyFieldName("PTRADDRESS_DET.COUNTRY_ID",
        "PTRCOUNTRY_REF.COUNTRY_ID");
    descriptor.addMapping(countryRefMapping);

    OneToOneMapping ownerAccountDetailsMapping = new OneToOneMapping();
    ownerAccountDetailsMapping.setAttributeName("ownerAccountDetails");
    ownerAccountDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.account.AccountOwnerDetails.class);
    ownerAccountDetailsMapping.useBasicIndirection();
    ownerAccountDetailsMapping.readOnly();
    ownerAccountDetailsMapping.addForeignKeyFieldName(
        "PTRADDRESS_DET.CONTACT_ID", "PTRACCOUNT_OWNER_DET.CONTACT_ID");
    descriptor.addMapping(ownerAccountDetailsMapping);

    OneToOneMapping ownerAgencyMapping = new OneToOneMapping();
    ownerAgencyMapping.setAttributeName("ownerAgency");
    ownerAgencyMapping
        .setReferenceClass(com.profitera.descriptor.db.client.Agency.class);
    ownerAgencyMapping.useBasicIndirection();
    ownerAgencyMapping.readOnly();
    ownerAgencyMapping.addForeignKeyFieldName("PTRADDRESS_DET.CONTACT_ID",
        "PTRAGENCY.CONTACT_ID");
    descriptor.addMapping(ownerAgencyMapping);

    OneToOneMapping ownerBusinessUnitMapping = new OneToOneMapping();
    ownerBusinessUnitMapping.setAttributeName("ownerBusinessUnit");
    ownerBusinessUnitMapping
        .setReferenceClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    ownerBusinessUnitMapping
        .setRelationshipPartnerAttributeName("addressDetails");
    ownerBusinessUnitMapping.useBasicIndirection();
    ownerBusinessUnitMapping.readOnly();
    ownerBusinessUnitMapping.addForeignKeyFieldName(
        "PTRADDRESS_DET.CONTACT_ID", "PTRBUSINESS_UNIT.CONTACT_ID");
    descriptor.addMapping(ownerBusinessUnitMapping);

    OneToOneMapping ownerCustomerMapping = new OneToOneMapping();
    ownerCustomerMapping.setAttributeName("ownerCustomer");
    ownerCustomerMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Customer.class);
    ownerCustomerMapping.useBasicIndirection();
    ownerCustomerMapping.readOnly();
    ownerCustomerMapping.addForeignKeyFieldName("PTRADDRESS_DET.CONTACT_ID",
        "PTRCUSTOMER.CONTACT_ID");
    descriptor.addMapping(ownerCustomerMapping);

    OneToOneMapping ownerEmployeeMapping = new OneToOneMapping();
    ownerEmployeeMapping.setAttributeName("ownerEmployee");
    ownerEmployeeMapping
        .setReferenceClass(com.profitera.descriptor.db.user.Employee.class);
    ownerEmployeeMapping.useBasicIndirection();
    ownerEmployeeMapping.readOnly();
    ownerEmployeeMapping.addForeignKeyFieldName("PTRADDRESS_DET.CONTACT_ID",
        "PTREMPLOYEE.CONTACT_ID");
    descriptor.addMapping(ownerEmployeeMapping);

    OneToOneMapping salutationTypeRefMapping = new OneToOneMapping();
    salutationTypeRefMapping.setAttributeName("salutationTypeRef");
    salutationTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.SalutationTypeRef.class);
    salutationTypeRefMapping.useBasicIndirection();
    salutationTypeRefMapping.addForeignKeyFieldName(
        "PTRADDRESS_DET.SALUTATION_ID", "PTRSALUTATION_TYPE_REF.SALUTATION_ID");
    descriptor.addMapping(salutationTypeRefMapping);

    OneToOneMapping stateRefMapping = new OneToOneMapping();
    stateRefMapping.setAttributeName("stateRef");
    stateRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.StateRef.class);
    stateRefMapping.useBasicIndirection();
    stateRefMapping.addForeignKeyFieldName("PTRADDRESS_DET.STATE_ID",
        "PTRSTATE_REF.STATE_ID");
    descriptor.addMapping(stateRefMapping);

    OneToManyMapping contactNumbersMapping = new OneToManyMapping();
    contactNumbersMapping.setAttributeName("contactNumbers");
    contactNumbersMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.ContactNumber.class);
    contactNumbersMapping.useBasicIndirection();
    contactNumbersMapping.addTargetForeignKeyFieldName(
        "PTRCONTACT_NUMBER.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(contactNumbersMapping);

    ManyToManyMapping accountContactsMapping = new ManyToManyMapping();
    accountContactsMapping.setAttributeName("accountContacts");
    accountContactsMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountContactsMapping.useBasicIndirection();
    accountContactsMapping.readOnly();
    accountContactsMapping.setRelationTableName("PTRACCOUNT_CONTACT_REL");
    accountContactsMapping.addSourceRelationKeyFieldName(
        "PTRACCOUNT_CONTACT_REL.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    accountContactsMapping.addTargetRelationKeyFieldName(
        "PTRACCOUNT_CONTACT_REL.ACCOUNT_ID", "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountContactsMapping);

    ManyToManyMapping customerContactsMapping = new ManyToManyMapping();
    customerContactsMapping.setAttributeName("customerContacts");
    customerContactsMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Customer.class);
    customerContactsMapping.useBasicIndirection();
    customerContactsMapping.readOnly();
    customerContactsMapping.setRelationTableName("PTRCUSTOMER_CONTACT_REL");
    customerContactsMapping.addSourceRelationKeyFieldName(
        "PTRCUSTOMER_CONTACT_REL.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    customerContactsMapping.addTargetRelationKeyFieldName(
        "PTRCUSTOMER_CONTACT_REL.CUSTOMER_ID", "PTRCUSTOMER.CUSTOMER_ID");
    descriptor.addMapping(customerContactsMapping);

    ManyToManyMapping employeeContactsMapping = new ManyToManyMapping();
    employeeContactsMapping.setAttributeName("employeeContacts");
    employeeContactsMapping
        .setReferenceClass(com.profitera.descriptor.db.user.Employee.class);
    employeeContactsMapping.useBasicIndirection();
    employeeContactsMapping.readOnly();
    employeeContactsMapping.setRelationTableName("PTREMPLOYEE_CONTACT_REL");
    employeeContactsMapping.addSourceRelationKeyFieldName(
        "PTREMPLOYEE_CONTACT_REL.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    employeeContactsMapping.addTargetRelationKeyFieldName(
        "PTREMPLOYEE_CONTACT_REL.EMPLOYEE_ID", "PTREMPLOYEE.EMPLOYEE_ID");
    descriptor.addMapping(employeeContactsMapping);

    return descriptor;
  }

  public Descriptor buildAgencyDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.client.Agency.class);
    descriptor.addTableName("PTRAGENCY");
    descriptor.addPrimaryKeyFieldName("PTRAGENCY.AGENCY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRAGENCY.AGENCY_ID");
    descriptor.setSequenceNumberName("AGENCY_ID_SEQ");
    descriptor.setAlias("Ptragency");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping agencyChgsToDateMapping = new DirectToFieldMapping();
    agencyChgsToDateMapping.setAttributeName("agencyChgsToDate");
    agencyChgsToDateMapping.setFieldName("PTRAGENCY.AGENCY_CHGS_TO_DATE");
    descriptor.addMapping(agencyChgsToDateMapping);

    DirectToFieldMapping agencyDescMapping = new DirectToFieldMapping();
    agencyDescMapping.setAttributeName("agencyDesc");
    agencyDescMapping.setFieldName("PTRAGENCY.AGENCY_DESC");
    descriptor.addMapping(agencyDescMapping);

    DirectToFieldMapping agencyEffectiveDateMapping = new DirectToFieldMapping();
    agencyEffectiveDateMapping.setAttributeName("agencyEffectiveDate");
    agencyEffectiveDateMapping.setFieldName("PTRAGENCY.AGENCY_EFFECTIVE_DATE");
    descriptor.addMapping(agencyEffectiveDateMapping);

    DirectToFieldMapping agencyEndDateMapping = new DirectToFieldMapping();
    agencyEndDateMapping.setAttributeName("agencyEndDate");
    agencyEndDateMapping.setFieldName("PTRAGENCY.AGENCY_END_DATE");
    descriptor.addMapping(agencyEndDateMapping);

    DirectToFieldMapping agencyExtIntMapping = new DirectToFieldMapping();
    agencyExtIntMapping.setAttributeName("agencyExtInt");
    agencyExtIntMapping.setFieldName("PTRAGENCY.AGENCY_EXT_INT");
    descriptor.addMapping(agencyExtIntMapping);

    DirectToFieldMapping agencyIdMapping = new DirectToFieldMapping();
    agencyIdMapping.setAttributeName("agencyId");
    agencyIdMapping.setFieldName("PTRAGENCY.AGENCY_ID");
    descriptor.addMapping(agencyIdMapping);

    DirectToFieldMapping agencyNameMapping = new DirectToFieldMapping();
    agencyNameMapping.setAttributeName("agencyName");
    agencyNameMapping.setFieldName("PTRAGENCY.AGENCY_NAME");
    descriptor.addMapping(agencyNameMapping);

    DirectToFieldMapping agencyPaidToDateMapping = new DirectToFieldMapping();
    agencyPaidToDateMapping.setAttributeName("agencyPaidToDate");
    agencyPaidToDateMapping.setFieldName("PTRAGENCY.AGENCY_PAID_TO_DATE");
    descriptor.addMapping(agencyPaidToDateMapping);

    DirectToFieldMapping agencyTotalDepositMapping = new DirectToFieldMapping();
    agencyTotalDepositMapping.setAttributeName("agencyTotalDeposit");
    agencyTotalDepositMapping.setFieldName("PTRAGENCY.AGENCY_TOTAL_DEPOSIT");
    descriptor.addMapping(agencyTotalDepositMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRAGENCY.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRAGENCY.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping addressDetailsMapping = new OneToOneMapping();
    addressDetailsMapping.setAttributeName("addressDetails");
    addressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    addressDetailsMapping.useBasicIndirection();
    addressDetailsMapping.addForeignKeyFieldName("PTRAGENCY.CONTACT_ID",
        "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(addressDetailsMapping);

    OneToOneMapping agencyTypeRefMapping = new OneToOneMapping();
    agencyTypeRefMapping.setAttributeName("agencyTypeRef");
    agencyTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AgencyTypeRef.class);
    agencyTypeRefMapping.useBasicIndirection();
    agencyTypeRefMapping.addForeignKeyFieldName("PTRAGENCY.AGENCY_TYPE_ID",
        "PTRAGY_TYPE_REF.AGY_TYPE_ID");
    descriptor.addMapping(agencyTypeRefMapping);

    return descriptor;
  }
  
  public Descriptor buildAgencyTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AgencyTypeRef.class);
    descriptor.addTableName("PTRAGY_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRAGY_TYPE_REF.AGY_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRAGY_TYPE_REF.AGY_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtragyTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping agyTypeCodeMapping = new DirectToFieldMapping();
    agyTypeCodeMapping.setAttributeName("agyTypeCode");
    agyTypeCodeMapping.setFieldName("PTRAGY_TYPE_REF.AGY_TYPE_CODE");
    descriptor.addMapping(agyTypeCodeMapping);

    DirectToFieldMapping agyTypeDescMapping = new DirectToFieldMapping();
    agyTypeDescMapping.setAttributeName("agyTypeDesc");
    agyTypeDescMapping.setFieldName("PTRAGY_TYPE_REF.AGY_TYPE_DESC");
    agyTypeDescMapping.setNullValue("");
    descriptor.addMapping(agyTypeDescMapping);

    DirectToFieldMapping agyTypeIdMapping = new DirectToFieldMapping();
    agyTypeIdMapping.setAttributeName("agyTypeId");
    agyTypeIdMapping.setFieldName("PTRAGY_TYPE_REF.AGY_TYPE_ID");
    descriptor.addMapping(agyTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRAGY_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRAGY_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildAlternateWeekendRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AlternateWeekendRef.class);
    descriptor.addTableName("PTRALTERNATE_WEEKEND_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtralternateWeekendRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping altWeekendCodeMapping = new DirectToFieldMapping();
    altWeekendCodeMapping.setAttributeName("altWeekendCode");
    altWeekendCodeMapping
        .setFieldName("PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_CODE");
    descriptor.addMapping(altWeekendCodeMapping);

    DirectToFieldMapping altWeekendDescMapping = new DirectToFieldMapping();
    altWeekendDescMapping.setAttributeName("altWeekendDesc");
    altWeekendDescMapping
        .setFieldName("PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_DESC");
    descriptor.addMapping(altWeekendDescMapping);

    DirectToFieldMapping altWeekendIdMapping = new DirectToFieldMapping();
    altWeekendIdMapping.setAttributeName("altWeekendId");
    altWeekendIdMapping.setFieldName("PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_ID");
    descriptor.addMapping(altWeekendIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRALTERNATE_WEEKEND_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRALTERNATE_WEEKEND_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildAutoPayRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AutoPayRef.class);
    descriptor.addTableName("PTRAUTO_PAY_REF");
    descriptor.addPrimaryKeyFieldName("PTRAUTO_PAY_REF.AUTO_PAY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRAUTO_PAY_REF.AUTO_PAY_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrautoPayRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping autoPayCodeMapping = new DirectToFieldMapping();
    autoPayCodeMapping.setAttributeName("autoPayCode");
    autoPayCodeMapping.setFieldName("PTRAUTO_PAY_REF.AUTO_PAY_CODE");
    descriptor.addMapping(autoPayCodeMapping);

    DirectToFieldMapping autoPayDescMapping = new DirectToFieldMapping();
    autoPayDescMapping.setAttributeName("autoPayDesc");
    autoPayDescMapping.setFieldName("PTRAUTO_PAY_REF.AUTO_PAY_DESC");
    autoPayDescMapping.setNullValue("");
    descriptor.addMapping(autoPayDescMapping);

    DirectToFieldMapping autoPayIdMapping = new DirectToFieldMapping();
    autoPayIdMapping.setAttributeName("autoPayId");
    autoPayIdMapping.setFieldName("PTRAUTO_PAY_REF.AUTO_PAY_ID");
    descriptor.addMapping(autoPayIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRAUTO_PAY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRAUTO_PAY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildAutoPayStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.AutoPayStatusRef.class);
    descriptor.addTableName("PTRAUTO_PAY_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRAUTO_PAY_STATUS_REF.AUTO_PAY_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRAUTO_PAY_STATUS_REF.AUTO_PAY_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrautoPayStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping autoPayStatusCodeMapping = new DirectToFieldMapping();
    autoPayStatusCodeMapping.setAttributeName("autoPayStatusCode");
    autoPayStatusCodeMapping
        .setFieldName("PTRAUTO_PAY_STATUS_REF.AUTO_PAY_STATUS_CODE");
    descriptor.addMapping(autoPayStatusCodeMapping);

    DirectToFieldMapping autoPayStatusDescMapping = new DirectToFieldMapping();
    autoPayStatusDescMapping.setAttributeName("autoPayStatusDesc");
    autoPayStatusDescMapping
        .setFieldName("PTRAUTO_PAY_STATUS_REF.AUTO_PAY_STATUS_DESC");
    autoPayStatusDescMapping.setNullValue("");
    descriptor.addMapping(autoPayStatusDescMapping);

    DirectToFieldMapping autoPayStatusIdMapping = new DirectToFieldMapping();
    autoPayStatusIdMapping.setAttributeName("autoPayStatusId");
    autoPayStatusIdMapping
        .setFieldName("PTRAUTO_PAY_STATUS_REF.AUTO_PAY_STATUS_ID");
    descriptor.addMapping(autoPayStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRAUTO_PAY_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRAUTO_PAY_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildBillingCycleRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.BillingCycleRef.class);
    descriptor.addTableName("PTRBILLING_CYCLE_REF");
    descriptor.addPrimaryKeyFieldName("PTRBILLING_CYCLE_REF.BILLING_CYCLE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRBILLING_CYCLE_REF.BILLING_CYCLE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrbillingCycleRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping billingCycleCodeMapping = new DirectToFieldMapping();
    billingCycleCodeMapping.setAttributeName("billingCycleCode");
    billingCycleCodeMapping
        .setFieldName("PTRBILLING_CYCLE_REF.BILLING_CYCLE_CODE");
    descriptor.addMapping(billingCycleCodeMapping);

    DirectToFieldMapping billingCycleDescMapping = new DirectToFieldMapping();
    billingCycleDescMapping.setAttributeName("billingCycleDesc");
    billingCycleDescMapping
        .setFieldName("PTRBILLING_CYCLE_REF.BILLING_CYCLE_DESC");
    billingCycleDescMapping.setNullValue("");
    descriptor.addMapping(billingCycleDescMapping);

    DirectToFieldMapping billingCycleIdMapping = new DirectToFieldMapping();
    billingCycleIdMapping.setAttributeName("billingCycleId");
    billingCycleIdMapping.setFieldName("PTRBILLING_CYCLE_REF.BILLING_CYCLE_ID");
    descriptor.addMapping(billingCycleIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRBILLING_CYCLE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRBILLING_CYCLE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }


  public Descriptor buildBlockCodeHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.history.BlockCodeHistory.class);
    descriptor.addTableName("PTRBLOCK_CODE_HISTORY");
    descriptor
        .addPrimaryKeyFieldName("PTRBLOCK_CODE_HISTORY.ACCOUNT_BLOCK_CODE_HISTORY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRBLOCK_CODE_HISTORY.ACCOUNT_BLOCK_CODE_HISTORY_ID");
    descriptor.setSequenceNumberName("ACCOUNT_BLOCK_CODE_HISTORY_ID_SEQ");
    descriptor.setAlias("PtrblockCodeHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accountBlockCodeHistoryIdMapping = new DirectToFieldMapping();
    accountBlockCodeHistoryIdMapping
        .setAttributeName("accountBlockCodeHistoryId");
    accountBlockCodeHistoryIdMapping
        .setFieldName("PTRBLOCK_CODE_HISTORY.ACCOUNT_BLOCK_CODE_HISTORY_ID");
    descriptor.addMapping(accountBlockCodeHistoryIdMapping);

    DirectToFieldMapping blockCodeDateMapping = new DirectToFieldMapping();
    blockCodeDateMapping.setAttributeName("blockCodeDate");
    blockCodeDateMapping.setFieldName("PTRBLOCK_CODE_HISTORY.BLOCK_CODE_DATE");
    descriptor.addMapping(blockCodeDateMapping);

    DirectToFieldMapping blockCodeRemarksMapping = new DirectToFieldMapping();
    blockCodeRemarksMapping.setAttributeName("blockCodeRemarks");
    blockCodeRemarksMapping
        .setFieldName("PTRBLOCK_CODE_HISTORY.BLOCK_CODE_REMARKS");
    descriptor.addMapping(blockCodeRemarksMapping);

    OneToOneMapping accountMapping = new OneToOneMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addForeignKeyFieldName("PTRBLOCK_CODE_HISTORY.ACCOUNT_ID",
        "PTRACCOUNT.ACCOUNT_ID");
    descriptor.addMapping(accountMapping);

    OneToOneMapping blockCodeRefMapping = new OneToOneMapping();
    blockCodeRefMapping.setAttributeName("blockCodeRef");
    blockCodeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.BlockCodeRef.class);
    blockCodeRefMapping.useBasicIndirection();
    blockCodeRefMapping.addForeignKeyFieldName(
        "PTRBLOCK_CODE_HISTORY.BLOCK_CODE_ID",
        "PTRBLOCK_CODE_REF.BLOCK_CODE_ID");
    descriptor.addMapping(blockCodeRefMapping);

    return descriptor;
  }

  public Descriptor buildBlockCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.BlockCodeRef.class);
    descriptor.addTableName("PTRBLOCK_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRBLOCK_CODE_REF.BLOCK_CODE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRBLOCK_CODE_REF.BLOCK_CODE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrblockCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping blockCodeCodeMapping = new DirectToFieldMapping();
    blockCodeCodeMapping.setAttributeName("blockCodeCode");
    blockCodeCodeMapping.setFieldName("PTRBLOCK_CODE_REF.BLOCK_CODE_CODE");
    descriptor.addMapping(blockCodeCodeMapping);

    DirectToFieldMapping blockCodeDescMapping = new DirectToFieldMapping();
    blockCodeDescMapping.setAttributeName("blockCodeDesc");
    blockCodeDescMapping.setFieldName("PTRBLOCK_CODE_REF.BLOCK_CODE_DESC");
    blockCodeDescMapping.setNullValue("");
    descriptor.addMapping(blockCodeDescMapping);

    DirectToFieldMapping blockCodeIdMapping = new DirectToFieldMapping();
    blockCodeIdMapping.setAttributeName("blockCodeId");
    blockCodeIdMapping.setFieldName("PTRBLOCK_CODE_REF.BLOCK_CODE_ID");
    descriptor.addMapping(blockCodeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRBLOCK_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRBLOCK_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }
  public Descriptor buildBusinessGroupRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.BusinessGroupRef.class);
    descriptor.addTableName("PTRBUSINESS_GROUP_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrbusinessGroupRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping businessGroupCodeMapping = new DirectToFieldMapping();
    businessGroupCodeMapping.setAttributeName("businessGroupCode");
    businessGroupCodeMapping
        .setFieldName("PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_CODE");
    descriptor.addMapping(businessGroupCodeMapping);

    DirectToFieldMapping businessGroupDescMapping = new DirectToFieldMapping();
    businessGroupDescMapping.setAttributeName("businessGroupDesc");
    businessGroupDescMapping
        .setFieldName("PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_DESC");
    descriptor.addMapping(businessGroupDescMapping);

    DirectToFieldMapping businessGroupIdMapping = new DirectToFieldMapping();
    businessGroupIdMapping.setAttributeName("businessGroupId");
    businessGroupIdMapping
        .setFieldName("PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_ID");
    descriptor.addMapping(businessGroupIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRBUSINESS_GROUP_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRBUSINESS_GROUP_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildBusinessUnitDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    descriptor.addTableName("PTRBUSINESS_UNIT");
    descriptor.addPrimaryKeyFieldName("PTRBUSINESS_UNIT.BRANCH_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrbusinessUnit");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping branchCreateByMapping = new DirectToFieldMapping();
    branchCreateByMapping.setAttributeName("branchCreateBy");
    branchCreateByMapping.setFieldName("PTRBUSINESS_UNIT.BRANCH_CREATE_BY");
    descriptor.addMapping(branchCreateByMapping);

    DirectToFieldMapping branchCreateDateMapping = new DirectToFieldMapping();
    branchCreateDateMapping.setAttributeName("branchCreateDate");
    branchCreateDateMapping.setFieldName("PTRBUSINESS_UNIT.BRANCH_CREATE_DATE");
    descriptor.addMapping(branchCreateDateMapping);

    DirectToFieldMapping branchIdMapping = new DirectToFieldMapping();
    branchIdMapping.setAttributeName("branchId");
    branchIdMapping.setFieldName("PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(branchIdMapping);

    DirectToFieldMapping branchNameMapping = new DirectToFieldMapping();
    branchNameMapping.setAttributeName("branchName");
    branchNameMapping.setFieldName("PTRBUSINESS_UNIT.BRANCH_NAME");
    descriptor.addMapping(branchNameMapping);

    DirectToFieldMapping branchTypeMapping = new DirectToFieldMapping();
    branchTypeMapping.setAttributeName("branchType");
    branchTypeMapping.setFieldName("PTRBUSINESS_UNIT.BRANCH_TYPE");
    descriptor.addMapping(branchTypeMapping);

    DirectToFieldMapping costCenterMapping = new DirectToFieldMapping();
    costCenterMapping.setAttributeName("costCenter");
    costCenterMapping.setFieldName("PTRBUSINESS_UNIT.COST_CENTER");
    descriptor.addMapping(costCenterMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRBUSINESS_UNIT.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping isCollectionMapping = new DirectToFieldMapping();
    isCollectionMapping.setAttributeName("isCollection");
    isCollectionMapping.setFieldName("PTRBUSINESS_UNIT.IS_COLLECTION");
    descriptor.addMapping(isCollectionMapping);

    DirectToFieldMapping parentBranchIdMapping = new DirectToFieldMapping();
    parentBranchIdMapping.setAttributeName("parentBranchId");
    parentBranchIdMapping.setFieldName("PTRBUSINESS_UNIT.PARENT_BRANCH_ID");
    descriptor.addMapping(parentBranchIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRBUSINESS_UNIT.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping addressDetailsMapping = new OneToOneMapping();
    addressDetailsMapping.setAttributeName("addressDetails");
    addressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    addressDetailsMapping
        .setRelationshipPartnerAttributeName("ownerBusinessUnit");
    addressDetailsMapping.useBasicIndirection();
    addressDetailsMapping.addForeignKeyFieldName("PTRBUSINESS_UNIT.CONTACT_ID",
        "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(addressDetailsMapping);

    OneToOneMapping headUserMapping = new OneToOneMapping();
    headUserMapping.setAttributeName("headUser");
    headUserMapping
        .setReferenceClass(com.profitera.descriptor.db.user.User.class);
    headUserMapping.useBasicIndirection();
    headUserMapping.addForeignKeyFieldName("PTRBUSINESS_UNIT.HEAD_OF_UNIT",
        "PTRUSER.USER_ID");
    descriptor.addMapping(headUserMapping);

    OneToOneMapping parentBusinessUnitMapping = new OneToOneMapping();
    parentBusinessUnitMapping.setAttributeName("parentBusinessUnit");
    parentBusinessUnitMapping
        .setReferenceClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    parentBusinessUnitMapping.useBasicIndirection();
    parentBusinessUnitMapping.readOnly();
    parentBusinessUnitMapping.addForeignKeyFieldName(
        "PTRBUSINESS_UNIT.PARENT_BRANCH_ID", "PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(parentBusinessUnitMapping);

    OneToManyMapping childBusinessUnitMapping = new OneToManyMapping();
    childBusinessUnitMapping.setAttributeName("childBusinessUnit");
    childBusinessUnitMapping
        .setReferenceClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    childBusinessUnitMapping.useBasicIndirection();
    childBusinessUnitMapping.addTargetForeignKeyFieldName(
        "PTRBUSINESS_UNIT.PARENT_BRANCH_ID", "PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(childBusinessUnitMapping);

    OneToManyMapping teamsMapping = new OneToManyMapping();
    teamsMapping.setAttributeName("teams");
    teamsMapping
        .setReferenceClass(com.profitera.descriptor.db.user.UserTeams.class);
    teamsMapping.useBasicIndirection();
    teamsMapping.addTargetForeignKeyFieldName("PTRUSER_TEAMS.BRANCH_ID",
        "PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(teamsMapping);

    return descriptor;
  }

  public Descriptor buildBusinessUnitGroupRelDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.relation.BusinessUnitGroupRel.class);
    descriptor.addTableName("PTRBUSINESS_UNIT_GROUP_REL");
    descriptor
        .addPrimaryKeyFieldName("PTRBUSINESS_UNIT_GROUP_REL.BUSINESS_UNIT_ID");
    descriptor
        .addPrimaryKeyFieldName("PTRBUSINESS_UNIT_GROUP_REL.BUSINESS_GROUP_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrbusinessUnitGroupRel");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    OneToOneMapping businessGroupRefMapping = new OneToOneMapping();
    businessGroupRefMapping.setAttributeName("businessGroupRef");
    businessGroupRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.BusinessGroupRef.class);
    businessGroupRefMapping.useBasicIndirection();
    businessGroupRefMapping.addForeignKeyFieldName(
        "PTRBUSINESS_UNIT_GROUP_REL.BUSINESS_GROUP_ID",
        "PTRBUSINESS_GROUP_REF.BUSINESS_GROUP_ID");
    descriptor.addMapping(businessGroupRefMapping);

    OneToOneMapping businessUnitMapping = new OneToOneMapping();
    businessUnitMapping.setAttributeName("businessUnit");
    businessUnitMapping
        .setReferenceClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    businessUnitMapping.useBasicIndirection();
    businessUnitMapping.addForeignKeyFieldName(
        "PTRBUSINESS_UNIT_GROUP_REL.BUSINESS_UNIT_ID",
        "PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(businessUnitMapping);

    return descriptor;
  }

  public Descriptor buildCampaignCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CampaignCodeRef.class);
    descriptor.addTableName("PTRCAMPAIGN_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcampaignCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping campaignCodeCodeMapping = new DirectToFieldMapping();
    campaignCodeCodeMapping.setAttributeName("campaignCodeCode");
    campaignCodeCodeMapping
        .setFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_CODE");
    descriptor.addMapping(campaignCodeCodeMapping);

    DirectToFieldMapping campaignCodeDescMapping = new DirectToFieldMapping();
    campaignCodeDescMapping.setAttributeName("campaignCodeDesc");
    campaignCodeDescMapping
        .setFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_DESC");
    campaignCodeDescMapping.setNullValue("");
    descriptor.addMapping(campaignCodeDescMapping);

    DirectToFieldMapping campaignCodeGroupMapping = new DirectToFieldMapping();
    campaignCodeGroupMapping.setAttributeName("campaignCodeGroup");
    campaignCodeGroupMapping
        .setFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_GROUP");
    descriptor.addMapping(campaignCodeGroupMapping);

    DirectToFieldMapping campaignCodeIdMapping = new DirectToFieldMapping();
    campaignCodeIdMapping.setAttributeName("campaignCodeId");
    campaignCodeIdMapping.setFieldName("PTRCAMPAIGN_CODE_REF.CAMPAIGN_CODE_ID");
    descriptor.addMapping(campaignCodeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCAMPAIGN_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCAMPAIGN_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildChannelCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ChannelCodeRef.class);
    descriptor.addTableName("PTRCHANNEL_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrchannelCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping channelCodeCodeMapping = new DirectToFieldMapping();
    channelCodeCodeMapping.setAttributeName("channelCodeCode");
    channelCodeCodeMapping
        .setFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_CODE");
    descriptor.addMapping(channelCodeCodeMapping);

    DirectToFieldMapping channelCodeDescMapping = new DirectToFieldMapping();
    channelCodeDescMapping.setAttributeName("channelCodeDesc");
    channelCodeDescMapping
        .setFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_DESC");
    channelCodeDescMapping.setNullValue("");
    descriptor.addMapping(channelCodeDescMapping);

    DirectToFieldMapping channelCodeGroupMapping = new DirectToFieldMapping();
    channelCodeGroupMapping.setAttributeName("channelCodeGroup");
    channelCodeGroupMapping
        .setFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_GROUP");
    descriptor.addMapping(channelCodeGroupMapping);

    DirectToFieldMapping channelCodeIdMapping = new DirectToFieldMapping();
    channelCodeIdMapping.setAttributeName("channelCodeId");
    channelCodeIdMapping.setFieldName("PTRCHANNEL_CODE_REF.CHANNEL_CODE_ID");
    descriptor.addMapping(channelCodeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCHANNEL_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCHANNEL_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildChargeOffReasonRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ChargeOffReasonRef.class);
    descriptor.addTableName("PTRCHARGEOFF_REASON_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCHARGEOFF_REASON_REF.CHARGEOFF_REASON_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCHARGEOFF_REASON_REF.CHARGEOFF_REASON_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrchargeoffReasonRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping chargeoffReasonCodeMapping = new DirectToFieldMapping();
    chargeoffReasonCodeMapping.setAttributeName("chargeoffReasonCode");
    chargeoffReasonCodeMapping
        .setFieldName("PTRCHARGEOFF_REASON_REF.CHARGEOFF_REASON_CODE");
    descriptor.addMapping(chargeoffReasonCodeMapping);

    DirectToFieldMapping chargeoffReasonDescMapping = new DirectToFieldMapping();
    chargeoffReasonDescMapping.setAttributeName("chargeoffReasonDesc");
    chargeoffReasonDescMapping
        .setFieldName("PTRCHARGEOFF_REASON_REF.CHARGEOFF_REASON_DESC");
    chargeoffReasonDescMapping.setNullValue("");
    descriptor.addMapping(chargeoffReasonDescMapping);

    DirectToFieldMapping chargeoffReasonIdMapping = new DirectToFieldMapping();
    chargeoffReasonIdMapping.setAttributeName("chargeoffReasonId");
    chargeoffReasonIdMapping
        .setFieldName("PTRCHARGEOFF_REASON_REF.CHARGEOFF_REASON_ID");
    descriptor.addMapping(chargeoffReasonIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCHARGEOFF_REASON_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCHARGEOFF_REASON_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildChargeOffStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ChargeOffStatusRef.class);
    descriptor.addTableName("PTRCHARGEOFF_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCHARGEOFF_STATUS_REF.CHARGEOFF_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCHARGEOFF_STATUS_REF.CHARGEOFF_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrchargeoffStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping chargeoffStatusCodeMapping = new DirectToFieldMapping();
    chargeoffStatusCodeMapping.setAttributeName("chargeoffStatusCode");
    chargeoffStatusCodeMapping
        .setFieldName("PTRCHARGEOFF_STATUS_REF.CHARGEOFF_STATUS_CODE");
    descriptor.addMapping(chargeoffStatusCodeMapping);

    DirectToFieldMapping chargeoffStatusDescMapping = new DirectToFieldMapping();
    chargeoffStatusDescMapping.setAttributeName("chargeoffStatusDesc");
    chargeoffStatusDescMapping
        .setFieldName("PTRCHARGEOFF_STATUS_REF.CHARGEOFF_STATUS_DESC");
    chargeoffStatusDescMapping.setNullValue("");
    descriptor.addMapping(chargeoffStatusDescMapping);

    DirectToFieldMapping chargeoffStatusIdMapping = new DirectToFieldMapping();
    chargeoffStatusIdMapping.setAttributeName("chargeoffStatusId");
    chargeoffStatusIdMapping
        .setFieldName("PTRCHARGEOFF_STATUS_REF.CHARGEOFF_STATUS_ID");
    descriptor.addMapping(chargeoffStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCHARGEOFF_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCHARGEOFF_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCheckStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CheckStatusRef.class);
    descriptor.addTableName("PTRCHECK_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRCHECK_STATUS_REF.CHECK_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCHECK_STATUS_REF.CHECK_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcheckStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping checkStatusCodeMapping = new DirectToFieldMapping();
    checkStatusCodeMapping.setAttributeName("checkStatusCode");
    checkStatusCodeMapping
        .setFieldName("PTRCHECK_STATUS_REF.CHECK_STATUS_CODE");
    descriptor.addMapping(checkStatusCodeMapping);

    DirectToFieldMapping checkStatusDescMapping = new DirectToFieldMapping();
    checkStatusDescMapping.setAttributeName("checkStatusDesc");
    checkStatusDescMapping
        .setFieldName("PTRCHECK_STATUS_REF.CHECK_STATUS_DESC");
    checkStatusDescMapping.setNullValue("");
    descriptor.addMapping(checkStatusDescMapping);

    DirectToFieldMapping checkStatusIdMapping = new DirectToFieldMapping();
    checkStatusIdMapping.setAttributeName("checkStatusId");
    checkStatusIdMapping.setFieldName("PTRCHECK_STATUS_REF.CHECK_STATUS_ID");
    descriptor.addMapping(checkStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCHECK_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCHECK_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCitizenshipRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CitizenshipRef.class);
    descriptor.addTableName("PTRCITIZENSHIP_REF");
    descriptor.addPrimaryKeyFieldName("PTRCITIZENSHIP_REF.CITIZENSHIP_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCITIZENSHIP_REF.CITIZENSHIP_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcitizenshipRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping citizenshipCodeMapping = new DirectToFieldMapping();
    citizenshipCodeMapping.setAttributeName("citizenshipCode");
    citizenshipCodeMapping.setFieldName("PTRCITIZENSHIP_REF.CITIZENSHIP_CODE");
    descriptor.addMapping(citizenshipCodeMapping);

    DirectToFieldMapping citizenshipDescMapping = new DirectToFieldMapping();
    citizenshipDescMapping.setAttributeName("citizenshipDesc");
    citizenshipDescMapping.setFieldName("PTRCITIZENSHIP_REF.CITIZENSHIP_DESC");
    citizenshipDescMapping.setNullValue("");
    descriptor.addMapping(citizenshipDescMapping);

    DirectToFieldMapping citizenshipIdMapping = new DirectToFieldMapping();
    citizenshipIdMapping.setAttributeName("citizenshipId");
    citizenshipIdMapping.setFieldName("PTRCITIZENSHIP_REF.CITIZENSHIP_ID");
    descriptor.addMapping(citizenshipIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCITIZENSHIP_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCITIZENSHIP_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildClarityMessagesRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ClarityMessagesRef.class);
    descriptor.addTableName("PTRCLARITY_MESSAGES_REF");
    descriptor.addPrimaryKeyFieldName("PTRCLARITY_MESSAGES_REF.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCLARITY_MESSAGES_REF.ID");
    descriptor.setSequenceNumberName("CLARITY_MESSAGE_ID");
    descriptor.setAlias("PtrclarityMessagesRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRCLARITY_MESSAGES_REF.CODE");
    descriptor.addMapping(codeMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRCLARITY_MESSAGES_REF.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCLARITY_MESSAGES_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRCLARITY_MESSAGES_REF.ID");
    descriptor.addMapping(idMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCLARITY_MESSAGES_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildClassOfServiceRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ClassOfServiceRef.class);
    descriptor.addTableName("PTRCLASS_OF_SERVICE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCLASS_OF_SERVICE_REF.CLASS_OF_SERVICE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCLASS_OF_SERVICE_REF.CLASS_OF_SERVICE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrclassOfServiceRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping classOfServiceCodeMapping = new DirectToFieldMapping();
    classOfServiceCodeMapping.setAttributeName("classOfServiceCode");
    classOfServiceCodeMapping
        .setFieldName("PTRCLASS_OF_SERVICE_REF.CLASS_OF_SERVICE_CODE");
    descriptor.addMapping(classOfServiceCodeMapping);

    DirectToFieldMapping classOfServiceDescMapping = new DirectToFieldMapping();
    classOfServiceDescMapping.setAttributeName("classOfServiceDesc");
    classOfServiceDescMapping
        .setFieldName("PTRCLASS_OF_SERVICE_REF.CLASS_OF_SERVICE_DESC");
    classOfServiceDescMapping.setNullValue("");
    descriptor.addMapping(classOfServiceDescMapping);

    DirectToFieldMapping classOfServiceIdMapping = new DirectToFieldMapping();
    classOfServiceIdMapping.setAttributeName("classOfServiceId");
    classOfServiceIdMapping
        .setFieldName("PTRCLASS_OF_SERVICE_REF.CLASS_OF_SERVICE_ID");
    descriptor.addMapping(classOfServiceIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCLASS_OF_SERVICE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCLASS_OF_SERVICE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildClientDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.client.Client.class);
    descriptor.addTableName("PTRCLIENT");
    descriptor.addPrimaryKeyFieldName("PTRCLIENT.CLIENT_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCLIENT.CLIENT_ID");
    descriptor.setSequenceNumberName("CLIENT_ID_SEQ");
    descriptor.setAlias("Ptrclient");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping agencyIdMapping = new DirectToFieldMapping();
    agencyIdMapping.setAttributeName("agencyId");
    agencyIdMapping.setFieldName("PTRCLIENT.AGENCY_ID");
    descriptor.addMapping(agencyIdMapping);

    DirectToFieldMapping clientIdMapping = new DirectToFieldMapping();
    clientIdMapping.setAttributeName("clientId");
    clientIdMapping.setFieldName("PTRCLIENT.CLIENT_ID");
    descriptor.addMapping(clientIdMapping);

    DirectToFieldMapping clientNameMapping = new DirectToFieldMapping();
    clientNameMapping.setAttributeName("clientName");
    clientNameMapping.setFieldName("PTRCLIENT.CLIENT_NAME");
    descriptor.addMapping(clientNameMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCLIENT.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping remarksMapping = new DirectToFieldMapping();
    remarksMapping.setAttributeName("remarks");
    remarksMapping.setFieldName("PTRCLIENT.CLIENT_REMARKS");
    descriptor.addMapping(remarksMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCLIENT.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping addressDetailsMapping = new OneToOneMapping();
    addressDetailsMapping.setAttributeName("addressDetails");
    addressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    addressDetailsMapping.useBasicIndirection();
    addressDetailsMapping.addForeignKeyFieldName("PTRCLIENT.CONTACT_ID",
        "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(addressDetailsMapping);

    OneToOneMapping clientTypeRefMapping = new OneToOneMapping();
    clientTypeRefMapping.setAttributeName("clientTypeRef");
    clientTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ClientTypeRef.class);
    clientTypeRefMapping.useBasicIndirection();
    clientTypeRefMapping.addForeignKeyFieldName("PTRCLIENT.CLIENT_TYPE_ID",
        "PTRCLIENT_TYPE_REF.CLIENT_TYPE_ID");
    descriptor.addMapping(clientTypeRefMapping);

    OneToManyMapping accountMapping = new OneToManyMapping();
    accountMapping.setAttributeName("account");
    accountMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountMapping.useBasicIndirection();
    accountMapping.addTargetForeignKeyFieldName("PTRACCOUNT.CLIENT_ID",
        "PTRCLIENT.CLIENT_ID");
    descriptor.addMapping(accountMapping);

    ManyToManyMapping contactsMapping = new ManyToManyMapping();
    contactsMapping.setAttributeName("contacts");
    contactsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    contactsMapping.useBasicIndirection();
    contactsMapping.setRelationTableName("PTRCLIENT_CONTACT_REL");
    contactsMapping.addSourceRelationKeyFieldName(
        "PTRCLIENT_CONTACT_REL.CLIENT_ID", "PTRCLIENT.CLIENT_ID");
    contactsMapping.addTargetRelationKeyFieldName(
        "PTRCLIENT_CONTACT_REL.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(contactsMapping);

    return descriptor;
  }

  public Descriptor buildClientTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ClientTypeRef.class);
    descriptor.addTableName("PTRCLIENT_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRCLIENT_TYPE_REF.CLIENT_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCLIENT_TYPE_REF.CLIENT_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrclientTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping clientTypeCodeMapping = new DirectToFieldMapping();
    clientTypeCodeMapping.setAttributeName("clientTypeCode");
    clientTypeCodeMapping.setFieldName("PTRCLIENT_TYPE_REF.CLIENT_TYPE_CODE");
    descriptor.addMapping(clientTypeCodeMapping);

    DirectToFieldMapping clientTypeDescMapping = new DirectToFieldMapping();
    clientTypeDescMapping.setAttributeName("clientTypeDesc");
    clientTypeDescMapping.setFieldName("PTRCLIENT_TYPE_REF.CLIENT_TYPE_DESC");
    clientTypeDescMapping.setNullValue("");
    descriptor.addMapping(clientTypeDescMapping);

    DirectToFieldMapping clientTypeIdMapping = new DirectToFieldMapping();
    clientTypeIdMapping.setAttributeName("clientTypeId");
    clientTypeIdMapping.setFieldName("PTRCLIENT_TYPE_REF.CLIENT_TYPE_ID");
    descriptor.addMapping(clientTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCLIENT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCLIENT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCollectabilityRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CollectabilityRef.class);
    descriptor.addTableName("PTRCOLLECTABILITY_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCOLLECTABILITY_REF.COLLECTABILITY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrcollectabilityRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping collectabilityCodeMapping = new DirectToFieldMapping();
    collectabilityCodeMapping.setAttributeName("collectabilityCode");
    collectabilityCodeMapping
        .setFieldName("PTRCOLLECTABILITY_REF.COLLECTABILITY_CODE");
    descriptor.addMapping(collectabilityCodeMapping);

    DirectToFieldMapping collectabilityDescMapping = new DirectToFieldMapping();
    collectabilityDescMapping.setAttributeName("collectabilityDesc");
    collectabilityDescMapping
        .setFieldName("PTRCOLLECTABILITY_REF.COLLECTABILITY_DESC");
    descriptor.addMapping(collectabilityDescMapping);

    DirectToFieldMapping collectabilityIdMapping = new DirectToFieldMapping();
    collectabilityIdMapping.setAttributeName("collectabilityId");
    collectabilityIdMapping
        .setFieldName("PTRCOLLECTABILITY_REF.COLLECTABILITY_ID");
    descriptor.addMapping(collectabilityIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOLLECTABILITY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOLLECTABILITY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCollectionReasonRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CollectionReasonRef.class);
    descriptor.addTableName("PTRCOLLECTION_REASON_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCOLLECTION_REASON_REF.COLLECTION_REASON_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCOLLECTION_REASON_REF.COLLECTION_REASON_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcollectionReasonRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping collectionReasonCodeMapping = new DirectToFieldMapping();
    collectionReasonCodeMapping.setAttributeName("collectionReasonCode");
    collectionReasonCodeMapping
        .setFieldName("PTRCOLLECTION_REASON_REF.COLLECTION_REASON_CODE");
    descriptor.addMapping(collectionReasonCodeMapping);

    DirectToFieldMapping collectionReasonDescMapping = new DirectToFieldMapping();
    collectionReasonDescMapping.setAttributeName("collectionReasonDesc");
    collectionReasonDescMapping
        .setFieldName("PTRCOLLECTION_REASON_REF.COLLECTION_REASON_DESC");
    collectionReasonDescMapping.setNullValue("");
    descriptor.addMapping(collectionReasonDescMapping);

    DirectToFieldMapping collectionReasonIdMapping = new DirectToFieldMapping();
    collectionReasonIdMapping.setAttributeName("collectionReasonId");
    collectionReasonIdMapping
        .setFieldName("PTRCOLLECTION_REASON_REF.COLLECTION_REASON_ID");
    descriptor.addMapping(collectionReasonIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOLLECTION_REASON_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOLLECTION_REASON_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCollectionStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CollectionStatusRef.class);
    descriptor.addTableName("PTRCOLL_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRCOLL_STATUS_REF.COLL_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCOLL_STATUS_REF.COLL_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcollStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping collStatusCodeMapping = new DirectToFieldMapping();
    collStatusCodeMapping.setAttributeName("collStatusCode");
    collStatusCodeMapping.setFieldName("PTRCOLL_STATUS_REF.COLL_STATUS_CODE");
    descriptor.addMapping(collStatusCodeMapping);

    DirectToFieldMapping collStatusDescMapping = new DirectToFieldMapping();
    collStatusDescMapping.setAttributeName("collStatusDesc");
    collStatusDescMapping.setFieldName("PTRCOLL_STATUS_REF.COLL_STATUS_DESC");
    collStatusDescMapping.setNullValue("");
    descriptor.addMapping(collStatusDescMapping);

    DirectToFieldMapping collStatusIdMapping = new DirectToFieldMapping();
    collStatusIdMapping.setAttributeName("collStatusId");
    collStatusIdMapping.setFieldName("PTRCOLL_STATUS_REF.COLL_STATUS_ID");
    descriptor.addMapping(collStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOLL_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOLL_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildContactNumberDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.contact.ContactNumber.class);
    descriptor.addTableName("PTRCONTACT_NUMBER");
    descriptor.addPrimaryKeyFieldName("PTRCONTACT_NUMBER.CONTACT_ID");
    descriptor.addPrimaryKeyFieldName("PTRCONTACT_NUMBER.NO");
    descriptor.addPrimaryKeyFieldName("PTRCONTACT_NUMBER.TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrcontactNumber");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping noMapping = new DirectToFieldMapping();
    noMapping.setAttributeName("no");
    noMapping.setFieldName("PTRCONTACT_NUMBER.NO");
    descriptor.addMapping(noMapping);

    DirectToFieldMapping preferredPositionMapping = new DirectToFieldMapping();
    preferredPositionMapping.setAttributeName("preferredPosition");
    preferredPositionMapping
        .setFieldName("PTRCONTACT_NUMBER.PREFERRED_POSITION");
    descriptor.addMapping(preferredPositionMapping);

    OneToOneMapping parentAddressDetailsMapping = new OneToOneMapping();
    parentAddressDetailsMapping.setAttributeName("parentAddressDetails");
    parentAddressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    parentAddressDetailsMapping.useBasicIndirection();
    parentAddressDetailsMapping.addForeignKeyFieldName(
        "PTRCONTACT_NUMBER.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(parentAddressDetailsMapping);

    OneToOneMapping typeRefMapping = new OneToOneMapping();
    typeRefMapping.setAttributeName("typeRef");
    typeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ContactNumberTypeRef.class);
    typeRefMapping.useBasicIndirection();
    typeRefMapping.addForeignKeyFieldName("PTRCONTACT_NUMBER.TYPE_ID",
        "PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_ID");
    descriptor.addMapping(typeRefMapping);

    return descriptor;
  }

  public Descriptor buildContactNumberTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ContactNumberTypeRef.class);
    descriptor.addTableName("PTRCONTACT_NUMBER_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcontactNumberTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping contactNoTypeCodeMapping = new DirectToFieldMapping();
    contactNoTypeCodeMapping.setAttributeName("contactNoTypeCode");
    contactNoTypeCodeMapping
        .setFieldName("PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_CODE");
    descriptor.addMapping(contactNoTypeCodeMapping);

    DirectToFieldMapping contactNoTypeDescMapping = new DirectToFieldMapping();
    contactNoTypeDescMapping.setAttributeName("contactNoTypeDesc");
    contactNoTypeDescMapping
        .setFieldName("PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_DESC");
    contactNoTypeDescMapping.setNullValue("");
    descriptor.addMapping(contactNoTypeDescMapping);

    DirectToFieldMapping contactNoTypeIdMapping = new DirectToFieldMapping();
    contactNoTypeIdMapping.setAttributeName("contactNoTypeId");
    contactNoTypeIdMapping
        .setFieldName("PTRCONTACT_NUMBER_TYPE_REF.CONTACT_NO_TYPE_ID");
    descriptor.addMapping(contactNoTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCONTACT_NUMBER_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRCONTACT_NUMBER_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildContactTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ContactTypeRef.class);
    descriptor.addTableName("PTRCONTACT_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRCONTACT_TYPE_REF.CONTACT_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCONTACT_TYPE_REF.CONTACT_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcontactTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping contactTypeCodeMapping = new DirectToFieldMapping();
    contactTypeCodeMapping.setAttributeName("contactTypeCode");
    contactTypeCodeMapping
        .setFieldName("PTRCONTACT_TYPE_REF.CONTACT_TYPE_CODE");
    descriptor.addMapping(contactTypeCodeMapping);

    DirectToFieldMapping contactTypeDescMapping = new DirectToFieldMapping();
    contactTypeDescMapping.setAttributeName("contactTypeDesc");
    contactTypeDescMapping
        .setFieldName("PTRCONTACT_TYPE_REF.CONTACT_TYPE_DESC");
    contactTypeDescMapping.setNullValue("");
    descriptor.addMapping(contactTypeDescMapping);

    DirectToFieldMapping contactTypeIdMapping = new DirectToFieldMapping();
    contactTypeIdMapping.setAttributeName("contactTypeId");
    contactTypeIdMapping.setFieldName("PTRCONTACT_TYPE_REF.CONTACT_TYPE_ID");
    descriptor.addMapping(contactTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCONTACT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCONTACT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCostBillerRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CostBillerRef.class);
    descriptor.addTableName("PTRCOST_BILLER_REF");
    descriptor.addPrimaryKeyFieldName("PTRCOST_BILLER_REF.COST_BILLER_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCOST_BILLER_REF.COST_BILLER_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcostBillerRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping costBillerIdMapping = new DirectToFieldMapping();
    costBillerIdMapping.setAttributeName("costBillerId");
    costBillerIdMapping.setFieldName("PTRCOST_BILLER_REF.COST_BILLER_ID");
    descriptor.addMapping(costBillerIdMapping);

    DirectToFieldMapping costPerUnitMapping = new DirectToFieldMapping();
    costPerUnitMapping.setAttributeName("costPerUnit");
    costPerUnitMapping.setFieldName("PTRCOST_BILLER_REF.COST_PER_UNIT");
    descriptor.addMapping(costPerUnitMapping);

    DirectToFieldMapping costRemarksMapping = new DirectToFieldMapping();
    costRemarksMapping.setAttributeName("costRemarks");
    costRemarksMapping.setFieldName("PTRCOST_BILLER_REF.COST_REMARKS");
    descriptor.addMapping(costRemarksMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOST_BILLER_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOST_BILLER_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping costBillerTypeRefMapping = new OneToOneMapping();
    costBillerTypeRefMapping.setAttributeName("costBillerTypeRef");
    costBillerTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CostBillerTypeRef.class);
    costBillerTypeRefMapping.useBasicIndirection();
    costBillerTypeRefMapping.addForeignKeyFieldName(
        "PTRCOST_BILLER_REF.COST_BILLER_TYPE_ID",
        "PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_ID");
    descriptor.addMapping(costBillerTypeRefMapping);

    return descriptor;
  }

  public Descriptor buildCostBillerTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CostBillerTypeRef.class);
    descriptor.addTableName("PTRCOST_BILLER_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcostBillerTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping costBillerTypeCodeMapping = new DirectToFieldMapping();
    costBillerTypeCodeMapping.setAttributeName("costBillerTypeCode");
    costBillerTypeCodeMapping
        .setFieldName("PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_CODE");
    descriptor.addMapping(costBillerTypeCodeMapping);

    DirectToFieldMapping costBillerTypeDescMapping = new DirectToFieldMapping();
    costBillerTypeDescMapping.setAttributeName("costBillerTypeDesc");
    costBillerTypeDescMapping
        .setFieldName("PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_DESC");
    costBillerTypeDescMapping.setNullValue("");
    descriptor.addMapping(costBillerTypeDescMapping);

    DirectToFieldMapping costBillerTypeIdMapping = new DirectToFieldMapping();
    costBillerTypeIdMapping.setAttributeName("costBillerTypeId");
    costBillerTypeIdMapping
        .setFieldName("PTRCOST_BILLER_TYPE_REF.COST_BILLER_TYPE_ID");
    descriptor.addMapping(costBillerTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOST_BILLER_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOST_BILLER_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCostingTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CostingTypeRef.class);
    descriptor.addTableName("PTRCOSTING_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcostingTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping costTypeCodeMapping = new DirectToFieldMapping();
    costTypeCodeMapping.setAttributeName("costTypeCode");
    costTypeCodeMapping.setFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_CODE");
    descriptor.addMapping(costTypeCodeMapping);

    DirectToFieldMapping costTypeDescMapping = new DirectToFieldMapping();
    costTypeDescMapping.setAttributeName("costTypeDesc");
    costTypeDescMapping.setFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_DESC");
    costTypeDescMapping.setNullValue("");
    descriptor.addMapping(costTypeDescMapping);

    DirectToFieldMapping costTypeIdMapping = new DirectToFieldMapping();
    costTypeIdMapping.setAttributeName("costTypeId");
    costTypeIdMapping.setFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_ID");
    descriptor.addMapping(costTypeIdMapping);

    DirectToFieldMapping costTypeParentMapping = new DirectToFieldMapping();
    costTypeParentMapping.setAttributeName("costTypeParent");
    costTypeParentMapping
        .setFieldName("PTRCOSTING_TYPE_REF.COST_TYPE_PARENT_ID");
    descriptor.addMapping(costTypeParentMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOSTING_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOSTING_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCostingUomRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CostingUomRef.class);
    descriptor.addTableName("PTRCOSTING_UOM_REF");
    descriptor.addPrimaryKeyFieldName("PTRCOSTING_UOM_REF.COST_UOM_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCOSTING_UOM_REF.COST_UOM_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcostingUomRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping costUomCodeMapping = new DirectToFieldMapping();
    costUomCodeMapping.setAttributeName("costUomCode");
    costUomCodeMapping.setFieldName("PTRCOSTING_UOM_REF.COST_UOM_CODE");
    descriptor.addMapping(costUomCodeMapping);

    DirectToFieldMapping costUomDescMapping = new DirectToFieldMapping();
    costUomDescMapping.setAttributeName("costUomDesc");
    costUomDescMapping.setFieldName("PTRCOSTING_UOM_REF.COST_UOM_DESC");
    costUomDescMapping.setNullValue("");
    descriptor.addMapping(costUomDescMapping);

    DirectToFieldMapping costUomIdMapping = new DirectToFieldMapping();
    costUomIdMapping.setAttributeName("costUomId");
    costUomIdMapping.setFieldName("PTRCOSTING_UOM_REF.COST_UOM_ID");
    descriptor.addMapping(costUomIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOSTING_UOM_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOSTING_UOM_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCountryRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CountryRef.class);
    descriptor.addTableName("PTRCOUNTRY_REF");
    descriptor.addPrimaryKeyFieldName("PTRCOUNTRY_REF.COUNTRY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRCOUNTRY_REF.COUNTRY_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcountryRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping countryCodeMapping = new DirectToFieldMapping();
    countryCodeMapping.setAttributeName("countryCode");
    countryCodeMapping.setFieldName("PTRCOUNTRY_REF.COUNTRY_CODE");
    descriptor.addMapping(countryCodeMapping);

    DirectToFieldMapping countryDescMapping = new DirectToFieldMapping();
    countryDescMapping.setAttributeName("countryDesc");
    countryDescMapping.setFieldName("PTRCOUNTRY_REF.COUNTRY_DESC");
    countryDescMapping.setNullValue("");
    descriptor.addMapping(countryDescMapping);

    DirectToFieldMapping countryIdMapping = new DirectToFieldMapping();
    countryIdMapping.setAttributeName("countryId");
    countryIdMapping.setFieldName("PTRCOUNTRY_REF.COUNTRY_ID");
    descriptor.addMapping(countryIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCOUNTRY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCOUNTRY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCreditCardStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.CreditCardStatusRef.class);
    descriptor.addTableName("PTRCREDIT_CARD_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRCREDIT_CARD_STATUS_REF.CREDIT_CARD_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCREDIT_CARD_STATUS_REF.CREDIT_CARD_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrcreditCardStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping creditCardStatusCodeMapping = new DirectToFieldMapping();
    creditCardStatusCodeMapping.setAttributeName("creditCardStatusCode");
    creditCardStatusCodeMapping
        .setFieldName("PTRCREDIT_CARD_STATUS_REF.CREDIT_CARD_STATUS_CODE");
    descriptor.addMapping(creditCardStatusCodeMapping);

    DirectToFieldMapping creditCardStatusDescMapping = new DirectToFieldMapping();
    creditCardStatusDescMapping.setAttributeName("creditCardStatusDesc");
    creditCardStatusDescMapping
        .setFieldName("PTRCREDIT_CARD_STATUS_REF.CREDIT_CARD_STATUS_DESC");
    creditCardStatusDescMapping.setNullValue("");
    descriptor.addMapping(creditCardStatusDescMapping);

    DirectToFieldMapping creditCardStatusIdMapping = new DirectToFieldMapping();
    creditCardStatusIdMapping.setAttributeName("creditCardStatusId");
    creditCardStatusIdMapping
        .setFieldName("PTRCREDIT_CARD_STATUS_REF.CREDIT_CARD_STATUS_ID");
    descriptor.addMapping(creditCardStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCREDIT_CARD_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCREDIT_CARD_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildCustomerDescriptor() {
    return CustomerMapping.build(this);
  }

  public Descriptor buildCustomerSegmentDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.account.CustomerSegment.class);
    descriptor.addTableName("PTRCUSTOMER_SEGMENT");
    descriptor.addPrimaryKeyFieldName("PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");
    descriptor.setSequenceNumberName("CUST_SEGMENT_ID_SEQ");
    descriptor.setAlias("PtrcustomerSegment");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping custSegmentDescMapping = new DirectToFieldMapping();
    custSegmentDescMapping.setAttributeName("custSegmentDesc");
    custSegmentDescMapping
        .setFieldName("PTRCUSTOMER_SEGMENT.CUST_SEGMENT_DESC");
    descriptor.addMapping(custSegmentDescMapping);

    DirectToFieldMapping customerSegmentCodeMapping = new DirectToFieldMapping();
    customerSegmentCodeMapping.setAttributeName("customerSegmentCode");
    customerSegmentCodeMapping
        .setFieldName("PTRCUSTOMER_SEGMENT.CUST_SEGMENT_CODE");
    descriptor.addMapping(customerSegmentCodeMapping);

    DirectToFieldMapping customerSegmentIdMapping = new DirectToFieldMapping();
    customerSegmentIdMapping.setAttributeName("customerSegmentId");
    customerSegmentIdMapping
        .setFieldName("PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");
    descriptor.addMapping(customerSegmentIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRCUSTOMER_SEGMENT.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRCUSTOMER_SEGMENT.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping parentCustomerSegmentMapping = new OneToOneMapping();
    parentCustomerSegmentMapping.setAttributeName("parentCustomerSegment");
    parentCustomerSegmentMapping
        .setReferenceClass(com.profitera.descriptor.db.account.CustomerSegment.class);
    parentCustomerSegmentMapping.useBasicIndirection();
    parentCustomerSegmentMapping.addForeignKeyFieldName(
        "PTRCUSTOMER_SEGMENT.CUST_SEGMENT_PARENT_ID",
        "PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");
    descriptor.addMapping(parentCustomerSegmentMapping);

    OneToManyMapping childCustomerSegmentsMapping = new OneToManyMapping();
    childCustomerSegmentsMapping.setAttributeName("childCustomerSegments");
    childCustomerSegmentsMapping
        .setReferenceClass(com.profitera.descriptor.db.account.CustomerSegment.class);
    childCustomerSegmentsMapping.useBasicIndirection();
    childCustomerSegmentsMapping.addTargetForeignKeyFieldName(
        "PTRCUSTOMER_SEGMENT.CUST_SEGMENT_PARENT_ID",
        "PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");
    descriptor.addMapping(childCustomerSegmentsMapping);

    OneToManyMapping customersMapping = new OneToManyMapping();
    customersMapping.setAttributeName("customers");
    customersMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Customer.class);
    customersMapping.useBasicIndirection();
    customersMapping.addTargetForeignKeyFieldName(
        "PTRCUSTOMER.CUST_SEGMENT_ID", "PTRCUSTOMER_SEGMENT.CUST_SEGMENT_ID");
    descriptor.addMapping(customersMapping);

    return descriptor;
  }

  public Descriptor buildDebtRecoveryStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.DebtRecoveryStatusRef.class);
    descriptor.addTableName("PTRDEBTREC_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRDEBTREC_STATUS_REF.DEBTREC_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRDEBTREC_STATUS_REF.DEBTREC_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrdebtrecStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping debtrecStatusCodeMapping = new DirectToFieldMapping();
    debtrecStatusCodeMapping.setAttributeName("debtrecStatusCode");
    debtrecStatusCodeMapping
        .setFieldName("PTRDEBTREC_STATUS_REF.DEBTREC_STATUS_CODE");
    descriptor.addMapping(debtrecStatusCodeMapping);

    DirectToFieldMapping debtrecStatusDescMapping = new DirectToFieldMapping();
    debtrecStatusDescMapping.setAttributeName("debtrecStatusDesc");
    debtrecStatusDescMapping
        .setFieldName("PTRDEBTREC_STATUS_REF.DEBTREC_STATUS_DESC");
    debtrecStatusDescMapping.setNullValue("");
    descriptor.addMapping(debtrecStatusDescMapping);

    DirectToFieldMapping debtrecStatusIdMapping = new DirectToFieldMapping();
    debtrecStatusIdMapping.setAttributeName("debtrecStatusId");
    debtrecStatusIdMapping
        .setFieldName("PTRDEBTREC_STATUS_REF.DEBTREC_STATUS_ID");
    descriptor.addMapping(debtrecStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRDEBTREC_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRDEBTREC_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildDelinquencyTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.DelinquencyTypeRef.class);
    descriptor.addTableName("PTRDELINQUENCY_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRDELINQUENCY_TYPE_REF.DELINQUENCY_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRDELINQUENCY_TYPE_REF.DELINQUENCY_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrdelinquencyTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping delinquencyTypeCodeMapping = new DirectToFieldMapping();
    delinquencyTypeCodeMapping.setAttributeName("delinquencyTypeCode");
    delinquencyTypeCodeMapping
        .setFieldName("PTRDELINQUENCY_TYPE_REF.DELINQUENCY_TYPE_CODE");
    descriptor.addMapping(delinquencyTypeCodeMapping);

    DirectToFieldMapping delinquencyTypeDescMapping = new DirectToFieldMapping();
    delinquencyTypeDescMapping.setAttributeName("delinquencyTypeDesc");
    delinquencyTypeDescMapping
        .setFieldName("PTRDELINQUENCY_TYPE_REF.DELINQUENCY_TYPE_DESC");
    delinquencyTypeDescMapping.setNullValue("");
    descriptor.addMapping(delinquencyTypeDescMapping);

    DirectToFieldMapping delinquencyTypeIdMapping = new DirectToFieldMapping();
    delinquencyTypeIdMapping.setAttributeName("delinquencyTypeId");
    delinquencyTypeIdMapping
        .setFieldName("PTRDELINQUENCY_TYPE_REF.DELINQUENCY_TYPE_ID");
    descriptor.addMapping(delinquencyTypeIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRDELINQUENCY_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRDELINQUENCY_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildDemandDraftStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.DemandDraftStatusRef.class);
    descriptor.addTableName("PTRDEMAND_DRAFT_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRDEMAND_DRAFT_STATUS_REF.DEMAND_DRAFT_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRDEMAND_DRAFT_STATUS_REF.DEMAND_DRAFT_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrdemandDraftStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping demandDraftStatusCodeMapping = new DirectToFieldMapping();
    demandDraftStatusCodeMapping.setAttributeName("demandDraftStatusCode");
    demandDraftStatusCodeMapping
        .setFieldName("PTRDEMAND_DRAFT_STATUS_REF.DEMAND_DRAFT_STATUS_CODE");
    descriptor.addMapping(demandDraftStatusCodeMapping);

    DirectToFieldMapping demandDraftStatusDescMapping = new DirectToFieldMapping();
    demandDraftStatusDescMapping.setAttributeName("demandDraftStatusDesc");
    demandDraftStatusDescMapping
        .setFieldName("PTRDEMAND_DRAFT_STATUS_REF.DEMAND_DRAFT_STATUS_DESC");
    demandDraftStatusDescMapping.setNullValue("");
    descriptor.addMapping(demandDraftStatusDescMapping);

    DirectToFieldMapping demandDraftStatusIdMapping = new DirectToFieldMapping();
    demandDraftStatusIdMapping.setAttributeName("demandDraftStatusId");
    demandDraftStatusIdMapping
        .setFieldName("PTRDEMAND_DRAFT_STATUS_REF.DEMAND_DRAFT_STATUS_ID");
    descriptor.addMapping(demandDraftStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRDEMAND_DRAFT_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRDEMAND_DRAFT_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildDirectDebitStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.DirectDebitStatusRef.class);
    descriptor.addTableName("PTRDIRECT_DEBIT_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRDIRECT_DEBIT_STATUS_REF.DIRECT_DEBIT_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRDIRECT_DEBIT_STATUS_REF.DIRECT_DEBIT_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrdirectDebitStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping directDebitStatusCodeMapping = new DirectToFieldMapping();
    directDebitStatusCodeMapping.setAttributeName("directDebitStatusCode");
    directDebitStatusCodeMapping
        .setFieldName("PTRDIRECT_DEBIT_STATUS_REF.DIRECT_DEBIT_STATUS_CODE");
    descriptor.addMapping(directDebitStatusCodeMapping);

    DirectToFieldMapping directDebitStatusDescMapping = new DirectToFieldMapping();
    directDebitStatusDescMapping.setAttributeName("directDebitStatusDesc");
    directDebitStatusDescMapping
        .setFieldName("PTRDIRECT_DEBIT_STATUS_REF.DIRECT_DEBIT_STATUS_DESC");
    directDebitStatusDescMapping.setNullValue("");
    descriptor.addMapping(directDebitStatusDescMapping);

    DirectToFieldMapping directDebitStatusIdMapping = new DirectToFieldMapping();
    directDebitStatusIdMapping.setAttributeName("directDebitStatusId");
    directDebitStatusIdMapping
        .setFieldName("PTRDIRECT_DEBIT_STATUS_REF.DIRECT_DEBIT_STATUS_ID");
    descriptor.addMapping(directDebitStatusIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRDIRECT_DEBIT_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRDIRECT_DEBIT_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildDisputeReasonRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.DisputeReasonRef.class);
    descriptor.addTableName("PTRDISP_REASON_REF");
    descriptor.addPrimaryKeyFieldName("PTRDISP_REASON_REF.DISP_REASON_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRDISP_REASON_REF.DISP_REASON_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrdispReasonRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRDISP_REASON_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping dispReasonCodeMapping = new DirectToFieldMapping();
    dispReasonCodeMapping.setAttributeName("dispReasonCode");
    dispReasonCodeMapping.setFieldName("PTRDISP_REASON_REF.DISP_REASON_CODE");
    descriptor.addMapping(dispReasonCodeMapping);

    DirectToFieldMapping dispReasonDescMapping = new DirectToFieldMapping();
    dispReasonDescMapping.setAttributeName("dispReasonDesc");
    dispReasonDescMapping.setFieldName("PTRDISP_REASON_REF.DISP_REASON_DESC");
    dispReasonDescMapping.setNullValue("");
    descriptor.addMapping(dispReasonDescMapping);

    DirectToFieldMapping dispReasonIdMapping = new DirectToFieldMapping();
    dispReasonIdMapping.setAttributeName("dispReasonId");
    dispReasonIdMapping.setFieldName("PTRDISP_REASON_REF.DISP_REASON_ID");
    descriptor.addMapping(dispReasonIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRDISP_REASON_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmailNotifyTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmailNotifyTypeRef.class);
    descriptor.addTableName("PTREMAIL_NOTIFY_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREMAIL_NOTIFY_TYPE_REF.EMAIL_NOTIFY_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMAIL_NOTIFY_TYPE_REF.EMAIL_NOTIFY_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremailNotifyTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMAIL_NOTIFY_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping emailNotifyTypeCodeMapping = new DirectToFieldMapping();
    emailNotifyTypeCodeMapping.setAttributeName("emailNotifyTypeCode");
    emailNotifyTypeCodeMapping
        .setFieldName("PTREMAIL_NOTIFY_TYPE_REF.EMAIL_NOTIFY_TYPE_CODE");
    descriptor.addMapping(emailNotifyTypeCodeMapping);

    DirectToFieldMapping emailNotifyTypeDescMapping = new DirectToFieldMapping();
    emailNotifyTypeDescMapping.setAttributeName("emailNotifyTypeDesc");
    emailNotifyTypeDescMapping
        .setFieldName("PTREMAIL_NOTIFY_TYPE_REF.EMAIL_NOTIFY_TYPE_DESC");
    emailNotifyTypeDescMapping.setNullValue("");
    descriptor.addMapping(emailNotifyTypeDescMapping);

    DirectToFieldMapping emailNotifyTypeIdMapping = new DirectToFieldMapping();
    emailNotifyTypeIdMapping.setAttributeName("emailNotifyTypeId");
    emailNotifyTypeIdMapping
        .setFieldName("PTREMAIL_NOTIFY_TYPE_REF.EMAIL_NOTIFY_TYPE_ID");
    descriptor.addMapping(emailNotifyTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMAIL_NOTIFY_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmployeeDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.user.Employee.class);
    descriptor.addTableName("PTREMPLOYEE");
    descriptor.addPrimaryKeyFieldName("PTREMPLOYEE.EMPLOYEE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("Ptremployee");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping averageCollectionMapping = new DirectToFieldMapping();
    averageCollectionMapping.setAttributeName("averageCollection");
    averageCollectionMapping.setFieldName("PTREMPLOYEE.AVERAGE_COLLECTION");
    descriptor.addMapping(averageCollectionMapping);

    DirectToFieldMapping citizenshipMapping = new DirectToFieldMapping();
    citizenshipMapping.setAttributeName("citizenship");
    citizenshipMapping.setFieldName("PTREMPLOYEE.CITIZENSHIP");
    descriptor.addMapping(citizenshipMapping);

    DirectToFieldMapping dateJoinedInCccMapping = new DirectToFieldMapping();
    dateJoinedInCccMapping.setAttributeName("dateJoinedInCcc");
    dateJoinedInCccMapping.setFieldName("PTREMPLOYEE.DATE_JOINED_IN_CCC");
    descriptor.addMapping(dateJoinedInCccMapping);

    DirectToFieldMapping dateOfBirthMapping = new DirectToFieldMapping();
    dateOfBirthMapping.setAttributeName("dateOfBirth");
    dateOfBirthMapping.setFieldName("PTREMPLOYEE.DATE_OF_BIRTH");
    descriptor.addMapping(dateOfBirthMapping);

    DirectToFieldMapping departmentMapping = new DirectToFieldMapping();
    departmentMapping.setAttributeName("department");
    departmentMapping.setFieldName("PTREMPLOYEE.DEPARTMENT");
    descriptor.addMapping(departmentMapping);

    DirectToFieldMapping designationMapping = new DirectToFieldMapping();
    designationMapping.setAttributeName("designation");
    designationMapping.setFieldName("PTREMPLOYEE.DESIGNATION");
    descriptor.addMapping(designationMapping);

    DirectToFieldMapping educationAttainmentMapping = new DirectToFieldMapping();
    educationAttainmentMapping.setAttributeName("educationAttainment");
    educationAttainmentMapping
        .setFieldName("PTREMPLOYEE.EDUCATIONAL_ATTAINMENT");
    descriptor.addMapping(educationAttainmentMapping);

    DirectToFieldMapping employeeIdMapping = new DirectToFieldMapping();
    employeeIdMapping.setAttributeName("employeeId");
    employeeIdMapping.setFieldName("PTREMPLOYEE.EMPLOYEE_ID");
    descriptor.addMapping(employeeIdMapping);

    DirectToFieldMapping gradeMapping = new DirectToFieldMapping();
    gradeMapping.setAttributeName("grade");
    gradeMapping.setFieldName("PTREMPLOYEE.GRADE");
    descriptor.addMapping(gradeMapping);

    DirectToFieldMapping hiredDateMapping = new DirectToFieldMapping();
    hiredDateMapping.setAttributeName("hiredDate");
    hiredDateMapping.setFieldName("PTREMPLOYEE.HIRED_DATE");
    descriptor.addMapping(hiredDateMapping);

    DirectToFieldMapping identityNumberMapping = new DirectToFieldMapping();
    identityNumberMapping.setAttributeName("identityNumber");
    identityNumberMapping.setFieldName("PTREMPLOYEE.IDENTITY_NUMBER");
    descriptor.addMapping(identityNumberMapping);

    DirectToFieldMapping languageProficiencyMapping = new DirectToFieldMapping();
    languageProficiencyMapping.setAttributeName("languageProficiency");
    languageProficiencyMapping.setFieldName("PTREMPLOYEE.LANGUAGE_PROFICIENCY");
    descriptor.addMapping(languageProficiencyMapping);

    DirectToFieldMapping oldIdentityNumberMapping = new DirectToFieldMapping();
    oldIdentityNumberMapping.setAttributeName("oldIdentityNumber");
    oldIdentityNumberMapping.setFieldName("PTREMPLOYEE.OLD_IDENTITY_NUMBER");
    descriptor.addMapping(oldIdentityNumberMapping);

    DirectToFieldMapping passportNumberMapping = new DirectToFieldMapping();
    passportNumberMapping.setAttributeName("passportNumber");
    passportNumberMapping.setFieldName("PTREMPLOYEE.PASSPORT_NUMBER");
    descriptor.addMapping(passportNumberMapping);

    DirectToFieldMapping previousDepartmentMapping = new DirectToFieldMapping();
    previousDepartmentMapping.setAttributeName("previousDepartment");
    previousDepartmentMapping.setFieldName("PTREMPLOYEE.PREV_DEPARTMENT");
    descriptor.addMapping(previousDepartmentMapping);

    DirectToFieldMapping remarksMapping = new DirectToFieldMapping();
    remarksMapping.setAttributeName("remarks");
    remarksMapping.setFieldName("PTREMPLOYEE.REMARKS");
    descriptor.addMapping(remarksMapping);

    DirectToFieldMapping retiredDateMapping = new DirectToFieldMapping();
    retiredDateMapping.setAttributeName("retiredDate");
    retiredDateMapping.setFieldName("PTREMPLOYEE.RETIRED_DATE");
    descriptor.addMapping(retiredDateMapping);

    DirectToFieldMapping skillLevelMapping = new DirectToFieldMapping();
    skillLevelMapping.setAttributeName("skillLevel");
    skillLevelMapping.setFieldName("PTREMPLOYEE.SKILL_LEVEL");
    descriptor.addMapping(skillLevelMapping);

    DirectToFieldMapping transferDateMapping = new DirectToFieldMapping();
    transferDateMapping.setAttributeName("transferDate");
    transferDateMapping.setFieldName("PTREMPLOYEE.TRANSFER_DATE");
    descriptor.addMapping(transferDateMapping);

    OneToOneMapping addressDetailsMapping = new OneToOneMapping();
    addressDetailsMapping.setAttributeName("addressDetails");
    addressDetailsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    addressDetailsMapping.useBasicIndirection();
    addressDetailsMapping.addForeignKeyFieldName("PTREMPLOYEE.CONTACT_ID",
        "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(addressDetailsMapping);

    OneToOneMapping collectabilityRefMapping = new OneToOneMapping();
    collectabilityRefMapping.setAttributeName("collectabilityRef");
    collectabilityRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CollectabilityRef.class);
    collectabilityRefMapping.useBasicIndirection();
    collectabilityRefMapping
        .addForeignKeyFieldName("PTREMPLOYEE.COLLECTABILITY",
            "PTRCOLLECTABILITY_REF.COLLECTABILITY_ID");
    descriptor.addMapping(collectabilityRefMapping);

    OneToOneMapping employeeProfileRefMapping = new OneToOneMapping();
    employeeProfileRefMapping.setAttributeName("employeeProfileRef");
    employeeProfileRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.EmployeeProfileRef.class);
    employeeProfileRefMapping.useBasicIndirection();
    employeeProfileRefMapping.addForeignKeyFieldName(
        "PTREMPLOYEE.DISC_PROFILE_ID",
        "PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_ID");
    descriptor.addMapping(employeeProfileRefMapping);

    OneToOneMapping employeeTypeRefMapping = new OneToOneMapping();
    employeeTypeRefMapping.setAttributeName("employeeTypeRef");
    employeeTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.EmployeeTypeRef.class);
    employeeTypeRefMapping.useBasicIndirection();
    employeeTypeRefMapping.readOnly();
    employeeTypeRefMapping
        .addForeignKeyFieldName("PTREMPLOYEE.EMPLOYEE_TYPE_ID",
            "PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_ID");
    descriptor.addMapping(employeeTypeRefMapping);

    OneToOneMapping sexRefMapping = new OneToOneMapping();
    sexRefMapping.setAttributeName("sexRef");
    sexRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AccountSexRef.class);
    sexRefMapping.useBasicIndirection();
    sexRefMapping.addForeignKeyFieldName("PTREMPLOYEE.SEX_ID",
        "PTRACC_SEX_REF.ACC_SEX_ID");
    descriptor.addMapping(sexRefMapping);

    OneToManyMapping usersMapping = new OneToManyMapping();
    usersMapping.setAttributeName("users");
    usersMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    usersMapping.useBasicIndirection();
    usersMapping.addTargetForeignKeyFieldName("PTRUSER.EMPLOYEE_ID",
        "PTREMPLOYEE.EMPLOYEE_ID");
    descriptor.addMapping(usersMapping);

    ManyToManyMapping contactsMapping = new ManyToManyMapping();
    contactsMapping.setAttributeName("contacts");
    contactsMapping
        .setReferenceClass(com.profitera.descriptor.db.contact.AddressDetails.class);
    contactsMapping.useBasicIndirection();
    contactsMapping.setRelationTableName("PTREMPLOYEE_CONTACT_REL");
    contactsMapping.addSourceRelationKeyFieldName(
        "PTREMPLOYEE_CONTACT_REL.EMPLOYEE_ID", "PTREMPLOYEE.EMPLOYEE_ID");
    contactsMapping.addTargetRelationKeyFieldName(
        "PTREMPLOYEE_CONTACT_REL.CONTACT_ID", "PTRADDRESS_DET.CONTACT_ID");
    descriptor.addMapping(contactsMapping);

    ManyToManyMapping reportsToMapping = new ManyToManyMapping();
    reportsToMapping.setAttributeName("reportsTo");
    reportsToMapping
        .setReferenceClass(com.profitera.descriptor.db.user.Employee.class);
    reportsToMapping.useBasicIndirection();
    reportsToMapping.setRelationTableName("PTREMPLOYEE_REPORTTO_REL");
    reportsToMapping.addSourceRelationKeyFieldName(
        "PTREMPLOYEE_REPORTTO_REL.EMPLOYEE_ID", "PTREMPLOYEE.EMPLOYEE_ID");
    reportsToMapping.addTargetRelationKeyFieldName(
        "PTREMPLOYEE_REPORTTO_REL.REPORT_TO", "PTREMPLOYEE.EMPLOYEE_ID");
    descriptor.addMapping(reportsToMapping);

    return descriptor;
  }

  public Descriptor buildEmployeeProfileRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmployeeProfileRef.class);
    descriptor.addTableName("PTREMPLOYEE_PROFILE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremployeeProfileRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYEE_PROFILE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping discProfileCodeMapping = new DirectToFieldMapping();
    discProfileCodeMapping.setAttributeName("discProfileCode");
    discProfileCodeMapping
        .setFieldName("PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_CODE");
    descriptor.addMapping(discProfileCodeMapping);

    DirectToFieldMapping discProfileDescMapping = new DirectToFieldMapping();
    discProfileDescMapping.setAttributeName("discProfileDesc");
    discProfileDescMapping
        .setFieldName("PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_DESC");
    descriptor.addMapping(discProfileDescMapping);

    DirectToFieldMapping discProfileIdMapping = new DirectToFieldMapping();
    discProfileIdMapping.setAttributeName("discProfileId");
    discProfileIdMapping
        .setFieldName("PTREMPLOYEE_PROFILE_REF.DISC_PROFILE_ID");
    descriptor.addMapping(discProfileIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMPLOYEE_PROFILE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmployeeReportToTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmployeeReportToTypeRef.class);
    descriptor.addTableName("PTREMPLOYEE_REPORTTO_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.EMP_REPORTTO_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.EMP_REPORTTO_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremployeeReporttoTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping empReporttoTypeCodeMapping = new DirectToFieldMapping();
    empReporttoTypeCodeMapping.setAttributeName("empReporttoTypeCode");
    empReporttoTypeCodeMapping
        .setFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.EMP_REPORTTO_TYPE_CODE");
    descriptor.addMapping(empReporttoTypeCodeMapping);

    DirectToFieldMapping empReporttoTypeDescMapping = new DirectToFieldMapping();
    empReporttoTypeDescMapping.setAttributeName("empReporttoTypeDesc");
    empReporttoTypeDescMapping
        .setFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.EMP_REPORTTO_TYPE_DESC");
    empReporttoTypeDescMapping.setNullValue("");
    descriptor.addMapping(empReporttoTypeDescMapping);

    DirectToFieldMapping empReporttoTypeIdMapping = new DirectToFieldMapping();
    empReporttoTypeIdMapping.setAttributeName("empReporttoTypeId");
    empReporttoTypeIdMapping
        .setFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.EMP_REPORTTO_TYPE_ID");
    descriptor.addMapping(empReporttoTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTREMPLOYEE_REPORTTO_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmployeeTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmployeeTypeRef.class);
    descriptor.addTableName("PTREMPLOYEE_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremployeeTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYEE_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping employeeTypeCodeMapping = new DirectToFieldMapping();
    employeeTypeCodeMapping.setAttributeName("employeeTypeCode");
    employeeTypeCodeMapping
        .setFieldName("PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_CODE");
    descriptor.addMapping(employeeTypeCodeMapping);

    DirectToFieldMapping employeeTypeDescMapping = new DirectToFieldMapping();
    employeeTypeDescMapping.setAttributeName("employeeTypeDesc");
    employeeTypeDescMapping
        .setFieldName("PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_DESC");
    employeeTypeDescMapping.setNullValue("");
    descriptor.addMapping(employeeTypeDescMapping);

    DirectToFieldMapping employeeTypeIdMapping = new DirectToFieldMapping();
    employeeTypeIdMapping.setAttributeName("employeeTypeId");
    employeeTypeIdMapping.setFieldName("PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_ID");
    descriptor.addMapping(employeeTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMPLOYEE_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToManyMapping employeeMapping = new OneToManyMapping();
    employeeMapping.setAttributeName("employee");
    employeeMapping
        .setReferenceClass(com.profitera.descriptor.db.user.Employee.class);
    employeeMapping.useBasicIndirection();
    employeeMapping
        .addTargetForeignKeyFieldName("PTREMPLOYEE.EMPLOYEE_TYPE_ID",
            "PTREMPLOYEE_TYPE_REF.EMPLOYEE_TYPE_ID");
    descriptor.addMapping(employeeMapping);

    return descriptor;
  }

  public Descriptor buildEmployerBusinessRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmployerBusinessRef.class);
    descriptor.addTableName("PTREMPLOYER_BUSINESS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremployerBusinessRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYER_BUSINESS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping employerBusinessCodeMapping = new DirectToFieldMapping();
    employerBusinessCodeMapping.setAttributeName("employerBusinessCode");
    employerBusinessCodeMapping
        .setFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_CODE");
    descriptor.addMapping(employerBusinessCodeMapping);

    DirectToFieldMapping employerBusinessDescMapping = new DirectToFieldMapping();
    employerBusinessDescMapping.setAttributeName("employerBusinessDesc");
    employerBusinessDescMapping
        .setFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_DESC");
    employerBusinessDescMapping.setNullValue("");
    descriptor.addMapping(employerBusinessDescMapping);

    DirectToFieldMapping employerBusinessGroupMapping = new DirectToFieldMapping();
    employerBusinessGroupMapping.setAttributeName("employerBusinessGroup");
    employerBusinessGroupMapping
        .setFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_GROUP");
    descriptor.addMapping(employerBusinessGroupMapping);

    DirectToFieldMapping employerBusinessIdMapping = new DirectToFieldMapping();
    employerBusinessIdMapping.setAttributeName("employerBusinessId");
    employerBusinessIdMapping
        .setFieldName("PTREMPLOYER_BUSINESS_REF.EMPLOYER_BUSINESS_ID");
    descriptor.addMapping(employerBusinessIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMPLOYER_BUSINESS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmployerTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmployerTypeRef.class);
    descriptor.addTableName("PTREMPLOYER_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTREMPLOYER_TYPE_REF.EMP_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTREMPLOYER_TYPE_REF.EMP_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremployerTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYER_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping empTypeCodeMapping = new DirectToFieldMapping();
    empTypeCodeMapping.setAttributeName("empTypeCode");
    empTypeCodeMapping.setFieldName("PTREMPLOYER_TYPE_REF.EMP_TYPE_CODE");
    descriptor.addMapping(empTypeCodeMapping);

    DirectToFieldMapping empTypeDescMapping = new DirectToFieldMapping();
    empTypeDescMapping.setAttributeName("empTypeDesc");
    empTypeDescMapping.setFieldName("PTREMPLOYER_TYPE_REF.EMP_TYPE_DESC");
    empTypeDescMapping.setNullValue("");
    descriptor.addMapping(empTypeDescMapping);

    DirectToFieldMapping empTypeIdMapping = new DirectToFieldMapping();
    empTypeIdMapping.setAttributeName("empTypeId");
    empTypeIdMapping.setFieldName("PTREMPLOYER_TYPE_REF.EMP_TYPE_ID");
    descriptor.addMapping(empTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMPLOYER_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildEmploymentTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.EmploymentTypeRef.class);
    descriptor.addTableName("PTREMPLOYMENT_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREMPLOYMENT_TYPE_REF.EMPLOYMENT_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREMPLOYMENT_TYPE_REF.EMPLOYMENT_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtremploymentTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREMPLOYMENT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping employmentTypeCodeMapping = new DirectToFieldMapping();
    employmentTypeCodeMapping.setAttributeName("employmentTypeCode");
    employmentTypeCodeMapping
        .setFieldName("PTREMPLOYMENT_TYPE_REF.EMPLOYMENT_TYPE_CODE");
    descriptor.addMapping(employmentTypeCodeMapping);

    DirectToFieldMapping employmentTypeDescMapping = new DirectToFieldMapping();
    employmentTypeDescMapping.setAttributeName("employmentTypeDesc");
    employmentTypeDescMapping
        .setFieldName("PTREMPLOYMENT_TYPE_REF.EMPLOYMENT_TYPE_DESC");
    employmentTypeDescMapping.setNullValue("");
    descriptor.addMapping(employmentTypeDescMapping);

    DirectToFieldMapping employmentTypeIdMapping = new DirectToFieldMapping();
    employmentTypeIdMapping.setAttributeName("employmentTypeId");
    employmentTypeIdMapping
        .setFieldName("PTREMPLOYMENT_TYPE_REF.EMPLOYMENT_TYPE_ID");
    descriptor.addMapping(employmentTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTREMPLOYMENT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }
  public Descriptor buildExternalRatingTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ExternalRatingTypeRef.class);
    descriptor.addTableName("PTREXTERNAL_RATING_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTREXTERNAL_RATING_TYPE_REF.EXTERNAL_RATING_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTREXTERNAL_RATING_TYPE_REF.EXTERNAL_RATING_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrexternalRatingTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTREXTERNAL_RATING_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping externalRatingTypeCodeMapping = new DirectToFieldMapping();
    externalRatingTypeCodeMapping.setAttributeName("externalRatingTypeCode");
    externalRatingTypeCodeMapping
        .setFieldName("PTREXTERNAL_RATING_TYPE_REF.EXTERNAL_RATING_TYPE_CODE");
    descriptor.addMapping(externalRatingTypeCodeMapping);

    DirectToFieldMapping externalRatingTypeDescMapping = new DirectToFieldMapping();
    externalRatingTypeDescMapping.setAttributeName("externalRatingTypeDesc");
    externalRatingTypeDescMapping
        .setFieldName("PTREXTERNAL_RATING_TYPE_REF.EXTERNAL_RATING_TYPE_DESC");
    externalRatingTypeDescMapping.setNullValue("");
    descriptor.addMapping(externalRatingTypeDescMapping);

    DirectToFieldMapping externalRatingTypeIdMapping = new DirectToFieldMapping();
    externalRatingTypeIdMapping.setAttributeName("externalRatingTypeId");
    externalRatingTypeIdMapping
        .setFieldName("PTREXTERNAL_RATING_TYPE_REF.EXTERNAL_RATING_TYPE_ID");
    descriptor.addMapping(externalRatingTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTREXTERNAL_RATING_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildHolidayDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.config.Holiday.class);
    descriptor.addTableName("PTRHOLIDAY");
    descriptor.addPrimaryKeyFieldName("PTRHOLIDAY.HOLIDAY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("Ptrholiday");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping holidayDateMapping = new DirectToFieldMapping();
    holidayDateMapping.setAttributeName("holidayDate");
    holidayDateMapping.setFieldName("PTRHOLIDAY.HOLIDAY_DATE");
    descriptor.addMapping(holidayDateMapping);

    DirectToFieldMapping holidayDescMapping = new DirectToFieldMapping();
    holidayDescMapping.setAttributeName("holidayDesc");
    holidayDescMapping.setFieldName("PTRHOLIDAY.HOLIDAY_DESC");
    descriptor.addMapping(holidayDescMapping);

    DirectToFieldMapping holidayIdMapping = new DirectToFieldMapping();
    holidayIdMapping.setAttributeName("holidayId");
    holidayIdMapping.setFieldName("PTRHOLIDAY.HOLIDAY_ID");
    descriptor.addMapping(holidayIdMapping);

    DirectToFieldMapping noOfDaysMapping = new DirectToFieldMapping();
    noOfDaysMapping.setAttributeName("noOfDays");
    noOfDaysMapping.setFieldName("PTRHOLIDAY.NO_OF_DAYS");
    descriptor.addMapping(noOfDaysMapping);

    OneToManyMapping holidayStateRelMapping = new OneToManyMapping();
    holidayStateRelMapping.setAttributeName("holidayStateRel");
    holidayStateRelMapping
        .setReferenceClass(com.profitera.descriptor.db.relation.HolidayStateRel.class);
    holidayStateRelMapping.useBasicIndirection();
    holidayStateRelMapping.addTargetForeignKeyFieldName(
        "PTRHOLIDAY_STATE_REL.HOLIDAY_ID", "PTRHOLIDAY.HOLIDAY_ID");
    descriptor.addMapping(holidayStateRelMapping);

    return descriptor;
  }

  public Descriptor buildHolidayStateRelDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.relation.HolidayStateRel.class);
    descriptor.addTableName("PTRHOLIDAY_STATE_REL");
    descriptor.addPrimaryKeyFieldName("PTRHOLIDAY_STATE_REL.HOLIDAY_ID");
    descriptor.addPrimaryKeyFieldName("PTRHOLIDAY_STATE_REL.STATE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrholidayStateRel");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    OneToOneMapping holidayMapping = new OneToOneMapping();
    holidayMapping.setAttributeName("holiday");
    holidayMapping
        .setReferenceClass(com.profitera.descriptor.db.config.Holiday.class);
    holidayMapping.useBasicIndirection();
    holidayMapping.addForeignKeyFieldName("PTRHOLIDAY_STATE_REL.HOLIDAY_ID",
        "PTRHOLIDAY.HOLIDAY_ID");
    descriptor.addMapping(holidayMapping);

    OneToOneMapping stateRefMapping = new OneToOneMapping();
    stateRefMapping.setAttributeName("stateRef");
    stateRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.StateRef.class);
    stateRefMapping.useBasicIndirection();
    stateRefMapping.addForeignKeyFieldName("PTRHOLIDAY_STATE_REL.STATE_ID",
        "PTRSTATE_REF.STATE_ID");
    descriptor.addMapping(stateRefMapping);

    return descriptor;
  }

  public Descriptor buildInstallmentPaidStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.InstallmentPaidStatusRef.class);
    descriptor.addTableName("PTRINST_PAID_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrinstPaidStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRINST_PAID_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping instPaidStatusCodeMapping = new DirectToFieldMapping();
    instPaidStatusCodeMapping.setAttributeName("instPaidStatusCode");
    instPaidStatusCodeMapping
        .setFieldName("PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_CODE");
    descriptor.addMapping(instPaidStatusCodeMapping);

    DirectToFieldMapping instPaidStatusDescMapping = new DirectToFieldMapping();
    instPaidStatusDescMapping.setAttributeName("instPaidStatusDesc");
    instPaidStatusDescMapping
        .setFieldName("PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_DESC");
    instPaidStatusDescMapping.setNullValue("");
    descriptor.addMapping(instPaidStatusDescMapping);

    DirectToFieldMapping instPaidStatusIdMapping = new DirectToFieldMapping();
    instPaidStatusIdMapping.setAttributeName("instPaidStatusId");
    instPaidStatusIdMapping
        .setFieldName("PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_ID");
    descriptor.addMapping(instPaidStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRINST_PAID_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildInstallmentStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.InstallmentStatusRef.class);
    descriptor.addTableName("PTRINST_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRINST_STATUS_REF.INST_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRINST_STATUS_REF.INST_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrinstStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRINST_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping instStatusCodeMapping = new DirectToFieldMapping();
    instStatusCodeMapping.setAttributeName("instStatusCode");
    instStatusCodeMapping.setFieldName("PTRINST_STATUS_REF.INST_STATUS_CODE");
    descriptor.addMapping(instStatusCodeMapping);

    DirectToFieldMapping instStatusDescMapping = new DirectToFieldMapping();
    instStatusDescMapping.setAttributeName("instStatusDesc");
    instStatusDescMapping.setFieldName("PTRINST_STATUS_REF.INST_STATUS_DESC");
    instStatusDescMapping.setNullValue("");
    descriptor.addMapping(instStatusDescMapping);

    DirectToFieldMapping instStatusIdMapping = new DirectToFieldMapping();
    instStatusIdMapping.setAttributeName("instStatusId");
    instStatusIdMapping.setFieldName("PTRINST_STATUS_REF.INST_STATUS_ID");
    descriptor.addMapping(instStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRINST_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }


  public Descriptor buildInvoiceSummaryTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.InvoiceSummaryTypeRef.class);
    descriptor.addTableName("PTRINVOICE_SUMMARY_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRINVOICE_SUMMARY_TYPE_REF.INV_SUMM_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRINVOICE_SUMMARY_TYPE_REF.INV_SUMM_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrinvoiceSummaryTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRINVOICE_SUMMARY_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping invSummTypeCodeMapping = new DirectToFieldMapping();
    invSummTypeCodeMapping.setAttributeName("invSummTypeCode");
    invSummTypeCodeMapping
        .setFieldName("PTRINVOICE_SUMMARY_TYPE_REF.INV_SUMM_TYPE_CODE");
    descriptor.addMapping(invSummTypeCodeMapping);

    DirectToFieldMapping invSummTypeDescMapping = new DirectToFieldMapping();
    invSummTypeDescMapping.setAttributeName("invSummTypeDesc");
    invSummTypeDescMapping
        .setFieldName("PTRINVOICE_SUMMARY_TYPE_REF.INV_SUMM_TYPE_DESC");
    invSummTypeDescMapping.setNullValue("");
    descriptor.addMapping(invSummTypeDescMapping);

    DirectToFieldMapping invSummTypeIdMapping = new DirectToFieldMapping();
    invSummTypeIdMapping.setAttributeName("invSummTypeId");
    invSummTypeIdMapping
        .setFieldName("PTRINVOICE_SUMMARY_TYPE_REF.INV_SUMM_TYPE_ID");
    descriptor.addMapping(invSummTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRINVOICE_SUMMARY_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildInvoiceTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.InvoiceTypeRef.class);
    descriptor.addTableName("PTRINVOICE_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRINVOICE_TYPE_REF.INVOICE_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRINVOICE_TYPE_REF.INVOICE_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrinvoiceTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRINVOICE_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping invoiceTypeCodeMapping = new DirectToFieldMapping();
    invoiceTypeCodeMapping.setAttributeName("invoiceTypeCode");
    invoiceTypeCodeMapping
        .setFieldName("PTRINVOICE_TYPE_REF.INVOICE_TYPE_CODE");
    descriptor.addMapping(invoiceTypeCodeMapping);

    DirectToFieldMapping invoiceTypeDescMapping = new DirectToFieldMapping();
    invoiceTypeDescMapping.setAttributeName("invoiceTypeDesc");
    invoiceTypeDescMapping
        .setFieldName("PTRINVOICE_TYPE_REF.INVOICE_TYPE_DESC");
    invoiceTypeDescMapping.setNullValue("");
    descriptor.addMapping(invoiceTypeDescMapping);

    DirectToFieldMapping invoiceTypeIdMapping = new DirectToFieldMapping();
    invoiceTypeIdMapping.setAttributeName("invoiceTypeId");
    invoiceTypeIdMapping.setFieldName("PTRINVOICE_TYPE_REF.INVOICE_TYPE_ID");
    descriptor.addMapping(invoiceTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRINVOICE_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildLegalInvstgStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.LegalInvstgStatusRef.class);
    descriptor.addTableName("PTRLEGAL_INVSTG_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRLEGAL_INVSTG_STATUS_REF.LEGAL_INVSTG_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRLEGAL_INVSTG_STATUS_REF.LEGAL_INVSTG_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrlegalInvstgStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRLEGAL_INVSTG_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping legalInvstgStatusCodeMapping = new DirectToFieldMapping();
    legalInvstgStatusCodeMapping.setAttributeName("legalInvstgStatusCode");
    legalInvstgStatusCodeMapping
        .setFieldName("PTRLEGAL_INVSTG_STATUS_REF.LEGAL_INVSTG_STATUS_CODE");
    descriptor.addMapping(legalInvstgStatusCodeMapping);

    DirectToFieldMapping legalInvstgStatusDescMapping = new DirectToFieldMapping();
    legalInvstgStatusDescMapping.setAttributeName("legalInvstgStatusDesc");
    legalInvstgStatusDescMapping
        .setFieldName("PTRLEGAL_INVSTG_STATUS_REF.LEGAL_INVSTG_STATUS_DESC");
    legalInvstgStatusDescMapping.setNullValue("");
    descriptor.addMapping(legalInvstgStatusDescMapping);

    DirectToFieldMapping legalInvstgStatusIdMapping = new DirectToFieldMapping();
    legalInvstgStatusIdMapping.setAttributeName("legalInvstgStatusId");
    legalInvstgStatusIdMapping
        .setFieldName("PTRLEGAL_INVSTG_STATUS_REF.LEGAL_INVSTG_STATUS_ID");
    descriptor.addMapping(legalInvstgStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRLEGAL_INVSTG_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildLegalReasonRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.LegalReasonRef.class);
    descriptor.addTableName("PTRLEGAL_REASON_REF");
    descriptor.addPrimaryKeyFieldName("PTRLEGAL_REASON_REF.LEGAL_REASON_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRLEGAL_REASON_REF.LEGAL_REASON_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrlegalReasonRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRLEGAL_REASON_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping legalReasonCodeMapping = new DirectToFieldMapping();
    legalReasonCodeMapping.setAttributeName("legalReasonCode");
    legalReasonCodeMapping
        .setFieldName("PTRLEGAL_REASON_REF.LEGAL_REASON_CODE");
    descriptor.addMapping(legalReasonCodeMapping);

    DirectToFieldMapping legalReasonDescMapping = new DirectToFieldMapping();
    legalReasonDescMapping.setAttributeName("legalReasonDesc");
    legalReasonDescMapping
        .setFieldName("PTRLEGAL_REASON_REF.LEGAL_REASON_DESC");
    legalReasonDescMapping.setNullValue("");
    descriptor.addMapping(legalReasonDescMapping);

    DirectToFieldMapping legalReasonIdMapping = new DirectToFieldMapping();
    legalReasonIdMapping.setAttributeName("legalReasonId");
    legalReasonIdMapping.setFieldName("PTRLEGAL_REASON_REF.LEGAL_REASON_ID");
    descriptor.addMapping(legalReasonIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRLEGAL_REASON_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildLegalSummonsRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.LegalSummonsRef.class);
    descriptor.addTableName("PTRLEGAL_SUMMONS_REF");
    descriptor.addPrimaryKeyFieldName("PTRLEGAL_SUMMONS_REF.LEGAL_SUMMONS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRLEGAL_SUMMONS_REF.LEGAL_SUMMONS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrlegalSummonsRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRLEGAL_SUMMONS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping legalSummonsCodeMapping = new DirectToFieldMapping();
    legalSummonsCodeMapping.setAttributeName("legalSummonsCode");
    legalSummonsCodeMapping
        .setFieldName("PTRLEGAL_SUMMONS_REF.LEGAL_SUMMONS_CODE");
    descriptor.addMapping(legalSummonsCodeMapping);

    DirectToFieldMapping legalSummonsDescMapping = new DirectToFieldMapping();
    legalSummonsDescMapping.setAttributeName("legalSummonsDesc");
    legalSummonsDescMapping
        .setFieldName("PTRLEGAL_SUMMONS_REF.LEGAL_SUMMONS_DESC");
    legalSummonsDescMapping.setNullValue("");
    descriptor.addMapping(legalSummonsDescMapping);

    DirectToFieldMapping legalSummonsIdMapping = new DirectToFieldMapping();
    legalSummonsIdMapping.setAttributeName("legalSummonsId");
    legalSummonsIdMapping.setFieldName("PTRLEGAL_SUMMONS_REF.LEGAL_SUMMONS_ID");
    descriptor.addMapping(legalSummonsIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRLEGAL_SUMMONS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }


  public Descriptor buildLoanTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.LoanTypeRef.class);
    descriptor.addTableName("PTRLOAN_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrloanTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRLOAN_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping loanTypeCategoryMapping = new DirectToFieldMapping();
    loanTypeCategoryMapping.setAttributeName("loanTypeCategory");
    loanTypeCategoryMapping.setFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_CATEGORY");
    descriptor.addMapping(loanTypeCategoryMapping);

    DirectToFieldMapping loanTypeCodeMapping = new DirectToFieldMapping();
    loanTypeCodeMapping.setAttributeName("loanTypeCode");
    loanTypeCodeMapping.setFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_CODE");
    descriptor.addMapping(loanTypeCodeMapping);

    DirectToFieldMapping loanTypeDescMapping = new DirectToFieldMapping();
    loanTypeDescMapping.setAttributeName("loanTypeDesc");
    loanTypeDescMapping.setFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_DESC");
    loanTypeDescMapping.setNullValue("");
    descriptor.addMapping(loanTypeDescMapping);

    DirectToFieldMapping loanTypeIdMapping = new DirectToFieldMapping();
    loanTypeIdMapping.setAttributeName("loanTypeId");
    loanTypeIdMapping.setFieldName("PTRLOAN_TYPE_REF.LOAN_TYPE_ID");
    descriptor.addMapping(loanTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRLOAN_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildMaritalStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.MaritalStatusRef.class);
    descriptor.addTableName("PTRMARITAL_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrmaritalStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRMARITAL_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping maritalStatusRefCodeMapping = new DirectToFieldMapping();
    maritalStatusRefCodeMapping.setAttributeName("maritalStatusRefCode");
    maritalStatusRefCodeMapping
        .setFieldName("PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_CODE");
    descriptor.addMapping(maritalStatusRefCodeMapping);

    DirectToFieldMapping maritalStatusRefDescMapping = new DirectToFieldMapping();
    maritalStatusRefDescMapping.setAttributeName("maritalStatusRefDesc");
    maritalStatusRefDescMapping
        .setFieldName("PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_DESC");
    maritalStatusRefDescMapping.setNullValue("");
    descriptor.addMapping(maritalStatusRefDescMapping);

    DirectToFieldMapping maritalStatusRefIdMapping = new DirectToFieldMapping();
    maritalStatusRefIdMapping.setAttributeName("maritalStatusRefId");
    maritalStatusRefIdMapping
        .setFieldName("PTRMARITAL_STATUS_REF.MARITAL_STATUS_REF_ID");
    descriptor.addMapping(maritalStatusRefIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRMARITAL_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildMerchantRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.MerchantRef.class);
    descriptor.addTableName("PTRMERCHANT_REF");
    descriptor.addPrimaryKeyFieldName("PTRMERCHANT_REF.MERCHANT_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRMERCHANT_REF.MERCHANT_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrmerchantRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRMERCHANT_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping merchantCodeMapping = new DirectToFieldMapping();
    merchantCodeMapping.setAttributeName("merchantCode");
    merchantCodeMapping.setFieldName("PTRMERCHANT_REF.MERCHANT_CODE");
    descriptor.addMapping(merchantCodeMapping);

    DirectToFieldMapping merchantDescMapping = new DirectToFieldMapping();
    merchantDescMapping.setAttributeName("merchantDesc");
    merchantDescMapping.setFieldName("PTRMERCHANT_REF.MERCHANT_DESC");
    merchantDescMapping.setNullValue("");
    descriptor.addMapping(merchantDescMapping);

    DirectToFieldMapping merchantIdMapping = new DirectToFieldMapping();
    merchantIdMapping.setAttributeName("merchantId");
    merchantIdMapping.setFieldName("PTRMERCHANT_REF.MERCHANT_ID");
    descriptor.addMapping(merchantIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRMERCHANT_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildMoneyOrderStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.MoneyOrderStatusRef.class);
    descriptor.addTableName("PTRMONEY_ORDER_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRMONEY_ORDER_STATUS_REF.MONEY_ORDER_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRMONEY_ORDER_STATUS_REF.MONEY_ORDER_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrmoneyOrderStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRMONEY_ORDER_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping moneyOrderStatusCodeMapping = new DirectToFieldMapping();
    moneyOrderStatusCodeMapping.setAttributeName("moneyOrderStatusCode");
    moneyOrderStatusCodeMapping
        .setFieldName("PTRMONEY_ORDER_STATUS_REF.MONEY_ORDER_STATUS_CODE");
    descriptor.addMapping(moneyOrderStatusCodeMapping);

    DirectToFieldMapping moneyOrderStatusDescMapping = new DirectToFieldMapping();
    moneyOrderStatusDescMapping.setAttributeName("moneyOrderStatusDesc");
    moneyOrderStatusDescMapping
        .setFieldName("PTRMONEY_ORDER_STATUS_REF.MONEY_ORDER_STATUS_DESC");
    moneyOrderStatusDescMapping.setNullValue("");
    descriptor.addMapping(moneyOrderStatusDescMapping);

    DirectToFieldMapping moneyOrderStatusIdMapping = new DirectToFieldMapping();
    moneyOrderStatusIdMapping.setAttributeName("moneyOrderStatusId");
    moneyOrderStatusIdMapping
        .setFieldName("PTRMONEY_ORDER_STATUS_REF.MONEY_ORDER_STATUS_ID");
    descriptor.addMapping(moneyOrderStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRMONEY_ORDER_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }
  
  public Descriptor buildNotificationTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.NotificationTypeRef.class);
    descriptor.addTableName("PTRNOTIFICATION_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRNOTIFICATION_TYPE_REF.NOTIFICATION_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRNOTIFICATION_TYPE_REF.NOTIFICATION_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrnotificationTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRNOTIFICATION_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping notificationTypeCodeMapping = new DirectToFieldMapping();
    notificationTypeCodeMapping.setAttributeName("notificationTypeCode");
    notificationTypeCodeMapping
        .setFieldName("PTRNOTIFICATION_TYPE_REF.NOTIFICATION_TYPE_CODE");
    descriptor.addMapping(notificationTypeCodeMapping);

    DirectToFieldMapping notificationTypeDescMapping = new DirectToFieldMapping();
    notificationTypeDescMapping.setAttributeName("notificationTypeDesc");
    notificationTypeDescMapping
        .setFieldName("PTRNOTIFICATION_TYPE_REF.NOTIFICATION_TYPE_DESC");
    notificationTypeDescMapping.setNullValue("");
    descriptor.addMapping(notificationTypeDescMapping);

    DirectToFieldMapping notificationTypeIdMapping = new DirectToFieldMapping();
    notificationTypeIdMapping.setAttributeName("notificationTypeId");
    notificationTypeIdMapping
        .setFieldName("PTRNOTIFICATION_TYPE_REF.NOTIFICATION_TYPE_ID");
    descriptor.addMapping(notificationTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRNOTIFICATION_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildNotifierCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.NotifierCodeRef.class);
    descriptor.addTableName("PTRNOTIFIER_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRNOTIFIER_CODE_REF.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRNOTIFIER_CODE_REF.ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrnotifierCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRNOTIFIER_CODE_REF.CODE");
    descriptor.addMapping(codeMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRNOTIFIER_CODE_REF.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRNOTIFIER_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRNOTIFIER_CODE_REF.ID");
    descriptor.addMapping(idMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRNOTIFIER_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildOccupationRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.OccupationRef.class);
    descriptor.addTableName("PTROCCUPATION_REF");
    descriptor.addPrimaryKeyFieldName("PTROCCUPATION_REF.OCCUPATION_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTROCCUPATION_REF.OCCUPATION_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtroccupationRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTROCCUPATION_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping occupationCodeMapping = new DirectToFieldMapping();
    occupationCodeMapping.setAttributeName("occupationCode");
    occupationCodeMapping.setFieldName("PTROCCUPATION_REF.OCCUPATION_CODE");
    descriptor.addMapping(occupationCodeMapping);

    DirectToFieldMapping occupationDescMapping = new DirectToFieldMapping();
    occupationDescMapping.setAttributeName("occupationDesc");
    occupationDescMapping.setFieldName("PTROCCUPATION_REF.OCCUPATION_DESC");
    occupationDescMapping.setNullValue("");
    descriptor.addMapping(occupationDescMapping);

    DirectToFieldMapping occupationIdMapping = new DirectToFieldMapping();
    occupationIdMapping.setAttributeName("occupationId");
    occupationIdMapping.setFieldName("PTROCCUPATION_REF.OCCUPATION_ID");
    descriptor.addMapping(occupationIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTROCCUPATION_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildPasswordHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.history.PasswordHistory.class);
    descriptor.addTableName("PTRPASSWORD_HISTORY");
    descriptor.addPrimaryKeyFieldName("PTRPASSWORD_HISTORY.PASSWORD_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPASSWORD_HISTORY.PASSWORD_ID");
    descriptor.setSequenceNumberName("PASSWORD_ID_SEQ");
    descriptor.setAlias("PtrpasswordHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping passwordMapping = new DirectToFieldMapping();
    passwordMapping.setAttributeName("password");
    passwordMapping.setFieldName("PTRPASSWORD_HISTORY.PASSWORD");
    descriptor.addMapping(passwordMapping);

    DirectToFieldMapping passwordDateMapping = new DirectToFieldMapping();
    passwordDateMapping.setAttributeName("passwordDate");
    passwordDateMapping.setFieldName("PTRPASSWORD_HISTORY.PASSWORD_DATE");
    descriptor.addMapping(passwordDateMapping);

    DirectToFieldMapping passwordIdMapping = new DirectToFieldMapping();
    passwordIdMapping.setAttributeName("passwordId");
    passwordIdMapping.setFieldName("PTRPASSWORD_HISTORY.PASSWORD_ID");
    descriptor.addMapping(passwordIdMapping);

    DirectToFieldMapping userMapping = new DirectToFieldMapping();
    userMapping.setAttributeName("user");
    userMapping.setFieldName("PTRPASSWORD_HISTORY.USER_ID");
    descriptor.addMapping(userMapping);

    return descriptor;
  }

  public Descriptor buildPaymentBehaviourRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PaymentBehaviourRef.class);
    descriptor.addTableName("PTRPAYMENT_BEHAVIOUR_REF");
    descriptor.addPrimaryKeyFieldName("PTRPAYMENT_BEHAVIOUR_REF.BEHAVIOUR_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPAYMENT_BEHAVIOUR_REF.BEHAVIOUR_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpaymentBehaviourRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping behaviourCodeMapping = new DirectToFieldMapping();
    behaviourCodeMapping.setAttributeName("behaviourCode");
    behaviourCodeMapping
        .setFieldName("PTRPAYMENT_BEHAVIOUR_REF.BEHAVIOUR_CODE");
    descriptor.addMapping(behaviourCodeMapping);

    DirectToFieldMapping behaviourDescMapping = new DirectToFieldMapping();
    behaviourDescMapping.setAttributeName("behaviourDesc");
    behaviourDescMapping
        .setFieldName("PTRPAYMENT_BEHAVIOUR_REF.BEHAVIOUR_DESC");
    behaviourDescMapping.setNullValue("");
    descriptor.addMapping(behaviourDescMapping);

    DirectToFieldMapping behaviourIdMapping = new DirectToFieldMapping();
    behaviourIdMapping.setAttributeName("behaviourId");
    behaviourIdMapping.setFieldName("PTRPAYMENT_BEHAVIOUR_REF.BEHAVIOUR_ID");
    descriptor.addMapping(behaviourIdMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPAYMENT_BEHAVIOUR_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPAYMENT_BEHAVIOUR_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildPaymentFrequencyRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PaymentFrequencyRef.class);
    descriptor.addTableName("PTRPAYMENT_FREQUENCY_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRPAYMENT_FREQUENCY_REF.PAYMENT_FREQUENCY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPAYMENT_FREQUENCY_REF.PAYMENT_FREQUENCY_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpaymentFrequencyRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPAYMENT_FREQUENCY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping paymentFrequencyCodeMapping = new DirectToFieldMapping();
    paymentFrequencyCodeMapping.setAttributeName("paymentFrequencyCode");
    paymentFrequencyCodeMapping
        .setFieldName("PTRPAYMENT_FREQUENCY_REF.PAYMENT_FREQUENCY_CODE");
    descriptor.addMapping(paymentFrequencyCodeMapping);

    DirectToFieldMapping paymentFrequencyDescMapping = new DirectToFieldMapping();
    paymentFrequencyDescMapping.setAttributeName("paymentFrequencyDesc");
    paymentFrequencyDescMapping
        .setFieldName("PTRPAYMENT_FREQUENCY_REF.PAYMENT_FREQUENCY_DESC");
    paymentFrequencyDescMapping.setNullValue("");
    descriptor.addMapping(paymentFrequencyDescMapping);

    DirectToFieldMapping paymentFrequencyIdMapping = new DirectToFieldMapping();
    paymentFrequencyIdMapping.setAttributeName("paymentFrequencyId");
    paymentFrequencyIdMapping
        .setFieldName("PTRPAYMENT_FREQUENCY_REF.PAYMENT_FREQUENCY_ID");
    descriptor.addMapping(paymentFrequencyIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPAYMENT_FREQUENCY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildPaymentInstallmentDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.PaymentInstallment.class);
    descriptor.addTableName("PTRPAYMENT_INSTALLMENT");
    descriptor
        .addPrimaryKeyFieldName("PTRPAYMENT_INSTALLMENT.INSTALLMENT_DUE_DATE");
    descriptor
        .addPrimaryKeyFieldName("PTRPAYMENT_INSTALLMENT.TREATMENT_PROCESS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrpaymentInstallment");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping commissionChargeAmtMapping = new DirectToFieldMapping();
    commissionChargeAmtMapping.setAttributeName("commissionChargeAmt");
    commissionChargeAmtMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.COMMISSION_CHARGE_AMT");
    descriptor.addMapping(commissionChargeAmtMapping);

    DirectToFieldMapping installmentDueAmountMapping = new DirectToFieldMapping();
    installmentDueAmountMapping.setAttributeName("installmentDueAmount");
    installmentDueAmountMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.INSTALLMENT_DUE_AMOUNT");
    descriptor.addMapping(installmentDueAmountMapping);

    DirectToFieldMapping installmentDueDateMapping = new DirectToFieldMapping();
    installmentDueDateMapping.setAttributeName("installmentDueDate");
    installmentDueDateMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.INSTALLMENT_DUE_DATE");
    descriptor.addMapping(installmentDueDateMapping);

    DirectToFieldMapping installmentPaidAmountMapping = new DirectToFieldMapping();
    installmentPaidAmountMapping.setAttributeName("installmentPaidAmount");
    installmentPaidAmountMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.INSTALLMENT_PAID_AMOUNT");
    descriptor.addMapping(installmentPaidAmountMapping);

    DirectToFieldMapping installmentStatusDateMapping = new DirectToFieldMapping();
    installmentStatusDateMapping.setAttributeName("installmentStatusDate");
    installmentStatusDateMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.INSTALLMENT_STATUS_DATE");
    descriptor.addMapping(installmentStatusDateMapping);

    DirectToFieldMapping interestChargeAmtMapping = new DirectToFieldMapping();
    interestChargeAmtMapping.setAttributeName("interestChargeAmt");
    interestChargeAmtMapping
        .setFieldName("PTRPAYMENT_INSTALLMENT.INTEREST_CHARGE_AMT");
    descriptor.addMapping(interestChargeAmtMapping);

    DirectToFieldMapping lateChargeAmtMapping = new DirectToFieldMapping();
    lateChargeAmtMapping.setAttributeName("lateChargeAmt");
    lateChargeAmtMapping.setFieldName("PTRPAYMENT_INSTALLMENT.LATE_CHARGE_AMT");
    descriptor.addMapping(lateChargeAmtMapping);

    DirectToFieldMapping openingBalAmtMapping = new DirectToFieldMapping();
    openingBalAmtMapping.setAttributeName("openingBalAmt");
    openingBalAmtMapping.setFieldName("PTRPAYMENT_INSTALLMENT.OPENING_BAL_AMT");
    descriptor.addMapping(openingBalAmtMapping);

    DirectToFieldMapping remainingAmtMapping = new DirectToFieldMapping();
    remainingAmtMapping.setAttributeName("remainingAmt");
    remainingAmtMapping.setFieldName("PTRPAYMENT_INSTALLMENT.REMAINING_AMT");
    descriptor.addMapping(remainingAmtMapping);

    OneToOneMapping installmentPaidStatusRefMapping = new OneToOneMapping();
    installmentPaidStatusRefMapping
        .setAttributeName("installmentPaidStatusRef");
    installmentPaidStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.InstallmentPaidStatusRef.class);
    installmentPaidStatusRefMapping.useBasicIndirection();
    installmentPaidStatusRefMapping.addForeignKeyFieldName(
        "PTRPAYMENT_INSTALLMENT.INSTALLMENT_PAID_STATUS_ID",
        "PTRINST_PAID_STATUS_REF.INST_PAID_STATUS_ID");
    descriptor.addMapping(installmentPaidStatusRefMapping);

    OneToOneMapping installmentStatusRefMapping = new OneToOneMapping();
    installmentStatusRefMapping.setAttributeName("installmentStatusRef");
    installmentStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.InstallmentStatusRef.class);
    installmentStatusRefMapping.useBasicIndirection();
    installmentStatusRefMapping.addForeignKeyFieldName(
        "PTRPAYMENT_INSTALLMENT.INSTALLMENT_STATUS_ID",
        "PTRINST_STATUS_REF.INST_STATUS_ID");
    descriptor.addMapping(installmentStatusRefMapping);

    OneToOneMapping parentPaymentPlanMapping = new OneToOneMapping();
    parentPaymentPlanMapping.setAttributeName("parentPaymentPlan");
    parentPaymentPlanMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.PaymentPlan.class);
    parentPaymentPlanMapping.useBasicIndirection();
    parentPaymentPlanMapping.addForeignKeyFieldName(
        "PTRPAYMENT_INSTALLMENT.TREATMENT_PROCESS_ID",
        "PTRPAYMENT_PLAN.TREATMENT_PROCESS_ID");
    descriptor.addMapping(parentPaymentPlanMapping);

    return descriptor;
  }

  public Descriptor buildPaymentLocationRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PaymentLocationRef.class);
    descriptor.addTableName("PTRPAYMENT_LOCATION_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRPAYMENT_LOCATION_REF.PAYMENT_LOCATION_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPAYMENT_LOCATION_REF.PAYMENT_LOCATION_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpaymentLocationRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPAYMENT_LOCATION_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping locationCategoryMapping = new DirectToFieldMapping();
    locationCategoryMapping.setAttributeName("locationCategory");
    locationCategoryMapping
        .setFieldName("PTRPAYMENT_LOCATION_REF.LOCATION_CATEGORY");
    descriptor.addMapping(locationCategoryMapping);

    DirectToFieldMapping locationNameMapping = new DirectToFieldMapping();
    locationNameMapping.setAttributeName("locationName");
    locationNameMapping.setFieldName("PTRPAYMENT_LOCATION_REF.LOCATION_NAME");
    descriptor.addMapping(locationNameMapping);

    DirectToFieldMapping paymentLocationIdMapping = new DirectToFieldMapping();
    paymentLocationIdMapping.setAttributeName("paymentLocationId");
    paymentLocationIdMapping
        .setFieldName("PTRPAYMENT_LOCATION_REF.PAYMENT_LOCATION_ID");
    descriptor.addMapping(paymentLocationIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPAYMENT_LOCATION_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildPaymentPlanDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.PaymentPlan.class);
    descriptor.addTableName("PTRPAYMENT_PLAN");

    // Inheritance properties.
    descriptor.getInheritancePolicy().setParentClass(
        com.profitera.descriptor.db.treatment.TreatmentProcess.class);

    // Descriptor properties.
    descriptor.setAlias("PtrpaymentPlan");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping commissionChargeRateMapping = new DirectToFieldMapping();
    commissionChargeRateMapping.setAttributeName("commissionChargeRate");
    commissionChargeRateMapping
        .setFieldName("PTRPAYMENT_PLAN.COMMISSION_CHARGE_RATE");
    descriptor.addMapping(commissionChargeRateMapping);

    DirectToFieldMapping interestChargeRateMapping = new DirectToFieldMapping();
    interestChargeRateMapping.setAttributeName("interestChargeRate");
    interestChargeRateMapping
        .setFieldName("PTRPAYMENT_PLAN.INTEREST_CHARGE_RATE");
    descriptor.addMapping(interestChargeRateMapping);

    DirectToFieldMapping lateChargeRateMapping = new DirectToFieldMapping();
    lateChargeRateMapping.setAttributeName("lateChargeRate");
    lateChargeRateMapping.setFieldName("PTRPAYMENT_PLAN.LATE_CHARGE_RATE");
    descriptor.addMapping(lateChargeRateMapping);

    DirectToFieldMapping noOfInstallmentsMapping = new DirectToFieldMapping();
    noOfInstallmentsMapping.setAttributeName("noOfInstallments");
    noOfInstallmentsMapping.setFieldName("PTRPAYMENT_PLAN.NO_OF_INSTALLMENTS");
    descriptor.addMapping(noOfInstallmentsMapping);

    OneToOneMapping installmentUomMapping = new OneToOneMapping();
    installmentUomMapping.setAttributeName("installmentUom");
    installmentUomMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.UomMeasureRef.class);
    installmentUomMapping.useBasicIndirection();
    installmentUomMapping.addForeignKeyFieldName(
        "PTRPAYMENT_PLAN.INSTALLMENT_UOM_ID", "PTRUOM_MEASURE_REF.UOM_ID");
    descriptor.addMapping(installmentUomMapping);

    OneToManyMapping paymentInstallmentsMapping = new OneToManyMapping();
    paymentInstallmentsMapping.setAttributeName("paymentInstallments");
    paymentInstallmentsMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.PaymentInstallment.class);
    paymentInstallmentsMapping.useBasicIndirection();
    paymentInstallmentsMapping.addTargetForeignKeyFieldName(
        "PTRPAYMENT_INSTALLMENT.TREATMENT_PROCESS_ID",
        "PTRPAYMENT_PLAN.TREATMENT_PROCESS_ID");
    descriptor.addMapping(paymentInstallmentsMapping);

    return descriptor;
  }

  public Descriptor buildPaymentTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PaymentTypeRef.class);
    descriptor.addTableName("PTRPAYMENT_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRPAYMENT_TYPE_REF.PAY_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPAYMENT_TYPE_REF.PAY_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpaymentTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPAYMENT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping payTypeCodeMapping = new DirectToFieldMapping();
    payTypeCodeMapping.setAttributeName("payTypeCode");
    payTypeCodeMapping.setFieldName("PTRPAYMENT_TYPE_REF.PAY_TYPE_CODE");
    descriptor.addMapping(payTypeCodeMapping);

    DirectToFieldMapping payTypeDescMapping = new DirectToFieldMapping();
    payTypeDescMapping.setAttributeName("payTypeDesc");
    payTypeDescMapping.setFieldName("PTRPAYMENT_TYPE_REF.PAY_TYPE_DESC");
    payTypeDescMapping.setNullValue("");
    descriptor.addMapping(payTypeDescMapping);

    DirectToFieldMapping payTypeIdMapping = new DirectToFieldMapping();
    payTypeIdMapping.setAttributeName("payTypeId");
    payTypeIdMapping.setFieldName("PTRPAYMENT_TYPE_REF.PAY_TYPE_ID");
    descriptor.addMapping(payTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPAYMENT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }
  
  public Descriptor buildPlaceACallDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.PlaceACall.class);
    descriptor.addTableName("PTRPLACE_A_CALL");

    // Inheritance properties.
    descriptor.getInheritancePolicy().setParentClass(
        com.profitera.descriptor.db.treatment.TreatmentProcess.class);

    // Descriptor properties.
    descriptor.setAlias("PtrplaceACall");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping callDurationMapping = new DirectToFieldMapping();
    callDurationMapping.setAttributeName("callDuration");
    callDurationMapping.setFieldName("PTRPLACE_A_CALL.CALL_DURATION");
    descriptor.addMapping(callDurationMapping);

    DirectToFieldMapping callTimeMapping = new DirectToFieldMapping();
    callTimeMapping.setAttributeName("callTime");
    callTimeMapping.setFieldName("PTRPLACE_A_CALL.CALL_TIME");
    descriptor.addMapping(callTimeMapping);

    DirectToFieldMapping contactNoMapping = new DirectToFieldMapping();
    contactNoMapping.setAttributeName("contactNo");
    contactNoMapping.setFieldName("PTRPLACE_A_CALL.CONTACT_NO");
    descriptor.addMapping(contactNoMapping);

    DirectToFieldMapping contactPersonNameMapping = new DirectToFieldMapping();
    contactPersonNameMapping.setAttributeName("contactPersonName");
    contactPersonNameMapping
        .setFieldName("PTRPLACE_A_CALL.CONTACT_PERSON_NAME");
    descriptor.addMapping(contactPersonNameMapping);

    DirectToFieldMapping scheduledMapping = new DirectToFieldMapping();
    scheduledMapping.setAttributeName("scheduled");
    scheduledMapping.setFieldName("PTRPLACE_A_CALL.SCHEDULED");
    descriptor.addMapping(scheduledMapping);

    OneToOneMapping callUomRefMapping = new OneToOneMapping();
    callUomRefMapping.setAttributeName("callUomRef");
    callUomRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.UomMeasureRef.class);
    callUomRefMapping.useBasicIndirection();
    callUomRefMapping.addForeignKeyFieldName("PTRPLACE_A_CALL.CALL_UOM_ID",
        "PTRUOM_MEASURE_REF.UOM_ID");
    descriptor.addMapping(callUomRefMapping);

    return descriptor;
  }

  public Descriptor buildPremisesRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PremisesRef.class);
    descriptor.addTableName("PTRPREMISES_REF");
    descriptor.addPrimaryKeyFieldName("PTRPREMISES_REF.PREMISES_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPREMISES_REF.PREMISES_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpremisesRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPREMISES_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping premisesCodeMapping = new DirectToFieldMapping();
    premisesCodeMapping.setAttributeName("premisesCode");
    premisesCodeMapping.setFieldName("PTRPREMISES_REF.PREMISES_CODE");
    descriptor.addMapping(premisesCodeMapping);

    DirectToFieldMapping premisesDescMapping = new DirectToFieldMapping();
    premisesDescMapping.setAttributeName("premisesDesc");
    premisesDescMapping.setFieldName("PTRPREMISES_REF.PREMISES_DESC");
    premisesDescMapping.setNullValue("");
    descriptor.addMapping(premisesDescMapping);

    DirectToFieldMapping premisesIdMapping = new DirectToFieldMapping();
    premisesIdMapping.setAttributeName("premisesId");
    premisesIdMapping.setFieldName("PTRPREMISES_REF.PREMISES_ID");
    descriptor.addMapping(premisesIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPREMISES_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildPriorityRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.PriorityRef.class);
    descriptor.addTableName("PTRPRIORITY_REF");
    descriptor.addPrimaryKeyFieldName("PTRPRIORITY_REF.PRIORITY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPRIORITY_REF.PRIORITY_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrpriorityRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPRIORITY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping priorityCodeMapping = new DirectToFieldMapping();
    priorityCodeMapping.setAttributeName("priorityCode");
    priorityCodeMapping.setFieldName("PTRPRIORITY_REF.PRIORITY_CODE");
    descriptor.addMapping(priorityCodeMapping);

    DirectToFieldMapping priorityDescMapping = new DirectToFieldMapping();
    priorityDescMapping.setAttributeName("priorityDesc");
    priorityDescMapping.setFieldName("PTRPRIORITY_REF.PRIORITY_DESC");
    priorityDescMapping.setNullValue("");
    descriptor.addMapping(priorityDescMapping);

    DirectToFieldMapping priorityIdMapping = new DirectToFieldMapping();
    priorityIdMapping.setAttributeName("priorityId");
    priorityIdMapping.setFieldName("PTRPRIORITY_REF.PRIORITY_ID");
    descriptor.addMapping(priorityIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPRIORITY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildProcessStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProcessStatusRef.class);
    descriptor.addTableName("PTRPROCESS_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRPROCESS_STATUS_REF.PROC_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPROCESS_STATUS_REF.PROC_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrprocessStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPROCESS_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping procStatusCodeMapping = new DirectToFieldMapping();
    procStatusCodeMapping.setAttributeName("procStatusCode");
    procStatusCodeMapping
        .setFieldName("PTRPROCESS_STATUS_REF.PROCESS_STATUS_CODE");
    descriptor.addMapping(procStatusCodeMapping);

    DirectToFieldMapping procStatusDescMapping = new DirectToFieldMapping();
    procStatusDescMapping.setAttributeName("procStatusDesc");
    procStatusDescMapping
        .setFieldName("PTRPROCESS_STATUS_REF.PROC_STATUS_DESC");
    procStatusDescMapping.setNullValue("");
    descriptor.addMapping(procStatusDescMapping);

    DirectToFieldMapping procStatusIdMapping = new DirectToFieldMapping();
    procStatusIdMapping.setAttributeName("procStatusId");
    procStatusIdMapping.setFieldName("PTRPROCESS_STATUS_REF.PROC_STATUS_ID");
    descriptor.addMapping(procStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPROCESS_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildProcessTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProcessTypeRef.class);
    descriptor.addTableName("PTRPROCESS_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRPROCESS_TYPE_REF.PROCESS_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPROCESS_TYPE_REF.PROCESS_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrprocessTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPROCESS_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping processTypeCodeMapping = new DirectToFieldMapping();
    processTypeCodeMapping.setAttributeName("processTypeCode");
    processTypeCodeMapping
        .setFieldName("PTRPROCESS_TYPE_REF.PROCESS_TYPE_CODE");
    descriptor.addMapping(processTypeCodeMapping);

    DirectToFieldMapping processTypeDescMapping = new DirectToFieldMapping();
    processTypeDescMapping.setAttributeName("processTypeDesc");
    processTypeDescMapping
        .setFieldName("PTRPROCESS_TYPE_REF.PROCESS_TYPE_DESC");
    processTypeDescMapping.setNullValue("");
    descriptor.addMapping(processTypeDescMapping);

    DirectToFieldMapping processTypeIdMapping = new DirectToFieldMapping();
    processTypeIdMapping.setAttributeName("processTypeId");
    processTypeIdMapping.setFieldName("PTRPROCESS_TYPE_REF.PROCESS_TYPE_ID");
    descriptor.addMapping(processTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPROCESS_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildProductBillingCycleRelDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.relation.ProductBillingCycleRel.class);
    descriptor.addTableName("PTRPRODUCT_BILLING_CYCLE_REL");
    descriptor
        .addPrimaryKeyFieldName("PTRPRODUCT_BILLING_CYCLE_REL.PRODUCT_TYPE_ID");
    descriptor
        .addPrimaryKeyFieldName("PTRPRODUCT_BILLING_CYCLE_REL.BILLING_CYCLE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrproductBillingCycleRel");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    OneToOneMapping billingCycleRefMapping = new OneToOneMapping();
    billingCycleRefMapping.setAttributeName("billingCycleRef");
    billingCycleRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.BillingCycleRef.class);
    billingCycleRefMapping.useBasicIndirection();
    billingCycleRefMapping.addForeignKeyFieldName(
        "PTRPRODUCT_BILLING_CYCLE_REL.BILLING_CYCLE_ID",
        "PTRBILLING_CYCLE_REF.BILLING_CYCLE_ID");
    descriptor.addMapping(billingCycleRefMapping);

    OneToOneMapping productTypeRefMapping = new OneToOneMapping();
    productTypeRefMapping.setAttributeName("productTypeRef");
    productTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProductTypeRef.class);
    productTypeRefMapping.useBasicIndirection();
    productTypeRefMapping.addForeignKeyFieldName(
        "PTRPRODUCT_BILLING_CYCLE_REL.PRODUCT_TYPE_ID",
        "PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_ID");
    descriptor.addMapping(productTypeRefMapping);

    return descriptor;
  }

  public Descriptor buildProductTypeCategoryRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProductTypeCategoryRef.class);
    descriptor.addTableName("PTRPRODUCT_TYPE_CATEGORY_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrproductTypeCategoryRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping productTypeCategoryCodeMapping = new DirectToFieldMapping();
    productTypeCategoryCodeMapping.setAttributeName("productTypeCategoryCode");
    productTypeCategoryCodeMapping
        .setFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_CODE");
    descriptor.addMapping(productTypeCategoryCodeMapping);

    DirectToFieldMapping productTypeCategoryDescMapping = new DirectToFieldMapping();
    productTypeCategoryDescMapping.setAttributeName("productTypeCategoryDesc");
    productTypeCategoryDescMapping
        .setFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_DESC");
    productTypeCategoryDescMapping.setNullValue("");
    descriptor.addMapping(productTypeCategoryDescMapping);

    DirectToFieldMapping productTypeCategoryIdMapping = new DirectToFieldMapping();
    productTypeCategoryIdMapping.setAttributeName("productTypeCategoryId");
    productTypeCategoryIdMapping
        .setFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_ID");
    descriptor.addMapping(productTypeCategoryIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRPRODUCT_TYPE_CATEGORY_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToManyMapping productTypeCategoryRefMapping = new OneToManyMapping();
    productTypeCategoryRefMapping.setAttributeName("productTypeCategoryRef");
    productTypeCategoryRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProductTypeRef.class);
    productTypeCategoryRefMapping.useBasicIndirection();
    productTypeCategoryRefMapping
        .useCollectionClass(oracle.toplink.indirection.IndirectList.class);
    productTypeCategoryRefMapping.addTargetForeignKeyFieldName(
        "PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_CATEGORY_ID",
        "PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_ID");
    descriptor.addMapping(productTypeCategoryRefMapping);

    return descriptor;
  }

  public Descriptor buildProductTypeLevelRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProductTypeLevelRef.class);
    descriptor.addTableName("PTRPRODUCT_TYPE_LEVEL_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrproductTypeLevelRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPRODUCT_TYPE_LEVEL_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping productTypeLevelCodeMapping = new DirectToFieldMapping();
    productTypeLevelCodeMapping.setAttributeName("productTypeLevelCode");
    productTypeLevelCodeMapping
        .setFieldName("PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_CODE");
    descriptor.addMapping(productTypeLevelCodeMapping);

    DirectToFieldMapping productTypeLevelDescMapping = new DirectToFieldMapping();
    productTypeLevelDescMapping.setAttributeName("productTypeLevelDesc");
    productTypeLevelDescMapping
        .setFieldName("PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_DESC");
    productTypeLevelDescMapping.setNullValue("");
    descriptor.addMapping(productTypeLevelDescMapping);

    DirectToFieldMapping productTypeLevelIdMapping = new DirectToFieldMapping();
    productTypeLevelIdMapping.setAttributeName("productTypeLevelId");
    productTypeLevelIdMapping
        .setFieldName("PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_ID");
    descriptor.addMapping(productTypeLevelIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPRODUCT_TYPE_LEVEL_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildProductTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProductTypeRef.class);
    descriptor.addTableName("PTRPRODUCT_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrproductTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPRODUCT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping productTypeAbbreviationMapping = new DirectToFieldMapping();
    productTypeAbbreviationMapping.setAttributeName("productTypeAbbreviation");
    productTypeAbbreviationMapping
        .setFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_ABBREVIATION");
    descriptor.addMapping(productTypeAbbreviationMapping);

    DirectToFieldMapping productTypeCodeMapping = new DirectToFieldMapping();
    productTypeCodeMapping.setAttributeName("productTypeCode");
    productTypeCodeMapping
        .setFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_CODE");
    descriptor.addMapping(productTypeCodeMapping);

    DirectToFieldMapping productTypeDescMapping = new DirectToFieldMapping();
    productTypeDescMapping.setAttributeName("productTypeDesc");
    productTypeDescMapping
        .setFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_DESC");
    productTypeDescMapping.setNullValue("");
    descriptor.addMapping(productTypeDescMapping);

    DirectToFieldMapping productTypeGroupMapping = new DirectToFieldMapping();
    productTypeGroupMapping.setAttributeName("productTypeGroup");
    productTypeGroupMapping
        .setFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_GROUP");
    descriptor.addMapping(productTypeGroupMapping);

    DirectToFieldMapping productTypeIdMapping = new DirectToFieldMapping();
    productTypeIdMapping.setAttributeName("productTypeId");
    productTypeIdMapping.setFieldName("PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_ID");
    descriptor.addMapping(productTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPRODUCT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    OneToOneMapping productTypeCategoryMapping = new OneToOneMapping();
    productTypeCategoryMapping.setAttributeName("productTypeCategory");
    productTypeCategoryMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProductTypeCategoryRef.class);
    productTypeCategoryMapping.useBasicIndirection();
    productTypeCategoryMapping.addForeignKeyFieldName(
        "PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_CATEGORY_ID",
        "PTRPRODUCT_TYPE_CATEGORY_REF.PRODUCT_TYPE_CATEGORY_ID");
    descriptor.addMapping(productTypeCategoryMapping);

    OneToOneMapping productTypeLevelRefMapping = new OneToOneMapping();
    productTypeLevelRefMapping.setAttributeName("productTypeLevelRef");
    productTypeLevelRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProductTypeLevelRef.class);
    productTypeLevelRefMapping.useBasicIndirection();
    productTypeLevelRefMapping.addForeignKeyFieldName(
        "PTRPRODUCT_TYPE_REF.PRODUCT_TYPE_LEVEL_ID",
        "PTRPRODUCT_TYPE_LEVEL_REF.PRODUCT_TYPE_LEVEL_ID");
    descriptor.addMapping(productTypeLevelRefMapping);

    return descriptor;
  }

  public Descriptor buildProfileSegmentRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProfileSegmentRef.class);
    descriptor.addTableName("PTRPROFILE_SEGMENT_REF");
    descriptor.addPrimaryKeyFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrprofileSegmentRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPROFILE_SEGMENT_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping minimumScoreMapping = new DirectToFieldMapping();
    minimumScoreMapping.setAttributeName("minimumScore");
    minimumScoreMapping.setFieldName("PTRPROFILE_SEGMENT_REF.MINIMUM_SCORE");
    descriptor.addMapping(minimumScoreMapping);

    DirectToFieldMapping profileCodeMapping = new DirectToFieldMapping();
    profileCodeMapping.setAttributeName("profileCode");
    profileCodeMapping.setFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_CODE");
    descriptor.addMapping(profileCodeMapping);

    DirectToFieldMapping profileDescMapping = new DirectToFieldMapping();
    profileDescMapping.setAttributeName("profileDesc");
    profileDescMapping.setFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_DESC");
    profileDescMapping.setNullValue("");
    descriptor.addMapping(profileDescMapping);

    DirectToFieldMapping profileIdMapping = new DirectToFieldMapping();
    profileIdMapping.setAttributeName("profileId");
    profileIdMapping.setFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_ID");
    descriptor.addMapping(profileIdMapping);

    DirectToFieldMapping recoveryPotentialMapping = new DirectToFieldMapping();
    recoveryPotentialMapping.setAttributeName("recoveryPotential");
    recoveryPotentialMapping
        .setFieldName("PTRPROFILE_SEGMENT_REF.PROFILE_REC_POTENTIAL");
    descriptor.addMapping(recoveryPotentialMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPROFILE_SEGMENT_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }


  public Descriptor buildRaceTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.RaceTypeRef.class);
    descriptor.addTableName("PTRRACE_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRRACE_TYPE_REF.RACE_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRACE_TYPE_REF.RACE_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrraceTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRRACE_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping raceTypeCodeMapping = new DirectToFieldMapping();
    raceTypeCodeMapping.setAttributeName("raceTypeCode");
    raceTypeCodeMapping.setFieldName("PTRRACE_TYPE_REF.RACE_TYPE_CODE");
    descriptor.addMapping(raceTypeCodeMapping);

    DirectToFieldMapping raceTypeDescMapping = new DirectToFieldMapping();
    raceTypeDescMapping.setAttributeName("raceTypeDesc");
    raceTypeDescMapping.setFieldName("PTRRACE_TYPE_REF.RACE_TYPE_DESC");
    raceTypeDescMapping.setNullValue("");
    descriptor.addMapping(raceTypeDescMapping);

    DirectToFieldMapping raceTypeIdMapping = new DirectToFieldMapping();
    raceTypeIdMapping.setAttributeName("raceTypeId");
    raceTypeIdMapping.setFieldName("PTRRACE_TYPE_REF.RACE_TYPE_ID");
    descriptor.addMapping(raceTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRRACE_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildReportTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ReportTypeRef.class);
    descriptor.addTableName("PTRREPORT_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRREPORT_TYPE_REF.REPORT_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRREPORT_TYPE_REF.REPORT_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrreportTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRREPORT_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping reportTypeCodeMapping = new DirectToFieldMapping();
    reportTypeCodeMapping.setAttributeName("reportTypeCode");
    reportTypeCodeMapping.setFieldName("PTRREPORT_TYPE_REF.REPORT_TYPE_CODE");
    descriptor.addMapping(reportTypeCodeMapping);

    DirectToFieldMapping reportTypeDescMapping = new DirectToFieldMapping();
    reportTypeDescMapping.setAttributeName("reportTypeDesc");
    reportTypeDescMapping.setFieldName("PTRREPORT_TYPE_REF.REPORT_TYPE_DESC");
    reportTypeDescMapping.setNullValue("");
    descriptor.addMapping(reportTypeDescMapping);

    DirectToFieldMapping reportTypeIdMapping = new DirectToFieldMapping();
    reportTypeIdMapping.setAttributeName("reportTypeId");
    reportTypeIdMapping.setFieldName("PTRREPORT_TYPE_REF.REPORT_TYPE_ID");
    descriptor.addMapping(reportTypeIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRREPORT_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildRiskLevelRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.RiskLevelRef.class);
    descriptor.addTableName("PTRRISK_LEVEL_REF");
    descriptor.addPrimaryKeyFieldName("PTRRISK_LEVEL_REF.RISK_LEVEL_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRISK_LEVEL_REF.RISK_LEVEL_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrriskLevelRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRRISK_LEVEL_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping minimumScoreMapping = new DirectToFieldMapping();
    minimumScoreMapping.setAttributeName("minimumScore");
    minimumScoreMapping.setFieldName("PTRRISK_LEVEL_REF.MINIMUM_SCORE");
    descriptor.addMapping(minimumScoreMapping);

    DirectToFieldMapping riskLevelCodeMapping = new DirectToFieldMapping();
    riskLevelCodeMapping.setAttributeName("riskLevelCode");
    riskLevelCodeMapping.setFieldName("PTRRISK_LEVEL_REF.RISK_LEVEL_CODE");
    descriptor.addMapping(riskLevelCodeMapping);

    DirectToFieldMapping riskLevelDescMapping = new DirectToFieldMapping();
    riskLevelDescMapping.setAttributeName("riskLevelDesc");
    riskLevelDescMapping.setFieldName("PTRRISK_LEVEL_REF.RISK_LEVEL_DESC");
    riskLevelDescMapping.setNullValue("");
    descriptor.addMapping(riskLevelDescMapping);

    DirectToFieldMapping riskLevelIdMapping = new DirectToFieldMapping();
    riskLevelIdMapping.setAttributeName("riskLevelId");
    riskLevelIdMapping.setFieldName("PTRRISK_LEVEL_REF.RISK_LEVEL_ID");
    descriptor.addMapping(riskLevelIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRRISK_LEVEL_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildRiskStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.RiskStatusRef.class);
    descriptor.addTableName("PTRRISK_STATUS_REF");
    descriptor.addPrimaryKeyFieldName("PTRRISK_STATUS_REF.RISK_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRISK_STATUS_REF.RISK_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrriskStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRRISK_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping riskCodeMapping = new DirectToFieldMapping();
    riskCodeMapping.setAttributeName("riskCode");
    riskCodeMapping.setFieldName("PTRRISK_STATUS_REF.RISK_CODE");
    descriptor.addMapping(riskCodeMapping);

    DirectToFieldMapping riskDescMapping = new DirectToFieldMapping();
    riskDescMapping.setAttributeName("riskDesc");
    riskDescMapping.setFieldName("PTRRISK_STATUS_REF.RISK_DESC");
    riskDescMapping.setNullValue("");
    descriptor.addMapping(riskDescMapping);

    DirectToFieldMapping riskIdMapping = new DirectToFieldMapping();
    riskIdMapping.setAttributeName("riskId");
    riskIdMapping.setFieldName("PTRRISK_STATUS_REF.RISK_ID");
    descriptor.addMapping(riskIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRRISK_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildRoleAccessRelDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.relation.RoleAccessRel.class);
    descriptor.addTableName("PTRROLE_ACCESS_REL");
    descriptor.addPrimaryKeyFieldName("PTRROLE_ACCESS_REL.ACCESS_RIGHTS_ID");
    descriptor.addPrimaryKeyFieldName("PTRROLE_ACCESS_REL.ROLE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrroleAccessRel");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    OneToOneMapping accessRightsRefMapping = new OneToOneMapping();
    accessRightsRefMapping.setAttributeName("accessRightsRef");
    accessRightsRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AccessRightsRef.class);
    accessRightsRefMapping.useBasicIndirection();
    accessRightsRefMapping.addForeignKeyFieldName(
        "PTRROLE_ACCESS_REL.ACCESS_RIGHTS_ID",
        "PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_ID");
    descriptor.addMapping(accessRightsRefMapping);

    OneToOneMapping userRoleRefMapping = new OneToOneMapping();
    userRoleRefMapping.setAttributeName("userRoleRef");
    userRoleRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.UserRoleRef.class);
    userRoleRefMapping.useBasicIndirection();
    userRoleRefMapping.addForeignKeyFieldName("PTRROLE_ACCESS_REL.ROLE_ID",
        "PTRUSER_ROLE_REF.ROLE_ID");
    descriptor.addMapping(userRoleRefMapping);

    return descriptor;
  }

  public Descriptor buildRuleBomDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.rule.RuleBom.class);
    descriptor.addTableName("PTRRULE_BOM");
    descriptor.addPrimaryKeyFieldName("PTRRULE_BOM.BOM_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRULE_BOM.BOM_ID");
    descriptor.setSequenceNumberName("BOM_ID_SEQ");
    descriptor.setAlias("PtrruleBom");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping agentCodeMapping = new DirectToFieldMapping();
    agentCodeMapping.setAttributeName("agentCode");
    agentCodeMapping.setFieldName("PTRRULE_BOM.AGENT_CODE");
    descriptor.addMapping(agentCodeMapping);

    DirectToFieldMapping bomIdMapping = new DirectToFieldMapping();
    bomIdMapping.setAttributeName("bomId");
    bomIdMapping.setFieldName("PTRRULE_BOM.BOM_ID");
    descriptor.addMapping(bomIdMapping);

    DirectToFieldMapping bomNameMapping = new DirectToFieldMapping();
    bomNameMapping.setAttributeName("bomName");
    bomNameMapping.setFieldName("PTRRULE_BOM.BOM_NAME");
    descriptor.addMapping(bomNameMapping);

    DirectToFieldMapping contentMapping = new DirectToFieldMapping();
    contentMapping.setAttributeName("content");
    contentMapping.setFieldName("PTRRULE_BOM.CONTENT");
    descriptor.addMapping(contentMapping);

    DirectToFieldMapping createdByMapping = new DirectToFieldMapping();
    createdByMapping.setAttributeName("createdBy");
    createdByMapping.setFieldName("PTRRULE_BOM.CREATED_BY");
    descriptor.addMapping(createdByMapping);

    DirectToFieldMapping createdDateMapping = new DirectToFieldMapping();
    createdDateMapping.setAttributeName("createdDate");
    createdDateMapping.setFieldName("PTRRULE_BOM.CREATED_DATE");
    descriptor.addMapping(createdDateMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRRULE_BOM.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping updatedByMapping = new DirectToFieldMapping();
    updatedByMapping.setAttributeName("updatedBy");
    updatedByMapping.setFieldName("PTRRULE_BOM.UPDATED_BY");
    descriptor.addMapping(updatedByMapping);

    DirectToFieldMapping updatedDateMapping = new DirectToFieldMapping();
    updatedDateMapping.setAttributeName("updatedDate");
    updatedDateMapping.setFieldName("PTRRULE_BOM.UPDATED_DATE");
    descriptor.addMapping(updatedDateMapping);

    OneToManyMapping rulesMapping = new OneToManyMapping();
    rulesMapping.setAttributeName("rules");
    rulesMapping.setReferenceClass(com.profitera.descriptor.db.rule.Rule.class);
    rulesMapping.useBasicIndirection();
    rulesMapping.addTargetForeignKeyFieldName("PTRRULE.BOM_ID",
        "PTRRULE_BOM.BOM_ID");
    descriptor.addMapping(rulesMapping);

    return descriptor;
  }

  public Descriptor buildRuleDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.rule.Rule.class);
    descriptor.addTableName("PTRRULE");
    descriptor.addPrimaryKeyFieldName("PTRRULE.RULE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRULE.RULE_ID");
    descriptor.setSequenceNumberName("RULE_ID_SEQ");
    descriptor.setAlias("Ptrrule");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping contentMapping = new DirectToFieldMapping();
    contentMapping.setAttributeName("content");
    contentMapping.setFieldName("PTRRULE.CONTENT");
    descriptor.addMapping(contentMapping);

    DirectToFieldMapping createdByMapping = new DirectToFieldMapping();
    createdByMapping.setAttributeName("createdBy");
    createdByMapping.setFieldName("PTRRULE.CREATED_BY");
    descriptor.addMapping(createdByMapping);

    DirectToFieldMapping createdDateMapping = new DirectToFieldMapping();
    createdDateMapping.setAttributeName("createdDate");
    createdDateMapping.setFieldName("PTRRULE.CREATED_DATE");
    descriptor.addMapping(createdDateMapping);

    DirectToFieldMapping deletedMapping = new DirectToFieldMapping();
    deletedMapping.setAttributeName("deleted");
    deletedMapping.setFieldName("PTRRULE.DELETED");
    descriptor.addMapping(deletedMapping);

    DirectToFieldMapping deployDateMapping = new DirectToFieldMapping();
    deployDateMapping.setAttributeName("deployDate");
    deployDateMapping.setFieldName("PTRRULE.DEPLOY_DATE");
    descriptor.addMapping(deployDateMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRRULE.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping ruleIdMapping = new DirectToFieldMapping();
    ruleIdMapping.setAttributeName("ruleId");
    ruleIdMapping.setFieldName("PTRRULE.RULE_ID");
    descriptor.addMapping(ruleIdMapping);

    DirectToFieldMapping ruleNameMapping = new DirectToFieldMapping();
    ruleNameMapping.setAttributeName("ruleName");
    ruleNameMapping.setFieldName("PTRRULE.RULE_NAME");
    descriptor.addMapping(ruleNameMapping);

    DirectToFieldMapping statusMapping = new DirectToFieldMapping();
    statusMapping.setAttributeName("status");
    statusMapping.setFieldName("PTRRULE.STATUS");
    descriptor.addMapping(statusMapping);

    DirectToFieldMapping updatedByMapping = new DirectToFieldMapping();
    updatedByMapping.setAttributeName("updatedBy");
    updatedByMapping.setFieldName("PTRRULE.UPDATED_BY");
    descriptor.addMapping(updatedByMapping);

    DirectToFieldMapping updatedDateMapping = new DirectToFieldMapping();
    updatedDateMapping.setAttributeName("updatedDate");
    updatedDateMapping.setFieldName("PTRRULE.UPDATED_DATE");
    descriptor.addMapping(updatedDateMapping);

    OneToOneMapping ruleBomMapping = new OneToOneMapping();
    ruleBomMapping.setAttributeName("ruleBom");
    ruleBomMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.RuleBom.class);
    ruleBomMapping.useBasicIndirection();
    ruleBomMapping.addForeignKeyFieldName("PTRRULE.BOM_ID",
        "PTRRULE_BOM.BOM_ID");
    descriptor.addMapping(ruleBomMapping);

    OneToOneMapping ruleGroupMapping = new OneToOneMapping();
    ruleGroupMapping.setAttributeName("ruleGroup");
    ruleGroupMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.RuleGroup.class);
    ruleGroupMapping.useBasicIndirection();
    ruleGroupMapping.addForeignKeyFieldName("PTRRULE.GROUP_ID",
        "PTRRULE_GROUP.GROUP_ID");
    descriptor.addMapping(ruleGroupMapping);

    OneToManyMapping historyMapping = new OneToManyMapping();
    historyMapping.setAttributeName("history");
    historyMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.RuleHistory.class);
    historyMapping.useBasicIndirection();
    historyMapping.addTargetForeignKeyFieldName("PTRRULE_HISTORY.RULE_ID",
        "PTRRULE.RULE_ID");
    descriptor.addMapping(historyMapping);

    return descriptor;
  }

  public Descriptor buildRuleGroupDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.rule.RuleGroup.class);
    descriptor.addTableName("PTRRULE_GROUP");
    descriptor.addPrimaryKeyFieldName("PTRRULE_GROUP.GROUP_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRRULE_GROUP.GROUP_ID");
    descriptor.setSequenceNumberName("GROUP_ID_SEQ");
    descriptor.setAlias("PtrruleGroup");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping createdByMapping = new DirectToFieldMapping();
    createdByMapping.setAttributeName("createdBy");
    createdByMapping.setFieldName("PTRRULE_GROUP.CREATED_BY");
    descriptor.addMapping(createdByMapping);

    DirectToFieldMapping createdDateMapping = new DirectToFieldMapping();
    createdDateMapping.setAttributeName("createdDate");
    createdDateMapping.setFieldName("PTRRULE_GROUP.CREATED_DATE");
    descriptor.addMapping(createdDateMapping);

    DirectToFieldMapping deployDateMapping = new DirectToFieldMapping();
    deployDateMapping.setAttributeName("deployDate");
    deployDateMapping.setFieldName("PTRRULE_GROUP.DEPLOY_DATE");
    descriptor.addMapping(deployDateMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRRULE_GROUP.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping groupIdMapping = new DirectToFieldMapping();
    groupIdMapping.setAttributeName("groupId");
    groupIdMapping.setFieldName("PTRRULE_GROUP.GROUP_ID");
    descriptor.addMapping(groupIdMapping);

    DirectToFieldMapping groupNameMapping = new DirectToFieldMapping();
    groupNameMapping.setAttributeName("groupName");
    groupNameMapping.setFieldName("PTRRULE_GROUP.GROUP_NAME");
    descriptor.addMapping(groupNameMapping);

    DirectToFieldMapping updatedByMapping = new DirectToFieldMapping();
    updatedByMapping.setAttributeName("updatedBy");
    updatedByMapping.setFieldName("PTRRULE_GROUP.UPDATED_BY");
    descriptor.addMapping(updatedByMapping);

    DirectToFieldMapping updatedDateMapping = new DirectToFieldMapping();
    updatedDateMapping.setAttributeName("updatedDate");
    updatedDateMapping.setFieldName("PTRRULE_GROUP.UPDATED_DATE");
    descriptor.addMapping(updatedDateMapping);

    OneToOneMapping parentGroupMapping = new OneToOneMapping();
    parentGroupMapping.setAttributeName("parentGroup");
    parentGroupMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.RuleGroup.class);
    parentGroupMapping.useBasicIndirection();
    parentGroupMapping.addForeignKeyFieldName("PTRRULE_GROUP.PARENT_GROUP_ID",
        "PTRRULE_GROUP.GROUP_ID");
    descriptor.addMapping(parentGroupMapping);

    OneToManyMapping childGroupsMapping = new OneToManyMapping();
    childGroupsMapping.setAttributeName("childGroups");
    childGroupsMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.RuleGroup.class);
    childGroupsMapping.useBasicIndirection();
    childGroupsMapping.addTargetForeignKeyFieldName(
        "PTRRULE_GROUP.PARENT_GROUP_ID", "PTRRULE_GROUP.GROUP_ID");
    descriptor.addMapping(childGroupsMapping);

    OneToManyMapping rulesMapping = new OneToManyMapping();
    rulesMapping.setAttributeName("rules");
    rulesMapping.setReferenceClass(com.profitera.descriptor.db.rule.Rule.class);
    rulesMapping.useBasicIndirection();
    rulesMapping.addTargetForeignKeyFieldName("PTRRULE.GROUP_ID",
        "PTRRULE_GROUP.GROUP_ID");
    descriptor.addMapping(rulesMapping);

    return descriptor;
  }

  public Descriptor buildRuleHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.rule.RuleHistory.class);
    descriptor.addTableName("PTRRULE_HISTORY");
    descriptor.addPrimaryKeyFieldName("PTRRULE_HISTORY.RULE_ID");
    descriptor.addPrimaryKeyFieldName("PTRRULE_HISTORY.VERSION_DATE_TIME");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrruleHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping contentMapping = new DirectToFieldMapping();
    contentMapping.setAttributeName("content");
    contentMapping.setFieldName("PTRRULE_HISTORY.CONTENT");
    descriptor.addMapping(contentMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRRULE_HISTORY.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping remarksMapping = new DirectToFieldMapping();
    remarksMapping.setAttributeName("remarks");
    remarksMapping.setFieldName("PTRRULE_HISTORY.REMARKS");
    descriptor.addMapping(remarksMapping);

    DirectToFieldMapping ruleNameMapping = new DirectToFieldMapping();
    ruleNameMapping.setAttributeName("ruleName");
    ruleNameMapping.setFieldName("PTRRULE_HISTORY.RULE_NAME");
    descriptor.addMapping(ruleNameMapping);

    DirectToFieldMapping userIdMapping = new DirectToFieldMapping();
    userIdMapping.setAttributeName("userId");
    userIdMapping.setFieldName("PTRRULE_HISTORY.USER_ID");
    descriptor.addMapping(userIdMapping);

    DirectToFieldMapping versionDateTimeMapping = new DirectToFieldMapping();
    versionDateTimeMapping.setAttributeName("versionDateTime");
    versionDateTimeMapping.setFieldName("PTRRULE_HISTORY.VERSION_DATE_TIME");
    descriptor.addMapping(versionDateTimeMapping);

    OneToOneMapping parentRuleMapping = new OneToOneMapping();
    parentRuleMapping.setAttributeName("parentRule");
    parentRuleMapping
        .setReferenceClass(com.profitera.descriptor.db.rule.Rule.class);
    parentRuleMapping.useBasicIndirection();
    parentRuleMapping.addForeignKeyFieldName("PTRRULE_HISTORY.RULE_ID",
        "PTRRULE.RULE_ID");
    descriptor.addMapping(parentRuleMapping);

    return descriptor;
  }

  public Descriptor buildSalutationTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.SalutationTypeRef.class);
    descriptor.addTableName("PTRSALUTATION_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRSALUTATION_TYPE_REF.SALUTATION_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRSALUTATION_TYPE_REF.SALUTATION_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrsalutationTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRSALUTATION_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping salutationCodeMapping = new DirectToFieldMapping();
    salutationCodeMapping.setAttributeName("salutationCode");
    salutationCodeMapping
        .setFieldName("PTRSALUTATION_TYPE_REF.SALUTATION_CODE");
    descriptor.addMapping(salutationCodeMapping);

    DirectToFieldMapping salutationDescMapping = new DirectToFieldMapping();
    salutationDescMapping.setAttributeName("salutationDesc");
    salutationDescMapping
        .setFieldName("PTRSALUTATION_TYPE_REF.SALUTATION_DESC");
    salutationDescMapping.setNullValue("");
    descriptor.addMapping(salutationDescMapping);

    DirectToFieldMapping salutationIdMapping = new DirectToFieldMapping();
    salutationIdMapping.setAttributeName("salutationId");
    salutationIdMapping.setFieldName("PTRSALUTATION_TYPE_REF.SALUTATION_ID");
    descriptor.addMapping(salutationIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRSALUTATION_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildSecuritySettingsDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.config.SecuritySettings.class);
    descriptor.addTableName("PTRSECURITY_SETTINGS");
    descriptor.addPrimaryKeyFieldName("PTRSECURITY_SETTINGS.NAME");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.alwaysRefreshCache();
    descriptor.setAlias("PtrsecuritySettings");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping nameMapping = new DirectToFieldMapping();
    nameMapping.setAttributeName("name");
    nameMapping.setFieldName("PTRSECURITY_SETTINGS.NAME");
    descriptor.addMapping(nameMapping);

    DirectToFieldMapping valueMapping = new DirectToFieldMapping();
    valueMapping.setAttributeName("value");
    valueMapping.setFieldName("PTRSECURITY_SETTINGS.VALUE");
    descriptor.addMapping(valueMapping);

    return descriptor;
  }

  public Descriptor buildSensitiveStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.SensitiveStatusRef.class);
    descriptor.addTableName("PTRSENSITIVE_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRSENSITIVE_STATUS_REF.SENSE_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRSENSITIVE_STATUS_REF.SENSE_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrsensitiveStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRSENSITIVE_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping senseStatusCodeMapping = new DirectToFieldMapping();
    senseStatusCodeMapping.setAttributeName("senseStatusCode");
    senseStatusCodeMapping
        .setFieldName("PTRSENSITIVE_STATUS_REF.SENSE_STATUS_CODE");
    descriptor.addMapping(senseStatusCodeMapping);

    DirectToFieldMapping senseStatusDescMapping = new DirectToFieldMapping();
    senseStatusDescMapping.setAttributeName("senseStatusDesc");
    senseStatusDescMapping
        .setFieldName("PTRSENSITIVE_STATUS_REF.SENSE_STATUS_DESC");
    senseStatusDescMapping.setNullValue("");
    descriptor.addMapping(senseStatusDescMapping);

    DirectToFieldMapping senseStatusIdMapping = new DirectToFieldMapping();
    senseStatusIdMapping.setAttributeName("senseStatusId");
    senseStatusIdMapping
        .setFieldName("PTRSENSITIVE_STATUS_REF.SENSE_STATUS_ID");
    descriptor.addMapping(senseStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRSENSITIVE_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildServiceStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ServiceStatusRef.class);
    descriptor.addTableName("PTRSERVICE_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRSERVICE_STATUS_REF.SERVICE_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRSERVICE_STATUS_REF.SERVICE_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrserviceStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRSERVICE_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping serviceStatusCodeMapping = new DirectToFieldMapping();
    serviceStatusCodeMapping.setAttributeName("serviceStatusCode");
    serviceStatusCodeMapping
        .setFieldName("PTRSERVICE_STATUS_REF.SERVICE_STATUS_CODE");
    descriptor.addMapping(serviceStatusCodeMapping);

    DirectToFieldMapping serviceStatusDescMapping = new DirectToFieldMapping();
    serviceStatusDescMapping.setAttributeName("serviceStatusDesc");
    serviceStatusDescMapping
        .setFieldName("PTRSERVICE_STATUS_REF.SERVICE_STATUS_DESC");
    serviceStatusDescMapping.setNullValue("");
    descriptor.addMapping(serviceStatusDescMapping);

    DirectToFieldMapping serviceStatusIdMapping = new DirectToFieldMapping();
    serviceStatusIdMapping.setAttributeName("serviceStatusId");
    serviceStatusIdMapping
        .setFieldName("PTRSERVICE_STATUS_REF.SERVICE_STATUS_ID");
    descriptor.addMapping(serviceStatusIdMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRSERVICE_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }

  public Descriptor buildSmsMessageDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.SmsMessage.class);
    descriptor.addTableName("PTRSMS_MESSAGE");

    // Inheritance properties.
    descriptor.getInheritancePolicy().setParentClass(
        com.profitera.descriptor.db.treatment.TreatmentProcess.class);

    // Descriptor properties.
    descriptor.setAlias("PtrsmsMessage");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping recipientMobileNoMapping = new DirectToFieldMapping();
    recipientMobileNoMapping.setAttributeName("recipientMobileNo");
    recipientMobileNoMapping.setFieldName("PTRSMS_MESSAGE.RECIPIENT_MOBILE_NO");
    descriptor.addMapping(recipientMobileNoMapping);

    DirectToFieldMapping smsMesgContentMapping = new DirectToFieldMapping();
    smsMesgContentMapping.setAttributeName("smsMesgContent");
    smsMesgContentMapping.setFieldName("PTRSMS_MESSAGE.SMS_MESG_CONTENT");
    descriptor.addMapping(smsMesgContentMapping);

    return descriptor;
  }

  public Descriptor buildStateRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.StateRef.class);
    descriptor.addTableName("PTRSTATE_REF");
    descriptor.addPrimaryKeyFieldName("PTRSTATE_REF.STATE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRSTATE_REF.STATE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrstateRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRSTATE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRSTATE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping stateCodeMapping = new DirectToFieldMapping();
    stateCodeMapping.setAttributeName("stateCode");
    stateCodeMapping.setFieldName("PTRSTATE_REF.STATE_CODE");
    descriptor.addMapping(stateCodeMapping);

    DirectToFieldMapping stateDescMapping = new DirectToFieldMapping();
    stateDescMapping.setAttributeName("stateDesc");
    stateDescMapping.setFieldName("PTRSTATE_REF.STATE_DESC");
    stateDescMapping.setNullValue("");
    descriptor.addMapping(stateDescMapping);

    DirectToFieldMapping stateIdMapping = new DirectToFieldMapping();
    stateIdMapping.setAttributeName("stateId");
    stateIdMapping.setFieldName("PTRSTATE_REF.STATE_ID");
    descriptor.addMapping(stateIdMapping);

    OneToOneMapping altWeekendRefMapping = new OneToOneMapping();
    altWeekendRefMapping.setAttributeName("altWeekendRef");
    altWeekendRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AlternateWeekendRef.class);
    altWeekendRefMapping.useBasicIndirection();
    altWeekendRefMapping.addForeignKeyFieldName("PTRSTATE_REF.ALT_WEEKEND_ID",
        "PTRALTERNATE_WEEKEND_REF.ALT_WEEKEND_ID");
    descriptor.addMapping(altWeekendRefMapping);

    OneToOneMapping countryRefMapping = new OneToOneMapping();
    countryRefMapping.setAttributeName("countryRef");
    countryRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CountryRef.class);
    countryRefMapping.useBasicIndirection();
    countryRefMapping.addForeignKeyFieldName("PTRSTATE_REF.COUNTRY_ID",
        "PTRCOUNTRY_REF.COUNTRY_ID");
    descriptor.addMapping(countryRefMapping);

    OneToOneMapping weekendRefMapping = new OneToOneMapping();
    weekendRefMapping.setAttributeName("weekendRef");
    weekendRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.WeekendRef.class);
    weekendRefMapping.useBasicIndirection();
    weekendRefMapping.addForeignKeyFieldName("PTRSTATE_REF.WEEKEND_ID",
        "PTRWEEKEND_REF.WEEKEND_ID");
    descriptor.addMapping(weekendRefMapping);

    OneToManyMapping holidayStateRelMapping = new OneToManyMapping();
    holidayStateRelMapping.setAttributeName("holidayStateRel");
    holidayStateRelMapping
        .setReferenceClass(com.profitera.descriptor.db.relation.HolidayStateRel.class);
    holidayStateRelMapping.useBasicIndirection();
    holidayStateRelMapping.addTargetForeignKeyFieldName(
        "PTRHOLIDAY_STATE_REL.STATE_ID", "PTRSTATE_REF.STATE_ID");
    descriptor.addMapping(holidayStateRelMapping);

    return descriptor;
  }

  public Descriptor buildTemplateDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.Template.class);
    descriptor.addTableName("PTRTEMPLATE");
    descriptor.addPrimaryKeyFieldName("PTRTEMPLATE.TEMPLATE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRTEMPLATE.TEMPLATE_ID");
    descriptor.setSequenceNumberName("TEMPLATE_ID_SEQ");
    descriptor.setAlias("Ptrtemplate");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping contentMapping = new DirectToFieldMapping();
    contentMapping.setAttributeName("content");
    contentMapping.setFieldName("PTRTEMPLATE.CONTENT");
    descriptor.addMapping(contentMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRTEMPLATE.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping templateIdMapping = new DirectToFieldMapping();
    templateIdMapping.setAttributeName("templateId");
    templateIdMapping.setFieldName("PTRTEMPLATE.TEMPLATE_ID");
    descriptor.addMapping(templateIdMapping);

    DirectToFieldMapping templateNameMapping = new DirectToFieldMapping();
    templateNameMapping.setAttributeName("templateName");
    templateNameMapping.setFieldName("PTRTEMPLATE.TEMPLATE_NAME");
    descriptor.addMapping(templateNameMapping);
    
    DirectToFieldMapping templateDisableMapping = new DirectToFieldMapping();
    templateDisableMapping.setAttributeName("disable");
    templateDisableMapping.setFieldName("PTRTEMPLATE.DISABLE");
    descriptor.addMapping(templateDisableMapping);

    OneToOneMapping typeRefMapping = new OneToOneMapping();
    typeRefMapping.setAttributeName("typeRef");
    typeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TemplateTypeRef.class);
    typeRefMapping.useBasicIndirection();
    typeRefMapping.addForeignKeyFieldName("PTRTEMPLATE.TEMPLATE_TYPE_ID",
        "PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_ID");
    descriptor.addMapping(typeRefMapping);

    return descriptor;
  }

  public Descriptor buildTemplateTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TemplateTypeRef.class);
    descriptor.addTableName("PTRTEMPLATE_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtemplateTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTEMPLATE_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTEMPLATE_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping templateTypeCodeMapping = new DirectToFieldMapping();
    templateTypeCodeMapping.setAttributeName("templateTypeCode");
    templateTypeCodeMapping
        .setFieldName("PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_CODE");
    descriptor.addMapping(templateTypeCodeMapping);

    DirectToFieldMapping templateTypeDescMapping = new DirectToFieldMapping();
    templateTypeDescMapping.setAttributeName("templateTypeDesc");
    templateTypeDescMapping
        .setFieldName("PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_DESC");
    templateTypeDescMapping.setNullValue("");
    descriptor.addMapping(templateTypeDescMapping);

    DirectToFieldMapping templateTypeIdMapping = new DirectToFieldMapping();
    templateTypeIdMapping.setAttributeName("templateTypeId");
    templateTypeIdMapping.setFieldName("PTRTEMPLATE_TYPE_REF.TEMPLATE_TYPE_ID");
    descriptor.addMapping(templateTypeIdMapping);

    return descriptor;
  }

  public Descriptor buildTransactionCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TransactionCodeRef.class);
    descriptor.addTableName("PTRTRAN_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRTRAN_CODE_REF.TRAN_CODE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRTRAN_CODE_REF.TRAN_CODE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtranCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTRAN_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTRAN_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping tcCodeIndMapping = new DirectToFieldMapping();
    tcCodeIndMapping.setAttributeName("tcCodeInd");
    tcCodeIndMapping.setFieldName("PTRTRAN_CODE_REF.TC_CODE_IND");
    descriptor.addMapping(tcCodeIndMapping);

    DirectToFieldMapping tranCodeDescMapping = new DirectToFieldMapping();
    tranCodeDescMapping.setAttributeName("tranCodeDesc");
    tranCodeDescMapping.setFieldName("PTRTRAN_CODE_REF.TRAN_CODE_DESC");
    tranCodeDescMapping.setNullValue("");
    descriptor.addMapping(tranCodeDescMapping);

    DirectToFieldMapping tranCodeIdMapping = new DirectToFieldMapping();
    tranCodeIdMapping.setAttributeName("tranCodeId");
    tranCodeIdMapping.setFieldName("PTRTRAN_CODE_REF.TRAN_CODE_ID");
    descriptor.addMapping(tranCodeIdMapping);

    DirectToFieldMapping tranCodeStringMapping = new DirectToFieldMapping();
    tranCodeStringMapping.setAttributeName("tranCodeString");
    tranCodeStringMapping.setFieldName("PTRTRAN_CODE_REF.TRAN_CODE_STRING");
    descriptor.addMapping(tranCodeStringMapping);

    DirectToFieldMapping tranCodeTypeMapping = new DirectToFieldMapping();
    tranCodeTypeMapping.setAttributeName("tranCodeType");
    tranCodeTypeMapping.setFieldName("PTRTRAN_CODE_REF.TRAN_CODE_TYPE");
    descriptor.addMapping(tranCodeTypeMapping);

    return descriptor;
  }

  public Descriptor buildTreatProcessTypeStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatProcessTypeStatusRef.class);
    descriptor.addTableName("PTRTREAT_PROC_TYPE_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtreatProcessTypeStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatprocStatusIdMapping = new DirectToFieldMapping();
    treatprocStatusIdMapping.setAttributeName("treatprocStatusId");
    treatprocStatusIdMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.addMapping(treatprocStatusIdMapping);

    DirectToFieldMapping treatprocTypeIdMapping = new DirectToFieldMapping();
    treatprocTypeIdMapping.setAttributeName("treatprocTypeId");
    treatprocTypeIdMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_ID");
    descriptor.addMapping(treatprocTypeIdMapping);

    DirectToFieldMapping treatprocTypeStatusCodeMapping = new DirectToFieldMapping();
    treatprocTypeStatusCodeMapping.setAttributeName("treatprocTypeStatusCode");
    treatprocTypeStatusCodeMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_CODE");
    descriptor.addMapping(treatprocTypeStatusCodeMapping);

    DirectToFieldMapping treatprocTypeStatusDescMapping = new DirectToFieldMapping();
    treatprocTypeStatusDescMapping.setAttributeName("treatprocTypeStatusDesc");
    treatprocTypeStatusDescMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_DESC");
    treatprocTypeStatusDescMapping.setNullValue("");
    descriptor.addMapping(treatprocTypeStatusDescMapping);

    DirectToFieldMapping treatprocTypeStatusIdMapping = new DirectToFieldMapping();
    treatprocTypeStatusIdMapping.setAttributeName("treatprocTypeStatusId");
    treatprocTypeStatusIdMapping
        .setFieldName("PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_ID");
    descriptor.addMapping(treatprocTypeStatusIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentActionNodeDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.TreatmentActionNode.class);
    descriptor.addTableName("PTRTREATMENT_ACTION_NODE");
    descriptor.addPrimaryKeyFieldName("PTRTREATMENT_ACTION_NODE.ACTION_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrtreatmentActionNode");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping actionIdMapping = new DirectToFieldMapping();
    actionIdMapping.setAttributeName("actionId");
    actionIdMapping.setFieldName("PTRTREATMENT_ACTION_NODE.ACTION_ID");
    descriptor.addMapping(actionIdMapping);

    DirectToFieldMapping nameMapping = new DirectToFieldMapping();
    nameMapping.setAttributeName("name");
    nameMapping.setFieldName("PTRTREATMENT_ACTION_NODE.NAME");
    descriptor.addMapping(nameMapping);

    DirectToFieldMapping retriesMapping = new DirectToFieldMapping();
    retriesMapping.setAttributeName("retries");
    retriesMapping.setFieldName("PTRTREATMENT_ACTION_NODE.RETRIES");
    descriptor.addMapping(retriesMapping);

    DirectToFieldMapping mandatoryMapping = new DirectToFieldMapping();
    mandatoryMapping.setAttributeName("mandatory");
    mandatoryMapping.setFieldName("PTRTREATMENT_ACTION_NODE.MANDATORY");
    descriptor.addMapping(mandatoryMapping);

    DirectToFieldMapping deletedMapping = new DirectToFieldMapping();
    deletedMapping.setAttributeName("deleted");
    deletedMapping.setFieldName("PTRTREATMENT_ACTION_NODE.DELETED");
    descriptor.addMapping(deletedMapping);

    DirectToFieldMapping xPositionMapping = new DirectToFieldMapping();
    xPositionMapping.setAttributeName("xPosition");
    xPositionMapping.setFieldName("PTRTREATMENT_ACTION_NODE.X_POSITION");
    descriptor.addMapping(xPositionMapping);

    DirectToFieldMapping yPositionMapping = new DirectToFieldMapping();
    yPositionMapping.setAttributeName("yPosition");
    yPositionMapping.setFieldName("PTRTREATMENT_ACTION_NODE.Y_POSITION");
    descriptor.addMapping(yPositionMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_NODE.TREATMENT_STAGE_ID",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    OneToOneMapping treatmentStreamRefMapping = new OneToOneMapping();
    treatmentStreamRefMapping.setAttributeName("treatmentStreamRef");
    treatmentStreamRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStreamRef.class);
    treatmentStreamRefMapping.useBasicIndirection();
    treatmentStreamRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_NODE.TREATMENT_STREAM_ID",
        "PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.addMapping(treatmentStreamRefMapping);

    OneToOneMapping treatprocSubtypeRefMapping = new OneToOneMapping();
    treatprocSubtypeRefMapping.setAttributeName("treatprocSubtypeRef");
    treatprocSubtypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatprocSubtypeRef.class);
    treatprocSubtypeRefMapping.useBasicIndirection();
    treatprocSubtypeRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_NODE.TREATPROC_SUBTYPE_ID",
        "PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");
    descriptor.addMapping(treatprocSubtypeRefMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentActionPropensityDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.TreatmentActionPropensity.class);
    descriptor.addTableName("PTRTREATMENT_ACTION_PROPENSITY");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATMENT_ACTION_PROPENSITY.TREATMENT_ACTION_PROPENSITY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrtreatmentActionPropensity");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping accountIdMapping = new DirectToFieldMapping();
    accountIdMapping.setAttributeName("accountId");
    accountIdMapping.setFieldName("PTRTREATMENT_ACTION_PROPENSITY.ACCOUNT_ID");
    descriptor.addMapping(accountIdMapping);

    DirectToFieldMapping propensityMapping = new DirectToFieldMapping();
    propensityMapping.setAttributeName("propensity");
    propensityMapping.setFieldName("PTRTREATMENT_ACTION_PROPENSITY.PROPENSITY");
    descriptor.addMapping(propensityMapping);

    DirectToFieldMapping resultTypeIdMapping = new DirectToFieldMapping();
    resultTypeIdMapping.setAttributeName("resultTypeId");
    resultTypeIdMapping
        .setFieldName("PTRTREATMENT_ACTION_PROPENSITY.RESULT_TYPE_ID");
    descriptor.addMapping(resultTypeIdMapping);

    DirectToFieldMapping treatmentActionIdMapping = new DirectToFieldMapping();
    treatmentActionIdMapping.setAttributeName("treatmentActionId");
    treatmentActionIdMapping
        .setFieldName("PTRTREATMENT_ACTION_PROPENSITY.TREATMENT_ACTION_ID");
    descriptor.addMapping(treatmentActionIdMapping);

    DirectToFieldMapping treatmentActionPropensityIdMapping = new DirectToFieldMapping();
    treatmentActionPropensityIdMapping
        .setAttributeName("treatmentActionPropensityId");
    treatmentActionPropensityIdMapping
        .setFieldName("PTRTREATMENT_ACTION_PROPENSITY.TREATMENT_ACTION_PROPENSITY_ID");
    descriptor.addMapping(treatmentActionPropensityIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentActionTransitionDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.TreatmentActionTransition.class);
    descriptor.addTableName("PTRTREATMENT_ACTION_TRANSITION");
    descriptor.addPrimaryKeyFieldName("PTRTREATMENT_ACTION_TRANSITION.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRTREATMENT_ACTION_TRANSITION.ID");
    descriptor.setSequenceNumberName("TREAT_ACT_TRANS_ID");
    descriptor.setAlias("PtrtreatmentActionTransition");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRTREATMENT_ACTION_TRANSITION.ID");
    descriptor.addMapping(idMapping);

    DirectToFieldMapping nameMapping = new DirectToFieldMapping();
    nameMapping.setAttributeName("name");
    nameMapping.setFieldName("PTRTREATMENT_ACTION_TRANSITION.NAME");
    descriptor.addMapping(nameMapping);

    DirectToFieldMapping weightMapping = new DirectToFieldMapping();
    weightMapping.setAttributeName("weight");
    weightMapping.setFieldName("PTRTREATMENT_ACTION_TRANSITION.WEIGHT");
    descriptor.addMapping(weightMapping);

    OneToOneMapping destinationActionNodeMapping = new OneToOneMapping();
    destinationActionNodeMapping.setAttributeName("destinationActionNode");
    destinationActionNodeMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentActionNode.class);
    destinationActionNodeMapping.useBasicIndirection();
    destinationActionNodeMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_TRANSITION.DESTINATION_ACTION_ID",
        "PTRTREATMENT_ACTION_NODE.ACTION_ID");
    descriptor.addMapping(destinationActionNodeMapping);

    OneToOneMapping sourceActionNodeMapping = new OneToOneMapping();
    sourceActionNodeMapping.setAttributeName("sourceActionNode");
    sourceActionNodeMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentActionNode.class);
    sourceActionNodeMapping.useBasicIndirection();
    sourceActionNodeMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_TRANSITION.SOURCE_ACTION_ID",
        "PTRTREATMENT_ACTION_NODE.ACTION_ID");
    descriptor.addMapping(sourceActionNodeMapping);

    OneToOneMapping treatprocStatusRefMapping = new OneToOneMapping();
    treatprocStatusRefMapping.setAttributeName("treatprocStatusRef");
    treatprocStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentProcessStatusRef.class);
    treatprocStatusRefMapping.useBasicIndirection();
    treatprocStatusRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_ACTION_TRANSITION.TREATPROC_STATUS_ID",
        "PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.addMapping(treatprocStatusRefMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentProcessDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.TreatmentProcess.class);
    descriptor.addTableName("PTRTREATMENT_PROCESS");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");

    // Inheritance properties.
    descriptor.getInheritancePolicy().setClassIndicatorFieldName(
        "PTRTREATMENT_PROCESS.PROCESS_TYPE_ID");
    descriptor.getInheritancePolicy().addClassIndicator(
        com.profitera.descriptor.db.treatment.SmsMessage.class,
        new java.lang.Long(13));
    descriptor.getInheritancePolicy().addClassIndicator(
        com.profitera.descriptor.db.treatment.PlaceACall.class,
        new java.lang.Long(8));
    descriptor.getInheritancePolicy().addClassIndicator(
        com.profitera.descriptor.db.treatment.PaymentPlan.class,
        new java.lang.Long(2));
    descriptor.getInheritancePolicy().addClassIndicator(
        com.profitera.descriptor.db.treatment.TreatmentProcess.class,
        new java.lang.Long(9));
    
    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");
    descriptor.setSequenceNumberName("TREATMENT_PROCESS_ID_SEQ");
    descriptor.setAlias("PtrtreatmentProcess");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping actualEndDateMapping = new DirectToFieldMapping();
    actualEndDateMapping.setAttributeName("actualEndDate");
    actualEndDateMapping.setFieldName("PTRTREATMENT_PROCESS.ACTUAL_END_DATE");
    descriptor.addMapping(actualEndDateMapping);

    DirectToFieldMapping actualStartDateMapping = new DirectToFieldMapping();
    actualStartDateMapping.setAttributeName("actualStartDate");
    actualStartDateMapping
        .setFieldName("PTRTREATMENT_PROCESS.ACTUAL_START_DATE");
    descriptor.addMapping(actualStartDateMapping);

    DirectToFieldMapping attemptNumberMapping = new DirectToFieldMapping();
    attemptNumberMapping.setAttributeName("attemptNumber");
    attemptNumberMapping.setFieldName("PTRTREATMENT_PROCESS.ATTEMPT_NUMBER");
    descriptor.addMapping(attemptNumberMapping);

    DirectToFieldMapping expectedEndDateMapping = new DirectToFieldMapping();
    expectedEndDateMapping.setAttributeName("expectedEndDate");
    expectedEndDateMapping
        .setFieldName("PTRTREATMENT_PROCESS.EXPECTED_END_DATE");
    descriptor.addMapping(expectedEndDateMapping);

    DirectToFieldMapping expectedStartDateMapping = new DirectToFieldMapping();
    expectedStartDateMapping.setAttributeName("expectedStartDate");
    expectedStartDateMapping
        .setFieldName("PTRTREATMENT_PROCESS.EXPECTED_START_DATE");
    descriptor.addMapping(expectedStartDateMapping);

    DirectToFieldMapping hostUpdatedMapping = new DirectToFieldMapping();
    hostUpdatedMapping.setAttributeName("hostUpdated");
    hostUpdatedMapping.setFieldName("PTRTREATMENT_PROCESS.HOST_UPDATED");
    descriptor.addMapping(hostUpdatedMapping);

    DirectToFieldMapping createdDateMapping = new DirectToFieldMapping();
    createdDateMapping.setAttributeName("createdDate");
    createdDateMapping.setFieldName("PTRTREATMENT_PROCESS.CREATED_DATE");
    descriptor.addMapping(createdDateMapping);

    DirectToFieldMapping manualMapping = new DirectToFieldMapping();
    manualMapping.setAttributeName("manual");
    manualMapping.setFieldName("PTRTREATMENT_PROCESS.MANUAL");
    descriptor.addMapping(manualMapping);

    DirectToFieldMapping outstandingAmtMapping = new DirectToFieldMapping();
    outstandingAmtMapping.setAttributeName("outstandingAmt");
    outstandingAmtMapping.setFieldName("PTRTREATMENT_PROCESS.OUTSTANDING_AMT");
    descriptor.addMapping(outstandingAmtMapping);

    DirectToFieldMapping processCostMapping = new DirectToFieldMapping();
    processCostMapping.setAttributeName("processCost");
    processCostMapping.setFieldName("PTRTREATMENT_PROCESS.PROCESS_COST");
    descriptor.addMapping(processCostMapping);

    DirectToFieldMapping processRemarksMapping = new DirectToFieldMapping();
    processRemarksMapping.setAttributeName("processRemarks");
    processRemarksMapping.setFieldName("PTRTREATMENT_PROCESS.PROCESS_REMARKS");
    descriptor.addMapping(processRemarksMapping);

    DirectToFieldMapping treatmentProcessIdMapping = new DirectToFieldMapping();
    treatmentProcessIdMapping.setAttributeName("treatmentProcessId");
    treatmentProcessIdMapping
        .setFieldName("PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");
    descriptor.addMapping(treatmentProcessIdMapping);

    OneToOneMapping costBillerRefMapping = new OneToOneMapping();
    costBillerRefMapping.setAttributeName("costBillerRef");
    costBillerRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CostBillerRef.class);
    costBillerRefMapping.useBasicIndirection();
    costBillerRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.COST_BILLER_ID",
        "PTRCOST_BILLER_REF.COST_BILLER_ID");
    descriptor.addMapping(costBillerRefMapping);

    OneToOneMapping parentTreatmentPlanMapping = new OneToOneMapping();
    parentTreatmentPlanMapping.setAttributeName("parentTreatmentPlan");
    parentTreatmentPlanMapping
        .setReferenceClass(com.profitera.descriptor.db.account.AccountTreatmentPlan.class);
    parentTreatmentPlanMapping.useBasicIndirection();
    parentTreatmentPlanMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.TREATMENT_PLAN_ID",
        "PTRACC_TREATMENT_PLAN.TREATMENT_PLAN_ID");
    descriptor.addMapping(parentTreatmentPlanMapping);

    OneToOneMapping processStatusRefMapping = new OneToOneMapping();
    processStatusRefMapping.setAttributeName("processStatusRef");
    processStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentProcessStatusRef.class);
    processStatusRefMapping.useBasicIndirection();
    processStatusRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.PROCESS_STATUS_ID",
        "PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.addMapping(processStatusRefMapping);
    
    OneToOneMapping processTypeIdRefMapping = new OneToOneMapping();
    processTypeIdRefMapping.setAttributeName("processTypeIdRef");
    processTypeIdRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentProcessTypeRef.class);
    processTypeIdRefMapping.useBasicIndirection();
    processTypeIdRefMapping.readOnly();
    processTypeIdRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.PROCESS_TYPE_ID",
        "PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_ID");
    descriptor.addMapping(processTypeIdRefMapping);

    OneToOneMapping profileSegmentRefMapping = new OneToOneMapping();
    profileSegmentRefMapping.setAttributeName("profileSegmentRef");
    profileSegmentRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProfileSegmentRef.class);
    profileSegmentRefMapping.useBasicIndirection();
    profileSegmentRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.PROFILE_SEGMENT_ID",
        "PTRPROFILE_SEGMENT_REF.PROFILE_ID");
    descriptor.addMapping(profileSegmentRefMapping);

    OneToOneMapping templateMapping = new OneToOneMapping();
    templateMapping.setAttributeName("template");
    templateMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.Template.class);
    templateMapping.useBasicIndirection();
    templateMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS.TEMPLATE_ID",
        "PTRTEMPLATE.TEMPLATE_ID");
    descriptor.addMapping(templateMapping);

    OneToOneMapping treatProcessTypeStatusRefMapping = new OneToOneMapping();
    treatProcessTypeStatusRefMapping
        .setAttributeName("treatProcessTypeStatusRef");
    treatProcessTypeStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatProcessTypeStatusRef.class);
    treatProcessTypeStatusRefMapping.useBasicIndirection();
    treatProcessTypeStatusRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.PROCESS_TYPE_STATUS_ID",
        "PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_ID");
    descriptor.addMapping(treatProcessTypeStatusRefMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.TREATMENT_STAGE_ID",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    OneToOneMapping treatmentStreamRefMapping = new OneToOneMapping();
    treatmentStreamRefMapping.setAttributeName("treatmentStreamRef");
    treatmentStreamRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStreamRef.class);
    treatmentStreamRefMapping.useBasicIndirection();
    treatmentStreamRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.TREATMENT_STREAM_ID",
        "PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.addMapping(treatmentStreamRefMapping);

    OneToOneMapping treatprocSubtypeRefMapping = new OneToOneMapping();
    treatprocSubtypeRefMapping.setAttributeName("treatprocSubtypeRef");
    treatprocSubtypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatprocSubtypeRef.class);
    treatprocSubtypeRefMapping.useBasicIndirection();
    treatprocSubtypeRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS.PROCESS_SUBTYPE_ID",
        "PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");
    descriptor.addMapping(treatprocSubtypeRefMapping);

    OneToOneMapping userMapping = new OneToOneMapping();
    userMapping.setAttributeName("user");
    userMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    userMapping.useBasicIndirection();
    userMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(userMapping);

    OneToOneMapping createdUserMapping = new OneToOneMapping();
    createdUserMapping.setAttributeName("createdUser");
    createdUserMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    createdUserMapping.useBasicIndirection();
    createdUserMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS.CREATED_USER",
        "PTRUSER.USER_ID");
    descriptor.addMapping(createdUserMapping);
    

    OneToOneMapping agencyMapping = new OneToOneMapping();
    agencyMapping.setAttributeName("agency");
    agencyMapping
        .setReferenceClass(com.profitera.descriptor.db.client.Agency.class);
    agencyMapping.useBasicIndirection();
    agencyMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS.AGENCY_ID",
        "PTRAGENCY.AGENCY_ID");
    descriptor.addMapping(agencyMapping);

    return descriptor;
  }
  
  public Descriptor buildTreatmentProcessHistoryRemarkDescription() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.history.TreatmentProcessHistoryRemark.class);
    descriptor.addTableName("PTRTREAPROC_HIST_REMARK");
    descriptor.addPrimaryKeyFieldName("PTRTREAPROC_HIST_REMARK.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRTREAPROC_HIST_REMARK.ID");
    descriptor.setSequenceNumberName("TREATMENT_PROCESS_HIST_REMARK_ID_SEQ");
    descriptor.setAlias("PtrtreatmentProcessHistoryRemark");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRTREAPROC_HIST_REMARK.ID");
    descriptor.addMapping(idMapping);
    
    DirectToFieldMapping remarksMapping = new DirectToFieldMapping();
    remarksMapping.setAttributeName("processRemarks");
    remarksMapping.setFieldName("PTRTREAPROC_HIST_REMARK.PROCESS_REMARKS");
    descriptor.addMapping(remarksMapping);

    return descriptor;
  }
  
  public Descriptor buildTreatmentProcessHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.history.TreatmentProcessHistory.class);
    descriptor.addTableName("PTRTREATMENT_PROCESS_HISTORY");
    descriptor.addPrimaryKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRTREATMENT_PROCESS_HISTORY.ID");
    descriptor.setSequenceNumberName("TREATMENT_PROCESS_HIST_ID_SEQ");
    descriptor.setAlias("PtrtreatmentProcessHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping actualEndDateMapping = new DirectToFieldMapping();
    actualEndDateMapping.setAttributeName("actualEndDate");
    actualEndDateMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.ACTUAL_END_DATE");
    descriptor.addMapping(actualEndDateMapping);

    DirectToFieldMapping updateDate = new DirectToFieldMapping();
    updateDate.setAttributeName("updateDate");
    updateDate.setFieldName("PTRTREATMENT_PROCESS_HISTORY.UPDATE_DATE");
    descriptor.addMapping(updateDate);

    DirectToFieldMapping actualStartDateMapping = new DirectToFieldMapping();
    actualStartDateMapping.setAttributeName("actualStartDate");
    actualStartDateMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.ACTUAL_START_DATE");
    descriptor.addMapping(actualStartDateMapping);

    DirectToFieldMapping attemptNumberMapping = new DirectToFieldMapping();
    attemptNumberMapping.setAttributeName("attemptNumber");
    attemptNumberMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.ATTEMPT_NUMBER");
    descriptor.addMapping(attemptNumberMapping);

    DirectToFieldMapping expectedEndDateMapping = new DirectToFieldMapping();
    expectedEndDateMapping.setAttributeName("expectedEndDate");
    expectedEndDateMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.EXPECTED_END_DATE");
    descriptor.addMapping(expectedEndDateMapping);

    DirectToFieldMapping expectedStartDateMapping = new DirectToFieldMapping();
    expectedStartDateMapping.setAttributeName("expectedStartDate");
    expectedStartDateMapping
        .setFieldName("PTRTREATMENT_PROCESS_HISTORY.EXPECTED_START_DATE");
    descriptor.addMapping(expectedStartDateMapping);

    DirectToFieldMapping createdDateMapping = new DirectToFieldMapping();
    createdDateMapping.setAttributeName("createdDate");
    createdDateMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.CREATED_DATE");
    descriptor.addMapping(createdDateMapping);
    
    DirectToFieldMapping hostUpdatedMapping = new DirectToFieldMapping();
    hostUpdatedMapping.setAttributeName("hostUpdated");
    hostUpdatedMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.HOST_UPDATED");
    descriptor.addMapping(hostUpdatedMapping);

    DirectToFieldMapping manualMapping = new DirectToFieldMapping();
    manualMapping.setAttributeName("manual");
    manualMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.MANUAL");
    descriptor.addMapping(manualMapping);

    DirectToFieldMapping outstandingAmtMapping = new DirectToFieldMapping();
    outstandingAmtMapping.setAttributeName("outstandingAmt");
    outstandingAmtMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.OUTSTANDING_AMT");
    descriptor.addMapping(outstandingAmtMapping);

    DirectToFieldMapping processCostMapping = new DirectToFieldMapping();
    processCostMapping.setAttributeName("processCost");
    processCostMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.PROCESS_COST");
    descriptor.addMapping(processCostMapping);

    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRTREATMENT_PROCESS_HISTORY.ID");
    descriptor.addMapping(idMapping);

    OneToOneMapping costBillerRefMapping = new OneToOneMapping();
    costBillerRefMapping.setAttributeName("costBillerRef");
    costBillerRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.CostBillerRef.class);
    costBillerRefMapping.useBasicIndirection();
    costBillerRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.COST_BILLER_ID",
        "PTRCOST_BILLER_REF.COST_BILLER_ID");
    descriptor.addMapping(costBillerRefMapping);

    OneToOneMapping parentTreatmentProcessMapping = new OneToOneMapping();
    parentTreatmentProcessMapping.setAttributeName("treatmentProcess");
    parentTreatmentProcessMapping.setReferenceClass(com.profitera.descriptor.db.treatment.TreatmentProcess.class);
    parentTreatmentProcessMapping.useBasicIndirection();
    parentTreatmentProcessMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.TREATMENT_PROCESS_ID", "PTRTREATMENT_PROCESS.TREATMENT_PROCESS_ID");
    descriptor.addMapping(parentTreatmentProcessMapping);

    OneToOneMapping processStatusRefMapping = new OneToOneMapping();
    processStatusRefMapping.setAttributeName("processStatusRef");
    processStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentProcessStatusRef.class);
    processStatusRefMapping.useBasicIndirection();
    processStatusRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.PROCESS_STATUS_ID",
        "PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.addMapping(processStatusRefMapping);

    OneToOneMapping processTypeIdRefMapping = new OneToOneMapping();
    processTypeIdRefMapping.setAttributeName("processTypeIdRef");
    processTypeIdRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentProcessTypeRef.class);
    processTypeIdRefMapping.useBasicIndirection();
    processTypeIdRefMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.PROCESS_TYPE_ID", "PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_ID");
    descriptor.addMapping(processTypeIdRefMapping);

    OneToOneMapping profileSegmentRefMapping = new OneToOneMapping();
    profileSegmentRefMapping.setAttributeName("profileSegmentRef");
    profileSegmentRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.ProfileSegmentRef.class);
    profileSegmentRefMapping.useBasicIndirection();
    profileSegmentRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.PROFILE_SEGMENT_ID",
        "PTRPROFILE_SEGMENT_REF.PROFILE_ID");
    descriptor.addMapping(profileSegmentRefMapping);

    OneToOneMapping templateMapping = new OneToOneMapping();
    templateMapping.setAttributeName("template");
    templateMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.Template.class);
    templateMapping.useBasicIndirection();
    templateMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.TEMPLATE_ID",
        "PTRTEMPLATE.TEMPLATE_ID");
    descriptor.addMapping(templateMapping);

    OneToOneMapping treatProcessTypeStatusRefMapping = new OneToOneMapping();
    treatProcessTypeStatusRefMapping
        .setAttributeName("treatProcessTypeStatusRef");
    treatProcessTypeStatusRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatProcessTypeStatusRef.class);
    treatProcessTypeStatusRefMapping.useBasicIndirection();
    treatProcessTypeStatusRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.PROCESS_TYPE_STATUS_ID",
        "PTRTREAT_PROC_TYPE_STATUS_REF.TREATPROC_TYPE_STATUS_ID");
    descriptor.addMapping(treatProcessTypeStatusRefMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.TREATMENT_STAGE_ID",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    OneToOneMapping treatmentStreamRefMapping = new OneToOneMapping();
    treatmentStreamRefMapping.setAttributeName("treatmentStreamRef");
    treatmentStreamRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStreamRef.class);
    treatmentStreamRefMapping.useBasicIndirection();
    treatmentStreamRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.TREATMENT_STREAM_ID",
        "PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.addMapping(treatmentStreamRefMapping);

    OneToOneMapping treatprocSubtypeRefMapping = new OneToOneMapping();
    treatprocSubtypeRefMapping.setAttributeName("treatprocSubtypeRef");
    treatprocSubtypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatprocSubtypeRef.class);
    treatprocSubtypeRefMapping.useBasicIndirection();
    treatprocSubtypeRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_PROCESS_HISTORY.PROCESS_SUBTYPE_ID",
        "PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");
    descriptor.addMapping(treatprocSubtypeRefMapping);

    OneToOneMapping userMapping = new OneToOneMapping();
    userMapping.setAttributeName("user");
    userMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    userMapping.useBasicIndirection();
    userMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(userMapping);
    
    OneToOneMapping createdUserMapping = new OneToOneMapping();
    createdUserMapping.setAttributeName("createdUser");
    createdUserMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    createdUserMapping.useBasicIndirection();
    createdUserMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.CREATED_USER",
        "PTRUSER.USER_ID");
    descriptor.addMapping(createdUserMapping);

    OneToOneMapping remarksMapping = new OneToOneMapping();
    remarksMapping.setAttributeName("processRemarks");
    remarksMapping.setReferenceClass(com.profitera.descriptor.db.history.TreatmentProcessHistoryRemark.class);
    remarksMapping.useBasicIndirection();
    remarksMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.PROCESS_REMARKS_ID",
        "PTRTREAPROC_HIST_REMARK.ID");
    descriptor.addMapping(remarksMapping);
    
    OneToOneMapping agencyMapping = new OneToOneMapping();
    agencyMapping.setAttributeName("agency");
    agencyMapping
        .setReferenceClass(com.profitera.descriptor.db.client.Agency.class);
    agencyMapping.useBasicIndirection();
    agencyMapping.addForeignKeyFieldName("PTRTREATMENT_PROCESS_HISTORY.AGENCY_ID",
        "PTRAGENCY.AGENCY_ID");
    descriptor.addMapping(agencyMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentProcessStatusRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatmentProcessStatusRef.class);
    descriptor.addTableName("PTRTREAT_PROCESS_STATUS_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtreatProcessStatusRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREAT_PROCESS_STATUS_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping
        .setFieldName("PTRTREAT_PROCESS_STATUS_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatprocStatusCodeMapping = new DirectToFieldMapping();
    treatprocStatusCodeMapping.setAttributeName("treatprocStatusCode");
    treatprocStatusCodeMapping
        .setFieldName("PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_CODE");
    descriptor.addMapping(treatprocStatusCodeMapping);

    DirectToFieldMapping treatprocStatusDescMapping = new DirectToFieldMapping();
    treatprocStatusDescMapping.setAttributeName("treatprocStatusDesc");
    treatprocStatusDescMapping
        .setFieldName("PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_DESC");
    treatprocStatusDescMapping.setNullValue("");
    descriptor.addMapping(treatprocStatusDescMapping);

    DirectToFieldMapping treatprocStatusIdMapping = new DirectToFieldMapping();
    treatprocStatusIdMapping.setAttributeName("treatprocStatusId");
    treatprocStatusIdMapping
        .setFieldName("PTRTREAT_PROCESS_STATUS_REF.TREATPROC_STATUS_ID");
    descriptor.addMapping(treatprocStatusIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentProcessTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatmentProcessTypeRef.class);
    descriptor.addTableName("PTRTREAT_PROCESS_TYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtreatProcessTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREAT_PROCESS_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTREAT_PROCESS_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatprocTypeCodeMapping = new DirectToFieldMapping();
    treatprocTypeCodeMapping.setAttributeName("treatprocTypeCode");
    treatprocTypeCodeMapping
        .setFieldName("PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_CODE");
    descriptor.addMapping(treatprocTypeCodeMapping);

    DirectToFieldMapping treatprocTypeDescMapping = new DirectToFieldMapping();
    treatprocTypeDescMapping.setAttributeName("treatprocTypeDesc");
    treatprocTypeDescMapping
        .setFieldName("PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_DESC");
    treatprocTypeDescMapping.setNullValue("");
    descriptor.addMapping(treatprocTypeDescMapping);

    DirectToFieldMapping treatprocTypeIdMapping = new DirectToFieldMapping();
    treatprocTypeIdMapping.setAttributeName("treatprocTypeId");
    treatprocTypeIdMapping
        .setFieldName("PTRTREAT_PROCESS_TYPE_REF.TREATPROC_TYPE_ID");
    descriptor.addMapping(treatprocTypeIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentStageRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    descriptor.addTableName("PTRTREATMENT_STAGE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.alwaysConformResultsInUnitOfWork();
    descriptor.setAlias("PtrtreatmentStageRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREATMENT_STAGE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTREATMENT_STAGE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatmentStageCodeMapping = new DirectToFieldMapping();
    treatmentStageCodeMapping.setAttributeName("treatmentStageCode");
    treatmentStageCodeMapping
        .setFieldName("PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_CODE");
    descriptor.addMapping(treatmentStageCodeMapping);

    DirectToFieldMapping treatmentStageDescMapping = new DirectToFieldMapping();
    treatmentStageDescMapping.setAttributeName("treatmentStageDesc");
    treatmentStageDescMapping
        .setFieldName("PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_DESC");
    treatmentStageDescMapping.setNullValue("");
    descriptor.addMapping(treatmentStageDescMapping);

    DirectToFieldMapping treatmentStageIdMapping = new DirectToFieldMapping();
    treatmentStageIdMapping.setAttributeName("treatmentStageId");
    treatmentStageIdMapping
        .setFieldName("PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatmentStreamRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatmentStreamRef.class);
    descriptor.addTableName("PTRTREATMENT_STREAM_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtreatmentStreamRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREATMENT_STREAM_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTREATMENT_STREAM_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatmentStreamCodeMapping = new DirectToFieldMapping();
    treatmentStreamCodeMapping.setAttributeName("treatmentStreamCode");
    treatmentStreamCodeMapping
        .setFieldName("PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_CODE");
    descriptor.addMapping(treatmentStreamCodeMapping);

    DirectToFieldMapping treatmentStreamDescMapping = new DirectToFieldMapping();
    treatmentStreamDescMapping.setAttributeName("treatmentStreamDesc");
    treatmentStreamDescMapping
        .setFieldName("PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_DESC");
    treatmentStreamDescMapping.setNullValue("");
    descriptor.addMapping(treatmentStreamDescMapping);

    DirectToFieldMapping treatmentStreamIdMapping = new DirectToFieldMapping();
    treatmentStreamIdMapping.setAttributeName("treatmentStreamId");
    treatmentStreamIdMapping
        .setFieldName("PTRTREATMENT_STREAM_REF.TREATMENT_STREAM_ID");
    descriptor.addMapping(treatmentStreamIdMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRTREATMENT_STREAM_REF.TREATMENT_STAGE_ID",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    return descriptor;
  }

  public Descriptor buildTreatprocSubtypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.TreatprocSubtypeRef.class);
    descriptor.addTableName("PTRTREATPROC_SUBTYPE_REF");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrtreatprocSubtypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRTREATPROC_SUBTYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRTREATPROC_SUBTYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping treatprocSubtypeIdMapping = new DirectToFieldMapping();
    treatprocSubtypeIdMapping.setAttributeName("treatprocSubtypeId");
    treatprocSubtypeIdMapping
        .setFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_SUBTYPE_ID");
    descriptor.addMapping(treatprocSubtypeIdMapping);

    DirectToFieldMapping treatprocTypeCodeMapping = new DirectToFieldMapping();
    treatprocTypeCodeMapping.setAttributeName("treatprocTypeCode");
    treatprocTypeCodeMapping
        .setFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_TYPE_CODE");
    descriptor.addMapping(treatprocTypeCodeMapping);

    DirectToFieldMapping treatprocTypeDescMapping = new DirectToFieldMapping();
    treatprocTypeDescMapping.setAttributeName("treatprocTypeDesc");
    treatprocTypeDescMapping
        .setFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_TYPE_DESC");
    treatprocTypeDescMapping.setNullValue("");
    descriptor.addMapping(treatprocTypeDescMapping);

    DirectToFieldMapping treatprocTypeIdMapping = new DirectToFieldMapping();
    treatprocTypeIdMapping.setAttributeName("treatprocTypeId");
    treatprocTypeIdMapping
        .setFieldName("PTRTREATPROC_SUBTYPE_REF.TREATPROC_TYPE_ID");
    descriptor.addMapping(treatprocTypeIdMapping);

    return descriptor;
  }

  public Descriptor buildTreatprocTemplateDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.treatment.TreatprocTemplate.class);
    descriptor.addTableName("PTRTREATPROC_TEMPLATE");
    descriptor
        .addPrimaryKeyFieldName("PTRTREATPROC_TEMPLATE.TREATPROC_TEMPLATE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRTREATPROC_TEMPLATE.TREATPROC_TEMPLATE_ID");
    descriptor.setSequenceNumberName("TREATPROC_TEMPLATE_ID_SEQ");
    descriptor.setAlias("PtrtreatprocTemplate");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping costMapping = new DirectToFieldMapping();
    costMapping.setAttributeName("cost");
    costMapping.setFieldName("PTRTREATPROC_TEMPLATE.COST");
    descriptor.addMapping(costMapping);

    DirectToFieldMapping daysDurationMapping = new DirectToFieldMapping();
    daysDurationMapping.setAttributeName("daysDuration");
    daysDurationMapping.setFieldName("PTRTREATPROC_TEMPLATE.DAYS_DURATION");
    descriptor.addMapping(daysDurationMapping);

    DirectToFieldMapping leadTimeHoursMapping = new DirectToFieldMapping();
    leadTimeHoursMapping.setAttributeName("leadTimeHours");
    leadTimeHoursMapping.setFieldName("PTRTREATPROC_TEMPLATE.LEAD_TIME_HOURS");
    descriptor.addMapping(leadTimeHoursMapping);

    DirectToFieldMapping notifierProcessMapping = new DirectToFieldMapping();
    notifierProcessMapping.setAttributeName("notifierProcess");
    notifierProcessMapping
        .setFieldName("PTRTREATPROC_TEMPLATE.NOTIFIER_PROCESS");
    descriptor.addMapping(notifierProcessMapping);

    DirectToFieldMapping treatprocSubtypeIdMapping = new DirectToFieldMapping();
    treatprocSubtypeIdMapping.setAttributeName("treatprocSubtypeId");
    treatprocSubtypeIdMapping
        .setFieldName("PTRTREATPROC_TEMPLATE.TREATPROC_SUBTYPE_ID");
    descriptor.addMapping(treatprocSubtypeIdMapping);

    DirectToFieldMapping treatprocTemplateIdMapping = new DirectToFieldMapping();
    treatprocTemplateIdMapping.setAttributeName("treatprocTemplateId");
    treatprocTemplateIdMapping
        .setFieldName("PTRTREATPROC_TEMPLATE.TREATPROC_TEMPLATE_ID");
    descriptor.addMapping(treatprocTemplateIdMapping);

    DirectToFieldMapping treatprocTypeIdMapping = new DirectToFieldMapping();
    treatprocTypeIdMapping.setAttributeName("treatprocTypeId");
    treatprocTypeIdMapping
        .setFieldName("PTRTREATPROC_TEMPLATE.TREATPROC_TYPE_ID");
    descriptor.addMapping(treatprocTypeIdMapping);

    DirectToFieldMapping updateHostMapping = new DirectToFieldMapping();
    updateHostMapping.setAttributeName("updateHost");
    updateHostMapping.setFieldName("PTRTREATPROC_TEMPLATE.UPDATE_HOST");
    descriptor.addMapping(updateHostMapping);

    OneToOneMapping documentTemplateMapping = new OneToOneMapping();
    documentTemplateMapping.setAttributeName("documentTemplate");
    documentTemplateMapping
        .setReferenceClass(com.profitera.descriptor.db.treatment.Template.class);
    documentTemplateMapping.useBasicIndirection();
    documentTemplateMapping
        .addForeignKeyFieldName("PTRTREATPROC_TEMPLATE.DOCUMENT_TEMPLATE_ID",
            "PTRTEMPLATE.TEMPLATE_ID");
    descriptor.addMapping(documentTemplateMapping);

    OneToOneMapping notifierCodeRefMapping = new OneToOneMapping();
    notifierCodeRefMapping.setAttributeName("notifierCodeRef");
    notifierCodeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.NotifierCodeRef.class);
    notifierCodeRefMapping.useBasicIndirection();
    notifierCodeRefMapping.addForeignKeyFieldName(
        "PTRTREATPROC_TEMPLATE.NOTIFIER_CODE_ID", "PTRNOTIFIER_CODE_REF.ID");
    descriptor.addMapping(notifierCodeRefMapping);

    return descriptor;
  }

  public Descriptor buildUnbilledTypeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.UnbilledTypeRef.class);
    descriptor.addTableName("PTRUNBILLED_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor
        .setSequenceNumberFieldName("PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrunbilledTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRUNBILLED_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRUNBILLED_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping unbilledTypeCodeMapping = new DirectToFieldMapping();
    unbilledTypeCodeMapping.setAttributeName("unbilledTypeCode");
    unbilledTypeCodeMapping
        .setFieldName("PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_CODE");
    descriptor.addMapping(unbilledTypeCodeMapping);

    DirectToFieldMapping unbilledTypeDescMapping = new DirectToFieldMapping();
    unbilledTypeDescMapping.setAttributeName("unbilledTypeDesc");
    unbilledTypeDescMapping
        .setFieldName("PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_DESC");
    unbilledTypeDescMapping.setNullValue("");
    descriptor.addMapping(unbilledTypeDescMapping);

    DirectToFieldMapping unbilledTypeIdMapping = new DirectToFieldMapping();
    unbilledTypeIdMapping.setAttributeName("unbilledTypeId");
    unbilledTypeIdMapping.setFieldName("PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_ID");
    descriptor.addMapping(unbilledTypeIdMapping);

    ManyToManyMapping transcationCodeRefMapping = new ManyToManyMapping();
    transcationCodeRefMapping.setAttributeName("transcationCodeRef");
    transcationCodeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TransactionCodeRef.class);
    transcationCodeRefMapping.useBasicIndirection();
    transcationCodeRefMapping.setRelationTableName("PTRUNBILLED_INV_SUMM_REL");
    transcationCodeRefMapping.addSourceRelationKeyFieldName(
        "PTRUNBILLED_INV_SUMM_REL.UNBILLED_TYPE_ID",
        "PTRUNBILLED_TYPE_REF.UNBILLED_TYPE_ID");
    transcationCodeRefMapping
        .addTargetRelationKeyFieldName("PTRUNBILLED_INV_SUMM_REL.INV_SUMM_ID",
            "PTRTRAN_CODE_REF.TRAN_CODE_ID");
    descriptor.addMapping(transcationCodeRefMapping);

    return descriptor;
  }

  public Descriptor buildUomMeasureRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.UomMeasureRef.class);
    descriptor.addTableName("PTRUOM_MEASURE_REF");
    descriptor.addPrimaryKeyFieldName("PTRUOM_MEASURE_REF.UOM_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRUOM_MEASURE_REF.UOM_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtruomMeasureRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRUOM_MEASURE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRUOM_MEASURE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping uomCategoryMapping = new DirectToFieldMapping();
    uomCategoryMapping.setAttributeName("uomCategory");
    uomCategoryMapping.setFieldName("PTRUOM_MEASURE_REF.UOM_CATEGORY");
    descriptor.addMapping(uomCategoryMapping);

    DirectToFieldMapping uomIdMapping = new DirectToFieldMapping();
    uomIdMapping.setAttributeName("uomId");
    uomIdMapping.setFieldName("PTRUOM_MEASURE_REF.UOM_ID");
    descriptor.addMapping(uomIdMapping);

    DirectToFieldMapping uomTypeMapping = new DirectToFieldMapping();
    uomTypeMapping.setAttributeName("uomType");
    uomTypeMapping.setFieldName("PTRUOM_MEASURE_REF.UOM_TYPE");
    descriptor.addMapping(uomTypeMapping);

    DirectToFieldMapping uomValueMapping = new DirectToFieldMapping();
    uomValueMapping.setAttributeName("uomValue");
    uomValueMapping.setFieldName("PTRUOM_MEASURE_REF.UOM_VALUE");
    descriptor.addMapping(uomValueMapping);

    return descriptor;
  }

  public Descriptor buildUserDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.user.User.class);
    descriptor.addTableName("PTRUSER");
    descriptor.addPrimaryKeyFieldName("PTRUSER.USER_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("Ptruser");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping activeStatusMapping = new DirectToFieldMapping();
    activeStatusMapping.setAttributeName("activeStatus");
    activeStatusMapping.setFieldName("PTRUSER.ACTIVE_STATUS");
    descriptor.addMapping(activeStatusMapping);

    DirectToFieldMapping createDateMapping = new DirectToFieldMapping();
    createDateMapping.setAttributeName("createDate");
    createDateMapping.setFieldName("PTRUSER.CREATE_DATE");
    descriptor.addMapping(createDateMapping);

    DirectToFieldMapping isCollectorMapping = new DirectToFieldMapping();
    isCollectorMapping.setAttributeName("isCollector");
    isCollectorMapping.setFieldName("PTRUSER.IS_COLLECTOR");
    descriptor.addMapping(isCollectorMapping);

    DirectToFieldMapping logonStatusMapping = new DirectToFieldMapping();
    logonStatusMapping.setAttributeName("logonStatus");
    logonStatusMapping.setFieldName("PTRUSER.LOGON_STATUS");
    descriptor.addMapping(logonStatusMapping);

    DirectToFieldMapping passwdExpDateMapping = new DirectToFieldMapping();
    passwdExpDateMapping.setAttributeName("passwdExpDate");
    passwdExpDateMapping.setFieldName("PTRUSER.PASSWD_EXP_DATE");
    descriptor.addMapping(passwdExpDateMapping);

    DirectToFieldMapping passwordMapping = new DirectToFieldMapping();
    passwordMapping.setAttributeName("password");
    passwordMapping.setFieldName("PTRUSER.PASSWORD");
    descriptor.addMapping(passwordMapping);

    DirectToFieldMapping userEmailAddressMapping = new DirectToFieldMapping();
    userEmailAddressMapping.setAttributeName("userEmailAddress");
    userEmailAddressMapping.setFieldName("PTRUSER.USER_EMAIL_ADDRESS");
    descriptor.addMapping(userEmailAddressMapping);

    DirectToFieldMapping userExpDateMapping = new DirectToFieldMapping();
    userExpDateMapping.setAttributeName("userExpDate");
    userExpDateMapping.setFieldName("PTRUSER.USER_EXP_DATE");
    descriptor.addMapping(userExpDateMapping);

    DirectToFieldMapping userIdMapping = new DirectToFieldMapping();
    userIdMapping.setAttributeName("userId");
    userIdMapping.setFieldName("PTRUSER.USER_ID");
    descriptor.addMapping(userIdMapping);

    OneToOneMapping agencyMapping = new OneToOneMapping();
    agencyMapping.setAttributeName("agency");
    agencyMapping
        .setReferenceClass(com.profitera.descriptor.db.client.Agency.class);
    agencyMapping.useBasicIndirection();
    agencyMapping.addForeignKeyFieldName("PTRUSER.AGENCY_ID",
        "PTRAGENCY.AGENCY_ID");
    descriptor.addMapping(agencyMapping);

    OneToOneMapping employeeMapping = new OneToOneMapping();
    employeeMapping.setAttributeName("employee");
    employeeMapping
        .setReferenceClass(com.profitera.descriptor.db.user.Employee.class);
    employeeMapping.useBasicIndirection();
    employeeMapping.addForeignKeyFieldName("PTRUSER.EMPLOYEE_ID",
        "PTREMPLOYEE.EMPLOYEE_ID");
    descriptor.addMapping(employeeMapping);

    OneToManyMapping passwordHistoryMapping = new OneToManyMapping();
    passwordHistoryMapping.setAttributeName("passwordHistory");
    passwordHistoryMapping
        .setReferenceClass(com.profitera.descriptor.db.history.PasswordHistory.class);
    passwordHistoryMapping.useBasicIndirection();
    passwordHistoryMapping.addTargetForeignKeyFieldName(
        "PTRPASSWORD_HISTORY.USER_ID", "PTRUSER.USER_ID");
    descriptor.addMapping(passwordHistoryMapping);

    ManyToManyMapping rolesMapping = new ManyToManyMapping();
    rolesMapping.setAttributeName("roles");
    rolesMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.UserRoleRef.class);
    rolesMapping.useBasicIndirection();
    rolesMapping.setRelationTableName("PTRUSER_ROLE");
    rolesMapping.addSourceRelationKeyFieldName("PTRUSER_ROLE.USER_ID",
        "PTRUSER.USER_ID");
    rolesMapping.addTargetRelationKeyFieldName("PTRUSER_ROLE.ROLE_ID",
        "PTRUSER_ROLE_REF.ROLE_ID");
    descriptor.addMapping(rolesMapping);

    ManyToManyMapping teamsMapping = new ManyToManyMapping();
    teamsMapping.setAttributeName("teams");
    teamsMapping
        .setReferenceClass(com.profitera.descriptor.db.user.UserTeams.class);
    teamsMapping.useBasicIndirection();
    teamsMapping.setRelationTableName("PTRUSER_TEAM_LINK");
    teamsMapping.addSourceRelationKeyFieldName("PTRUSER_TEAM_LINK.USER_ID",
        "PTRUSER.USER_ID");
    teamsMapping.addTargetRelationKeyFieldName("PTRUSER_TEAM_LINK.TEAM_ID",
        "PTRUSER_TEAMS.TEAM_ID");
    descriptor.addMapping(teamsMapping);

    ManyToManyMapping worklistsMapping = new ManyToManyMapping();
    worklistsMapping.setAttributeName("worklists");
    worklistsMapping
        .setReferenceClass(com.profitera.descriptor.db.worklist.WorkList.class);
    worklistsMapping.useBasicIndirection();
    worklistsMapping.setRelationTableName("PTRUSER_WL_ASSIGN");
    worklistsMapping.addSourceRelationKeyFieldName("PTRUSER_WL_ASSIGN.USER_ID",
        "PTRUSER.USER_ID");
    worklistsMapping.addTargetRelationKeyFieldName(
        "PTRUSER_WL_ASSIGN.WORK_LIST_ID", "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(worklistsMapping);

    return descriptor;
  }

  public Descriptor buildUserRoleRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.UserRoleRef.class);
    descriptor.addTableName("PTRUSER_ROLE_REF");
    descriptor.addPrimaryKeyFieldName("PTRUSER_ROLE_REF.ROLE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRUSER_ROLE_REF.ROLE_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtruserRoleRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRUSER_ROLE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping profileMapping = new DirectToFieldMapping();
    profileMapping.setAttributeName("profile");
    profileMapping.setFieldName("PTRUSER_ROLE_REF.PROFILE");
    descriptor.addMapping(profileMapping);

    DirectToFieldMapping roleCreatedByMapping = new DirectToFieldMapping();
    roleCreatedByMapping.setAttributeName("roleCreatedBy");
    roleCreatedByMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_CREATE_BY");
    descriptor.addMapping(roleCreatedByMapping);

    DirectToFieldMapping roleCreatedDateMapping = new DirectToFieldMapping();
    roleCreatedDateMapping.setAttributeName("roleCreatedDate");
    roleCreatedDateMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_CREATE_DATE");
    descriptor.addMapping(roleCreatedDateMapping);

    DirectToFieldMapping roleDescMapping = new DirectToFieldMapping();
    roleDescMapping.setAttributeName("roleDesc");
    roleDescMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_DESC");
    roleDescMapping.setNullValue("");
    descriptor.addMapping(roleDescMapping);

    DirectToFieldMapping roleExpiryDateMapping = new DirectToFieldMapping();
    roleExpiryDateMapping.setAttributeName("roleExpiryDate");
    roleExpiryDateMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_EXPIRY_DATE");
    descriptor.addMapping(roleExpiryDateMapping);

    DirectToFieldMapping roleIdMapping = new DirectToFieldMapping();
    roleIdMapping.setAttributeName("roleId");
    roleIdMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_ID");
    descriptor.addMapping(roleIdMapping);

    DirectToFieldMapping roleNameMapping = new DirectToFieldMapping();
    roleNameMapping.setAttributeName("roleName");
    roleNameMapping.setFieldName("PTRUSER_ROLE_REF.ROLE_NAME");
    descriptor.addMapping(roleNameMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRUSER_ROLE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    ManyToManyMapping accessRightsMapping = new ManyToManyMapping();
    accessRightsMapping.setAttributeName("accessRights");
    accessRightsMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AccessRightsRef.class);
    accessRightsMapping.useBasicIndirection();
    accessRightsMapping.setRelationTableName("PTRROLE_ACCESS_REL");
    accessRightsMapping.addSourceRelationKeyFieldName(
        "PTRROLE_ACCESS_REL.ROLE_ID", "PTRUSER_ROLE_REF.ROLE_ID");
    accessRightsMapping.addTargetRelationKeyFieldName(
        "PTRROLE_ACCESS_REL.ACCESS_RIGHTS_ID",
        "PTRACCESS_RIGHTS_REF.ACCESS_RIGHTS_ID");
    descriptor.addMapping(accessRightsMapping);

    ManyToManyMapping usersMapping = new ManyToManyMapping();
    usersMapping.setAttributeName("users");
    usersMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    usersMapping.useBasicIndirection();
    usersMapping.readOnly();
    usersMapping.setRelationTableName("PTRUSER_ROLE");
    usersMapping.addSourceRelationKeyFieldName("PTRUSER_ROLE.ROLE_ID",
        "PTRUSER_ROLE_REF.ROLE_ID");
    usersMapping.addTargetRelationKeyFieldName("PTRUSER_ROLE.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(usersMapping);

    return descriptor;
  }

  public Descriptor buildUserTeamsDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.user.UserTeams.class);
    descriptor.addTableName("PTRUSER_TEAMS");
    descriptor.addPrimaryKeyFieldName("PTRUSER_TEAMS.TEAM_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtruserTeams");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping autoAssignMapping = new DirectToFieldMapping();
    autoAssignMapping.setAttributeName("autoAssign");
    autoAssignMapping.setFieldName("PTRUSER_TEAMS.AUTO_ASSIGN");
    descriptor.addMapping(autoAssignMapping);

    DirectToFieldMapping departmentMapping = new DirectToFieldMapping();
    departmentMapping.setAttributeName("department");
    departmentMapping.setFieldName("PTRUSER_TEAMS.DEPARTMENT");
    descriptor.addMapping(departmentMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRUSER_TEAMS.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRUSER_TEAMS.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping teamCapacityMapping = new DirectToFieldMapping();
    teamCapacityMapping.setAttributeName("teamCapacity");
    teamCapacityMapping.setFieldName("PTRUSER_TEAMS.TEAM_CAPACITY");
    descriptor.addMapping(teamCapacityMapping);

    DirectToFieldMapping teamCreateByMapping = new DirectToFieldMapping();
    teamCreateByMapping.setAttributeName("teamCreateBy");
    teamCreateByMapping.setFieldName("PTRUSER_TEAMS.TEAM_CREATE_BY");
    descriptor.addMapping(teamCreateByMapping);

    DirectToFieldMapping teamCreateDateMapping = new DirectToFieldMapping();
    teamCreateDateMapping.setAttributeName("teamCreateDate");
    teamCreateDateMapping.setFieldName("PTRUSER_TEAMS.TEAM_CREATE_DATE");
    descriptor.addMapping(teamCreateDateMapping);

    DirectToFieldMapping teamDescMapping = new DirectToFieldMapping();
    teamDescMapping.setAttributeName("teamDesc");
    teamDescMapping.setFieldName("PTRUSER_TEAMS.TEAM_DESC");
    descriptor.addMapping(teamDescMapping);

    DirectToFieldMapping teamIdMapping = new DirectToFieldMapping();
    teamIdMapping.setAttributeName("teamId");
    teamIdMapping.setFieldName("PTRUSER_TEAMS.TEAM_ID");
    descriptor.addMapping(teamIdMapping);

    OneToOneMapping businessUnitMapping = new OneToOneMapping();
    businessUnitMapping.setAttributeName("businessUnit");
    businessUnitMapping
        .setReferenceClass(com.profitera.descriptor.db.user.BusinessUnit.class);
    businessUnitMapping.useBasicIndirection();
    businessUnitMapping.addForeignKeyFieldName("PTRUSER_TEAMS.BRANCH_ID",
        "PTRBUSINESS_UNIT.BRANCH_ID");
    descriptor.addMapping(businessUnitMapping);

    OneToOneMapping teamLeaderMapping = new OneToOneMapping();
    teamLeaderMapping.setAttributeName("teamLeader");
    teamLeaderMapping
        .setReferenceClass(com.profitera.descriptor.db.user.User.class);
    teamLeaderMapping.useBasicIndirection();
    teamLeaderMapping.addForeignKeyFieldName("PTRUSER_TEAMS.TEAM_LEADER",
        "PTRUSER.USER_ID");
    descriptor.addMapping(teamLeaderMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRUSER_TEAMS.TEAM_TREATMENT_STAGE",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    ManyToManyMapping usersMapping = new ManyToManyMapping();
    usersMapping.setAttributeName("users");
    usersMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    usersMapping.useBasicIndirection();
    usersMapping.readOnly();
    usersMapping.setRelationTableName("PTRUSER_TEAM_LINK");
    usersMapping.addSourceRelationKeyFieldName("PTRUSER_TEAM_LINK.TEAM_ID",
        "PTRUSER_TEAMS.TEAM_ID");
    usersMapping.addTargetRelationKeyFieldName("PTRUSER_TEAM_LINK.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(usersMapping);

    return descriptor;
  }

  public Descriptor buildUserWorkListAssignDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.user.UserWorkListAssign.class);
    descriptor.addTableName("PTRUSER_WL_ASSIGN");
    descriptor.addPrimaryKeyFieldName("PTRUSER_WL_ASSIGN.USER_ID");
    descriptor.addPrimaryKeyFieldName("PTRUSER_WL_ASSIGN.WORK_LIST_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtruserWlAssign");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping completedByDateMapping = new DirectToFieldMapping();
    completedByDateMapping.setAttributeName("completedByDate");
    completedByDateMapping.setFieldName("PTRUSER_WL_ASSIGN.COMPLETED_BY_DATE");
    descriptor.addMapping(completedByDateMapping);

    DirectToFieldMapping effectiveDateMapping = new DirectToFieldMapping();
    effectiveDateMapping.setAttributeName("effectiveDate");
    effectiveDateMapping.setFieldName("PTRUSER_WL_ASSIGN.EFFECTIVE_DATE");
    descriptor.addMapping(effectiveDateMapping);

    DirectToFieldMapping expiryDateMapping = new DirectToFieldMapping();
    expiryDateMapping.setAttributeName("expiryDate");
    expiryDateMapping.setFieldName("PTRUSER_WL_ASSIGN.EXPIRY_DATE");
    descriptor.addMapping(expiryDateMapping);

    DirectToFieldMapping priorityMapping = new DirectToFieldMapping();
    priorityMapping.setAttributeName("priority");
    priorityMapping.setFieldName("PTRUSER_WL_ASSIGN.PRIORITY");
    descriptor.addMapping(priorityMapping);

    OneToOneMapping assignerMapping = new OneToOneMapping();
    assignerMapping.setAttributeName("assigner");
    assignerMapping
        .setReferenceClass(com.profitera.descriptor.db.user.User.class);
    assignerMapping.useBasicIndirection();
    assignerMapping.addForeignKeyFieldName("PTRUSER_WL_ASSIGN.ASSIGNER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(assignerMapping);

    OneToOneMapping userMapping = new OneToOneMapping();
    userMapping.setAttributeName("user");
    userMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    userMapping.useBasicIndirection();
    userMapping.addForeignKeyFieldName("PTRUSER_WL_ASSIGN.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(userMapping);

    OneToOneMapping workListMapping = new OneToOneMapping();
    workListMapping.setAttributeName("workList");
    workListMapping
        .setReferenceClass(com.profitera.descriptor.db.worklist.WorkList.class);
    workListMapping.useBasicIndirection();
    workListMapping.addForeignKeyFieldName("PTRUSER_WL_ASSIGN.WORK_LIST_ID",
        "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(workListMapping);

    return descriptor;
  }

  public Descriptor buildWaiveReasonRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.WaiveReasonRef.class);
    descriptor.addTableName("PTRWAIV_REASON_REF");
    descriptor.addPrimaryKeyFieldName("PTRWAIV_REASON_REF.WAIV_REASON_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRWAIV_REASON_REF.WAIV_REASON_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrwaivReasonRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRWAIV_REASON_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRWAIV_REASON_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping waivReasonCodeMapping = new DirectToFieldMapping();
    waivReasonCodeMapping.setAttributeName("waivReasonCode");
    waivReasonCodeMapping.setFieldName("PTRWAIV_REASON_REF.WAIV_REASON_CODE");
    descriptor.addMapping(waivReasonCodeMapping);

    DirectToFieldMapping waivReasonDescMapping = new DirectToFieldMapping();
    waivReasonDescMapping.setAttributeName("waivReasonDesc");
    waivReasonDescMapping.setFieldName("PTRWAIV_REASON_REF.WAIV_REASON_DESC");
    waivReasonDescMapping.setNullValue("");
    descriptor.addMapping(waivReasonDescMapping);

    DirectToFieldMapping waivReasonIdMapping = new DirectToFieldMapping();
    waivReasonIdMapping.setAttributeName("waivReasonId");
    waivReasonIdMapping.setFieldName("PTRWAIV_REASON_REF.WAIV_REASON_ID");
    descriptor.addMapping(waivReasonIdMapping);

    return descriptor;
  }

  public Descriptor buildWeekendRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.WeekendRef.class);
    descriptor.addTableName("PTRWEEKEND_REF");
    descriptor.addPrimaryKeyFieldName("PTRWEEKEND_REF.WEEKEND_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRWEEKEND_REF.WEEKEND_ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrweekendRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRWEEKEND_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRWEEKEND_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping weekendCodeMapping = new DirectToFieldMapping();
    weekendCodeMapping.setAttributeName("weekendCode");
    weekendCodeMapping.setFieldName("PTRWEEKEND_REF.WEEKEND_CODE");
    descriptor.addMapping(weekendCodeMapping);

    DirectToFieldMapping weekendDescMapping = new DirectToFieldMapping();
    weekendDescMapping.setAttributeName("weekendDesc");
    weekendDescMapping.setFieldName("PTRWEEKEND_REF.WEEKEND_DESC");
    descriptor.addMapping(weekendDescMapping);

    DirectToFieldMapping weekendIdMapping = new DirectToFieldMapping();
    weekendIdMapping.setAttributeName("weekendId");
    weekendIdMapping.setFieldName("PTRWEEKEND_REF.WEEKEND_ID");
    descriptor.addMapping(weekendIdMapping);

    return descriptor;
  }


  public Descriptor buildWorkListBlockCodeDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.worklist.WorkListBlockCode.class);
    descriptor.addTableName("PTRWORK_LIST_BLOCK_CODE");
    descriptor.addPrimaryKeyFieldName("PTRWORK_LIST_BLOCK_CODE.WORKLIST_ID");
    descriptor.addPrimaryKeyFieldName("PTRWORK_LIST_BLOCK_CODE.BLOCK_CODE_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrworkListBlockCode");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    OneToOneMapping blockCodeRefMapping = new OneToOneMapping();
    blockCodeRefMapping.setAttributeName("blockCodeRef");
    blockCodeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.BlockCodeRef.class);
    blockCodeRefMapping.useBasicIndirection();
    blockCodeRefMapping.addForeignKeyFieldName(
        "PTRWORK_LIST_BLOCK_CODE.BLOCK_CODE_ID",
        "PTRBLOCK_CODE_REF.BLOCK_CODE_ID");
    descriptor.addMapping(blockCodeRefMapping);

    OneToOneMapping worklistMapping = new OneToOneMapping();
    worklistMapping.setAttributeName("worklist");
    worklistMapping
        .setReferenceClass(com.profitera.descriptor.db.worklist.WorkList.class);
    worklistMapping.useBasicIndirection();
    worklistMapping.addForeignKeyFieldName(
        "PTRWORK_LIST_BLOCK_CODE.WORKLIST_ID", "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(worklistMapping);

    return descriptor;
  }

  public Descriptor buildWorkListDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.worklist.WorkList.class);
    descriptor.addTableName("PTRWORK_LIST");
    descriptor.addPrimaryKeyFieldName("PTRWORK_LIST.WORK_LIST_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRWORK_LIST.WORK_LIST_ID");
    descriptor.setSequenceNumberName("WORK_LIST_ID_SEQ");
    descriptor.setAlias("PtrworkList");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRWORK_LIST.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping forUnassignedMapping = new DirectToFieldMapping();
    forUnassignedMapping.setAttributeName("forUnassigned");
    forUnassignedMapping.setFieldName("PTRWORK_LIST.FOR_UNASSIGNED");
    descriptor.addMapping(forUnassignedMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRWORK_LIST.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    DirectToFieldMapping workListCreateDateMapping = new DirectToFieldMapping();
    workListCreateDateMapping.setAttributeName("workListCreateDate");
    workListCreateDateMapping
        .setFieldName("PTRWORK_LIST.WORK_LIST_CREATE_DATE");
    descriptor.addMapping(workListCreateDateMapping);

    DirectToFieldMapping workListDescMapping = new DirectToFieldMapping();
    workListDescMapping.setAttributeName("workListDesc");
    workListDescMapping.setFieldName("PTRWORK_LIST.WORK_LIST_DESC");
    descriptor.addMapping(workListDescMapping);

    DirectToFieldMapping workListEffectiveDateMapping = new DirectToFieldMapping();
    workListEffectiveDateMapping.setAttributeName("workListEffectiveDate");
    workListEffectiveDateMapping
        .setFieldName("PTRWORK_LIST.WORK_LIST_EFFECTIVE_DATE");
    descriptor.addMapping(workListEffectiveDateMapping);

    DirectToFieldMapping workListExpiryDateMapping = new DirectToFieldMapping();
    workListExpiryDateMapping.setAttributeName("workListExpiryDate");
    workListExpiryDateMapping
        .setFieldName("PTRWORK_LIST.WORK_LIST_EXPIRY_DATE");
    descriptor.addMapping(workListExpiryDateMapping);

    DirectToFieldMapping workListIdMapping = new DirectToFieldMapping();
    workListIdMapping.setAttributeName("workListId");
    workListIdMapping.setFieldName("PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(workListIdMapping);

    DirectToFieldMapping workListNameMapping = new DirectToFieldMapping();
    workListNameMapping.setAttributeName("workListName");
    workListNameMapping.setFieldName("PTRWORK_LIST.WORK_LIST_NAME");
    descriptor.addMapping(workListNameMapping);

    OneToOneMapping agencyTypeRefMapping = new OneToOneMapping();
    agencyTypeRefMapping.setAttributeName("agencyTypeRef");
    agencyTypeRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.AgencyTypeRef.class);
    agencyTypeRefMapping.useBasicIndirection();
    agencyTypeRefMapping.addForeignKeyFieldName("PTRWORK_LIST.AGENCY_TYPE_ID",
        "PTRAGY_TYPE_REF.AGY_TYPE_ID");
    descriptor.addMapping(agencyTypeRefMapping);

    OneToOneMapping treatmentStageRefMapping = new OneToOneMapping();
    treatmentStageRefMapping.setAttributeName("treatmentStageRef");
    treatmentStageRefMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.TreatmentStageRef.class);
    treatmentStageRefMapping.useBasicIndirection();
    treatmentStageRefMapping.addForeignKeyFieldName(
        "PTRWORK_LIST.TREATMENT_STAGE_ID",
        "PTRTREATMENT_STAGE_REF.TREATMENT_STAGE_ID");
    descriptor.addMapping(treatmentStageRefMapping);

    OneToOneMapping workListCreatorMapping = new OneToOneMapping();
    workListCreatorMapping.setAttributeName("workListCreator");
    workListCreatorMapping
        .setReferenceClass(com.profitera.descriptor.db.user.User.class);
    workListCreatorMapping.useBasicIndirection();
    workListCreatorMapping.addForeignKeyFieldName(
        "PTRWORK_LIST.WORK_LIST_CREATOR_ID", "PTRUSER.USER_ID");
    descriptor.addMapping(workListCreatorMapping);

    OneToManyMapping accountsMapping = new OneToManyMapping();
    accountsMapping.setAttributeName("accounts");
    accountsMapping
        .setReferenceClass(com.profitera.descriptor.db.account.Account.class);
    accountsMapping.useBasicIndirection();
    accountsMapping.addTargetForeignKeyFieldName("PTRACCOUNT.WORK_LIST_ID",
        "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(accountsMapping);

    OneToManyMapping userWorkListAssignMapping = new OneToManyMapping();
    userWorkListAssignMapping.setAttributeName("userWorkListAssign");
    userWorkListAssignMapping
        .setReferenceClass(com.profitera.descriptor.db.user.UserWorkListAssign.class);
    userWorkListAssignMapping.useBasicIndirection();
    userWorkListAssignMapping.addTargetForeignKeyFieldName(
        "PTRUSER_WL_ASSIGN.WORK_LIST_ID", "PTRWORK_LIST.WORK_LIST_ID");
    descriptor.addMapping(userWorkListAssignMapping);

    ManyToManyMapping blockCodeMapping = new ManyToManyMapping();
    blockCodeMapping.setAttributeName("blockCode");
    blockCodeMapping
        .setReferenceClass(com.profitera.descriptor.db.reference.BlockCodeRef.class);
    blockCodeMapping.useBasicIndirection();
    blockCodeMapping
        .useCollectionClass(oracle.toplink.indirection.IndirectList.class);
    blockCodeMapping.setRelationTableName("PTRWORK_LIST_BLOCK_CODE");
    blockCodeMapping.addSourceRelationKeyFieldName(
        "PTRWORK_LIST_BLOCK_CODE.WORKLIST_ID", "PTRWORK_LIST.WORK_LIST_ID");
    blockCodeMapping.addTargetRelationKeyFieldName(
        "PTRWORK_LIST_BLOCK_CODE.BLOCK_CODE_ID",
        "PTRBLOCK_CODE_REF.BLOCK_CODE_ID");
    descriptor.addMapping(blockCodeMapping);

    ManyToManyMapping usersMapping = new ManyToManyMapping();
    usersMapping.setAttributeName("users");
    usersMapping.setReferenceClass(com.profitera.descriptor.db.user.User.class);
    usersMapping.useBasicIndirection();
    usersMapping.readOnly();
    usersMapping.setRelationTableName("PTRUSER_WL_ASSIGN");
    usersMapping.addSourceRelationKeyFieldName(
        "PTRUSER_WL_ASSIGN.WORK_LIST_ID", "PTRWORK_LIST.WORK_LIST_ID");
    usersMapping.addTargetRelationKeyFieldName("PTRUSER_WL_ASSIGN.USER_ID",
        "PTRUSER.USER_ID");
    descriptor.addMapping(usersMapping);

    return descriptor;
  }

  public Descriptor buildWorklistHistoryDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.worklist.WorklistHistory.class);
    descriptor.addTableName("PTRWORKLIST_HISTORY");
    descriptor
        .addPrimaryKeyFieldName("PTRWORKLIST_HISTORY.WORKLIST_HISTORY_ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrworklistHistory");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping assignedDateTimeMapping = new DirectToFieldMapping();
    assignedDateTimeMapping.setAttributeName("assignedDateTime");
    assignedDateTimeMapping
        .setFieldName("PTRWORKLIST_HISTORY.ASSIGNED_DATE_TIME");
    descriptor.addMapping(assignedDateTimeMapping);

    DirectToFieldMapping customerIdMapping = new DirectToFieldMapping();
    customerIdMapping.setAttributeName("customerId");
    customerIdMapping.setFieldName("PTRWORKLIST_HISTORY.CUSTOMER_ID");
    descriptor.addMapping(customerIdMapping);

    DirectToFieldMapping delinquentAmtMapping = new DirectToFieldMapping();
    delinquentAmtMapping.setAttributeName("delinquentAmt");
    delinquentAmtMapping.setFieldName("PTRWORKLIST_HISTORY.DELINQUENT_AMT");
    descriptor.addMapping(delinquentAmtMapping);

    DirectToFieldMapping endDateTimeMapping = new DirectToFieldMapping();
    endDateTimeMapping.setAttributeName("endDateTime");
    endDateTimeMapping.setFieldName("PTRWORKLIST_HISTORY.END_DATE_TIME");
    descriptor.addMapping(endDateTimeMapping);

    DirectToFieldMapping movedDateTimeMapping = new DirectToFieldMapping();
    movedDateTimeMapping.setAttributeName("movedDateTime");
    movedDateTimeMapping.setFieldName("PTRWORKLIST_HISTORY.MOVED_DATE_TIME");
    descriptor.addMapping(movedDateTimeMapping);

    DirectToFieldMapping startDateTimeMapping = new DirectToFieldMapping();
    startDateTimeMapping.setAttributeName("startDateTime");
    startDateTimeMapping.setFieldName("PTRWORKLIST_HISTORY.START_DATE_TIME");
    descriptor.addMapping(startDateTimeMapping);

    DirectToFieldMapping userIdMapping = new DirectToFieldMapping();
    userIdMapping.setAttributeName("userId");
    userIdMapping.setFieldName("PTRWORKLIST_HISTORY.USER_ID");
    descriptor.addMapping(userIdMapping);

    DirectToFieldMapping workListIdMapping = new DirectToFieldMapping();
    workListIdMapping.setAttributeName("workListId");
    workListIdMapping.setFieldName("PTRWORKLIST_HISTORY.WORK_LIST_ID");
    descriptor.addMapping(workListIdMapping);

    DirectToFieldMapping worklistHistoryIdMapping = new DirectToFieldMapping();
    worklistHistoryIdMapping.setAttributeName("worklistHistoryId");
    worklistHistoryIdMapping
        .setFieldName("PTRWORKLIST_HISTORY.WORKLIST_HISTORY_ID");
    descriptor.addMapping(worklistHistoryIdMapping);

    DirectToFieldMapping worklistStatusMapping = new DirectToFieldMapping();
    worklistStatusMapping.setAttributeName("worklistStatus");
    worklistStatusMapping.setFieldName("PTRWORKLIST_HISTORY.WORKLIST_STATUS");
    descriptor.addMapping(worklistStatusMapping);

    return descriptor;
  }

  public Descriptor buildUserCode3RefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.reference.UserCode3Ref.class);
    descriptor.addTableName("PTRUSER_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRUSER_CODE_REF.ID");
    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setAlias("PtrprofileCodeRef");
    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    // Mappings.
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRUSER_CODE_REF.ID");
    descriptor.addMapping(idMapping);
    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRUSER_CODE_REF.CODE");
    descriptor.addMapping(codeMapping);
    return descriptor;    
  }
  
  public Descriptor buildProfileCodeRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor
        .setJavaClass(com.profitera.descriptor.db.reference.ProfileCodeRef.class);
    descriptor.addTableName("PTRPROFILE_CODE_REF");
    descriptor.addPrimaryKeyFieldName("PTRPROFILE_CODE_REF.ID");

    // Descriptor properties.
    descriptor.useSoftCacheWeakIdentityMap();
    descriptor.setIdentityMapSize(100);
    descriptor.useRemoteSoftCacheWeakIdentityMap();
    descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRPROFILE_CODE_REF.ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");
    descriptor.setAlias("PtrprofileCodeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.

    // Mappings.
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRPROFILE_CODE_REF.ID");
    descriptor.addMapping(idMapping);

    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRPROFILE_CODE_REF.CODE");
    descriptor.addMapping(codeMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRPROFILE_CODE_REF.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRPROFILE_CODE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRPROFILE_CODE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }
  
  public Descriptor buildAccountRelationshipRefDescriptor() {
    Descriptor descriptor = new Descriptor();
    descriptor.setJavaClass(com.profitera.descriptor.db.reference.AccountRelationshipRef.class);
    descriptor.addTableName("PTRACCOUNT_RELATIONSHIP_TYPE_REF");
    descriptor.addPrimaryKeyFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.ID");

    // Descriptor properties.
	descriptor.useSoftCacheWeakIdentityMap();
	descriptor.setIdentityMapSize(100);
	descriptor.useRemoteSoftCacheWeakIdentityMap();
	descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");	
	descriptor.setAlias("PtraccountRelationshipTypeRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();	
	
    // Query manager.
	descriptor.getQueryManager().checkCacheForDoesExist();
    //Named Queries

    // Event manager.
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.ID");
    descriptor.addMapping(idMapping);	
	
    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.CODE");
    descriptor.addMapping(codeMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRACCOUNT_RELATIONSHIP_TYPE_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);

    return descriptor;
  }  
  
  public Descriptor buildAgentBankRefDescriptor(){
    Descriptor descriptor = new Descriptor();

    descriptor.setJavaClass(com.profitera.descriptor.db.reference.AgentBankRef.class);
    descriptor.addTableName("PTRAGENT_BANK_REF");
    descriptor.addPrimaryKeyFieldName("PTRAGENT_BANK_REF.ID");

    // Descriptor properties.
	descriptor.useSoftCacheWeakIdentityMap();
	descriptor.setIdentityMapSize(100);
	descriptor.useRemoteSoftCacheWeakIdentityMap();
	descriptor.setRemoteIdentityMapSize(100);
    descriptor.setSequenceNumberFieldName("PTRAGENT_BANK_REF.ID");
    descriptor.setSequenceNumberName("REFERENCE_ID_SEQ");	
	descriptor.setAlias("PtragentBankRef");

    // Query manager.
    descriptor.getQueryManager().checkCacheForDoesExist();	
	
    // Query manager.
	descriptor.getQueryManager().checkCacheForDoesExist();    
    
    DirectToFieldMapping idMapping = new DirectToFieldMapping();
    idMapping.setAttributeName("id");
    idMapping.setFieldName("PTRAGENT_BANK_REF.ID");
    descriptor.addMapping(idMapping);	
	
    DirectToFieldMapping codeMapping = new DirectToFieldMapping();
    codeMapping.setAttributeName("code");
    codeMapping.setFieldName("PTRAGENT_BANK_REF.CODE");
    descriptor.addMapping(codeMapping);

    DirectToFieldMapping descriptionMapping = new DirectToFieldMapping();
    descriptionMapping.setAttributeName("description");
    descriptionMapping.setFieldName("PTRAGENT_BANK_REF.DESCRIPTION");
    descriptor.addMapping(descriptionMapping);

    DirectToFieldMapping disableMapping = new DirectToFieldMapping();
    disableMapping.setAttributeName("disable");
    disableMapping.setFieldName("PTRAGENT_BANK_REF.DISABLE");
    descriptor.addMapping(disableMapping);

    DirectToFieldMapping sortPriorityMapping = new DirectToFieldMapping();
    sortPriorityMapping.setAttributeName("sortPriority");
    sortPriorityMapping.setFieldName("PTRAGENT_BANK_REF.SORT_PRIORITY");
    descriptor.addMapping(sortPriorityMapping);
    
	return descriptor;  
  }
}