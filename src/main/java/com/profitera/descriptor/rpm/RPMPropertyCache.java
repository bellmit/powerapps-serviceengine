package com.profitera.descriptor.rpm;

import com.profitera.persistence.PersistenceManager;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import oracle.toplink.exceptions.DatabaseException;
import oracle.toplink.publicinterface.DatabaseRow;
import oracle.toplink.queryframework.CursoredStream;
import oracle.toplink.queryframework.DataModifyQuery;
import oracle.toplink.queryframework.DataReadQuery;
import oracle.toplink.queryframework.ValueReadQuery;
import oracle.toplink.sessions.Session;
import oracle.toplink.sessions.UnitOfWork;

/**
 * @author jamison
 */
public class RPMPropertyCache implements PropertyCache {
  private static final Log log = LogFactory.getLog(RPMPropertyCache.class);
	private static final int CURSOR_SIZE = 1000;
	private String tempTablePrefix;
	private String idFieldTypeDef;
	ArrayList names = new ArrayList();
	ArrayList arguments = new ArrayList();
	ArrayList queries = new ArrayList();
	ArrayList tableMaps = new ArrayList();
	Map indexes = new HashMap();
	private Session session;
	private DatabaseRow currentRow;
	
	
	/**
	 * This is the query that will be used to outer join against
	 * all of the temp tables generated by the cache.
	 * @param query
	 */
	public RPMPropertyCache(String query, String idFieldTypeDef, String tempTableName) {
		this.idFieldTypeDef = idFieldTypeDef;
		this.tempTablePrefix = tempTableName;
		addProperty("Master_Query", new Object[0], query);
	}
	public RPMPropertyCache(String query, String idFieldTypeDef) {
		this(query, idFieldTypeDef, "TMP_RPM_");
	}
	public boolean isSupported(String name, Object[] arguments) {
		return getIndex(name, arguments)!=-1;
	}

	public Object getPropertyValue(String name, Object[] arguments) {
		int index = getIndex(name, arguments);
		if (index == -1) throw new IllegalArgumentException(name + " " +  arguments + " is not cached");
		return currentRow.get(TableMap.JOIN_FIELD_PREFIX+(index));
	}
	
	public Object getKeyValue(){
		return currentRow.get(TableMap.JOIN_KEY_FIELD_NAME);
	}
	
	private int getIndex(String name, Object[] arguments) {
		Map m = (Map) indexes.get(name);
		if (m == null) return -1;
		Number n = (Number) m.get(arguments);
		if (n == null) return -1;
		return n.intValue();
	}
	
	public void setCurrentRow(DatabaseRow row){
		currentRow = row;
	}
	
	public DatabaseRow getCurrentRow(){
		return currentRow;
	}
	
	/**
	 * @param propName
	 * @param objects
	 * @param query
	 */
	public void addProperty(String propName, Object[] objects, String query) {
		Map m = (Map) indexes.get(propName);
		if (m == null) {
			indexes.put(propName, new HashMap());
			m = (Map) indexes.get(propName);
		}
		if (m.get(objects) == null) { // Prop is new, add it
			log.info("Adding property " + propName + "(" + names.size() +")");
			m.put(objects, new Integer(names.size()));
			names.add(propName);
			arguments.add(objects);
			queries.add(query);
			TableMap tm = new TableMap(null, getTableName(tableMaps.size()), idFieldTypeDef);
			tableMaps.add(tm);
		}
	}
	
	public String getTableName(int id){
		return tempTablePrefix + id;
	}

	public void buildTemporaryTables(){
		if (session == null)
			session = PersistenceManager.getClientSession();
		for (int i = 0; i < names.size(); i++) {
			TableMap tm = (TableMap) tableMaps.get(i);
			long start = System.currentTimeMillis();
			String create = tm.getTableDDL();
			UnitOfWork uow = session.acquireUnitOfWork();
			log.info(names.get(i) + " " + create);
			uow.executeQuery(new DataModifyQuery(create.substring(0, create.length()) + " "));
			uow.executeQuery(new DataModifyQuery(tm.getInsertFragment() + queries.get(i).toString()));
			uow.commit();
      log.info(names.get(i) + " " + ((System.currentTimeMillis() - start)/1000) + " seconds");
		}
	}

	/**
	 * 
	 */
	public CursoredStream open(int startId) {
		if (session == null)
			session = PersistenceManager.getClientSession();
		DataReadQuery query = new DataReadQuery(getQuery(startId));
		query.useCursoredStream(CURSOR_SIZE, CURSOR_SIZE, new ValueReadQuery("Select count(*) from " + getTableName(0) + " where " + TableMap.KEY_FIELD + " >= " + startId));
		return (CursoredStream) session.executeQuery(query);
	}
	
	public CursoredStream open(int startId, int endId) {
		if (session == null)
			session = PersistenceManager.getClientSession();
		DataReadQuery query = new DataReadQuery(getQuery(startId, endId));
		query.useCursoredStream(CURSOR_SIZE, CURSOR_SIZE, new ValueReadQuery("Select count(*) from " + getTableName(0) + " where " + TableMap.KEY_FIELD + " >= " + startId + " AND " + TableMap.KEY_FIELD + " =< " + endId));
		return (CursoredStream) session.executeQuery(query);
	}
	
	public CursoredStream open(String startId) {
		if (session == null)
			session = PersistenceManager.getClientSession();
		DataReadQuery query = new DataReadQuery(getQuery(startId));
		query.useCursoredStream(CURSOR_SIZE, CURSOR_SIZE, new ValueReadQuery("Select count(*) from " + getTableName(0) + " where " + TableMap.KEY_FIELD + " >= " + startId));
		return (CursoredStream) session.executeQuery(query);
	}
	
	public Vector getBatch(int startId, int batchSize){
		if (session == null)
			session = PersistenceManager.getClientSession();
		DataReadQuery query = new DataReadQuery(getQuery(startId));
		query.setMaxRows(batchSize);
		return (Vector) session.executeQuery(query);
	}
	
	public Vector getBatch(String startId, int batchSize){
		if (session == null)
			session = PersistenceManager.getClientSession();
		DataReadQuery query = new DataReadQuery(getQuery(startId));
		query.setMaxRows(batchSize);
		return (Vector) session.executeQuery(query);
	}
	
	/**
	 * @param startId
	 * @return
	 */
	private String getQuery(String startId) {
		return TableMap.getCompleteOuterJoin((TableMap[]) tableMaps.toArray(new TableMap[0]), startId);
	}

	private String getQuery(int id){
		return TableMap.getCompleteOuterJoin((TableMap[]) tableMaps.toArray(new TableMap[0]), id);	
	}
	
	private String getQuery(int id, int end){
		return TableMap.getCompleteOuterJoin((TableMap[]) tableMaps.toArray(new TableMap[0]), id, end);	
	}
	
//	private String getQuery(int startId, int endId){
//		return TableMap.getCompleteOuterJoin((TableMap[]) tableMaps.toArray(new TableMap[0]), startId, endId);	
//	}

	public void dropTempTables() {
		if (session == null)
			session = PersistenceManager.getClientSession();
		for (int i = 0; true; i++) {
			try{
				UnitOfWork uow = session.acquireUnitOfWork();
				uow.executeQuery(new DataModifyQuery(new TableMap(null, getTableName(i),"X").getTableDrop()));
				uow.commit();
			}catch(DatabaseException e){
				// when an exception occurs that means that the table doesn't exist and we're finished
				// dropping tables, return
				return;
			}

		}

	}

}
