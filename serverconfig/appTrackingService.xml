<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="appTrackingService">
	<delete id="deleteUserSetting">
		delete from PTRUSER_SETTINGS
		where USER_ID = #LOGON_USER# and CODE = #VALUE_CODE#
	</delete>
	<insert id="insertUserSettings">
		insert into PTRUSER_SETTINGS(USER_ID,CODE,VALUE)
		values(#LOGON_USER#,#VALUE_CODE#,#VALUE#)
	</insert>
	<resultMap id="userSettings" class="hmap">
		<result property="CODE" javaType="string" />
		<result property="VALUE" javaType="string" />
	</resultMap>
	<select id="getCamUserSettings" resultMap="userSettings">
	select CODE,VALUE FROM	PTRUSER_SETTINGS
	WHERE USER_ID = #LOGON_USER# and CODE IN('WIDESCREEN_MODE','NAVIGATION_DISPLAY','NAV_CODE','CAM_TAB')
	</select>	
	<select id="getCamUserMainTabLastNav" resultMap="userSettings">
	select CODE,VALUE FROM	PTRUSER_SETTINGS
	WHERE USER_ID = #LOGON_USER# and CODE IN('CUSTOMER_LAST_TAB','ACCOUNT_LAST_TAB','HISTORY_LAST_TAB',
	'PARTIES_LAST_TAB','PDC_LAST_TAB','COLLATERAL_LAST_TAB','LEDGER_LAST_TAB','OUTLOOK_LAST_TAB','FINANCE_INQUIRY_LAST_TAB','DMS_LAST_TAB')
	</select>
	<select id="getTreatmentTypes" resultMap="global.ref">
		<include refid="selectAllRef" />
		union
		<include refid="refselect" /> from ptrtreatment_type_ref
	</select>
	
	<resultMap id="getAccountActionHistory" class="hmap">
		<result property="TYPE" javaType="string" />
		<result property="STATUS" javaType="string" />
		<result property="CREATED_BY" javaType="string" />
		<result property="CREATED_TIME" javaType="ts" />
		<result property="UPDATED_BY" javaType="string" />
		<result property="UPDATED_TIME" javaType="ts" />
		<result property="REMARKS" javaType="string" />
	</resultMap>
	<select id="getAccountActionHistory" resultMap="getAccountActionHistory">
	select r.description as TYPE,s.description as STATUS,t.created_user_id,t.created_time,
	case when t.updated_time != t.created_time then t.updated_user_id end,
	case when t.updated_time != t.created_time then t.updated_time end,n.note_text as REMARKS 
	from ptrtreatment t
	inner join ptrtreatment_type_ref r on t.type_id=r.id
	inner join ptrtreatment_status_ref s on s.id=t.status_id
	left join ptrtreatment_note n on n.treatment_id=t.id
	where t.account_id=#ACCOUNT_ID#
	<isNotNull property="TYPE_ID">
	and t.type_id=#TYPE_ID#
	</isNotNull>
	<isNotEmpty property="TO_DATE">
	and t.created_time &lt;=#TO_DATE#
	</isNotEmpty>
	<isNotEmpty property="FROM_DATE">
	and t.created_time &gt;=#FROM_DATE#
	</isNotEmpty>
	</select>
	

	
	<select id="getHistoryMicobTypes" resultMap="global.ref">
	<include refid="selectAllRef"/>
	union
		select 1, 'EXECUTION', 'EXECUTION', false, 1  <include refid="fromdual"/>
		union
select 2, 'NOT', 'NOT', false, 1 <include refid="fromdual"/>
union
select 3, 'NOR', 'NOR', false, 1 <include refid="fromdual"/>
union
select 4, 'SUMMON', 'SUMMON', false, 1 <include refid="fromdual"/>
union
select 5, 'DEFENCE', 'DEFENCE', false, 1 <include refid="fromdual"/>
union
select 6, 'NOD', 'NOD', false, 1 <include refid="fromdual"/>
union
select 7, 'PLACE_INBOUND_CALL', 'PLACE_INBOUND_CALL', false, 1 <include refid="fromdual"/>
union
select 8, 'RECEIVER_LIQUIDATOR', 'RECEIVER_LIQUIDATOR', false, 1 <include refid="fromdual"/>
union
select 9, 'JUDGEMENT', 'JUDGEMENT', false, 1 <include refid="fromdual"/>
	</select>

	
	
	<resultMap id="getHistoryMicob" class="hmap">
		<result property="ACTION_DATE" javaType="date" />
		<result property="ACTION_TYPE" javaType="string" />
		<result property="PRODUCT" javaType="string" />
		<result property="CREATED_BY" javaType="string" />
		<result property="REMARKS" javaType="string" />
		<result property="NOTES" javaType="string" />
	</resultMap>
	<select id="getHistoryMicob" resultMap="getHistoryMicob">
select a.action_date, a.action_type, pro.abbreviation, a.created_by, a.remarks, a.notes from ( 

select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_nod as remarks,
p.remarks_nod as notes
from ptrmicob_nod p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by,  
p.remarks as remarks,
p.remarks as notes
from PTRMICOB_PLACE_INBOUND_CALL p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_defence as remarks,
p.remarks_defence as notes
from PTRMICOB_DEFENCE p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by,  
p.remarks_execution as remarks,
p.remarks_execution as notes
from PTRMICOB_EXECUTION p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_judgement as remarks,
p.remarks_judgement as notes
from PTRMICOB_JUDGEMENT p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_nor as remarks,
p.remarks_nor as notes
from PTRMICOB_NOR p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type,  
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_not as remarks,
p.remarks_not as notes
from PTRMICOB_NOT p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_liquidator as remarks,
p.remarks_liquidator as notes
from PTRMICOB_RECEIVER_LIQUIDATOR p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#

union
select p.account_id, p.creation_date as action_date, p.action_type_code as action_type, 
case when ud.user_name is null then p.creation_user else p.creation_user || ' - ' || ud.user_name end as created_by, 
p.remarks_summon as remarks,
p.remarks_summon as notes
from PTRMICOB_SUMMON p
left join ptrmicob_etp_user_details ud
on p.creation_user=ud.user_id
where p.account_id=#ACCOUNT_ID#
)a
inner join ptraccount acc on acc.id=a.account_id
left join ptrproduct_type_ref pro on pro.id=acc.product_type_id
 where acc.id=#ACCOUNT_ID#
 <isNotNull property="CODE">
	and a.action_type=#CODE#
	</isNotNull>
	<isNotEmpty property="TO_DATE">
	and date(a.action_date) &lt;= date(#TO_DATE#)
	</isNotEmpty>
	<isNotEmpty property="FROM_DATE">
	and date(a.action_date) &gt;= date(#FROM_DATE#)
	</isNotEmpty>
order by a.action_date desc

	</select>
</sqlMap>