<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="ledgerService">
	
<resultMap class="hmap" id="getLedgerBatchStreamThreads">
 <result property="THREAD_COUNT" javaType="long"/>
</resultMap>
<select id="getLedgerBatchStreamThreads" resultMap="getLedgerBatchStreamThreads" parameterClass="map">
 select 1 <include refid="fromdual"/>
</select>
<resultMap class="hmap" id="getLedgerCurrency">
 <result property="CURRENCY" javaType="string"/>
</resultMap>
<select id="getLedgerCurrency" resultMap="getLedgerCurrency" parameterClass="map">
 select 'MYR' <include refid="fromdual"/>
</select>

<resultMap class="hmap" id="getAllLedgerPenaltyModes">
 <result property="PENALTY_MODE_ID" javaType="long"/>
 <result property="PENALTY_MODE_CODE"/>
</resultMap>

<select id="getAllLedgerPenaltyModes" resultMap="getAllLedgerPenaltyModes" parameterClass="map">
select 1,'A' <include refid="fromdual"/>
</select>

<parameterMap id="insertFinancialCommodity-map" class="java.util.Map">
 <parameter property="ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
 <parameter property="CODE" jdbcType="VARCHAR" javaType="java.lang.String"/>
</parameterMap>
 <insert id="insertFinancialCommodity" parameterMap="insertFinancialCommodity-map">
<selectKey keyProperty="ID" resultClass="java.lang.Long" type="pre"><include refid="sequencePrefix"/>PTRFIN_COMMODITY_ID<include refid="sequenceSuffix"/></selectKey>
insert into PTRFIN_COMMODITY (ID, CODE) values (?, ?)
</insert>
<select id="getFinancialCommodity" resultClass="java.lang.Long" parameterClass="java.lang.String">
select ID from PTRFIN_COMMODITY where CODE = #VALUE#
</select>

<insert id="insertFinancialAccountType">
<selectKey keyProperty="ID" resultClass="java.lang.Long" type="pre"><include refid="sequencePrefix"/>PTRFIN_ACCOUNT_TYPE_ID<include refid="sequenceSuffix"/></selectKey>
insert into PTRFIN_ACCOUNT_TYPE (ID, CODE) values (#ID#, #CODE#)
</insert>
<select id="getFinancialAccountType" resultClass="java.lang.Long" parameterClass="java.lang.String">
select ID from PTRFIN_ACCOUNT_TYPE where CODE = #VALUE#
</select>

<select id="getGeneralAccountId" resultClass="long" parameterClass="long">
select ACCOUNT_ID
from PTRFIN_GENERAL_ACCOUNT_LIST
 inner join PTRFIN_ACCOUNT on ID = ACCOUNT_ID
where ACCOUNT_TYPE_ID = #value#
</select>
<insert id="insertGeneralAccountId">
insert into PTRFIN_GENERAL_ACCOUNT_LIST (ACCOUNT_ID, CREATED_DATE) values (#ACCOUNT_ID#, #EFFECTIVE_DATE#)
</insert>

<insert id="insertFinancialAccount">
<selectKey keyProperty="ID" resultClass="java.lang.Long" type="pre"><include refid="sequencePrefix"/>PTRFIN_ACCOUNT_ID<include refid="sequenceSuffix"/></selectKey>
insert into PTRFIN_ACCOUNT (ID, COMMODITY_ID, ACCOUNT_TYPE_ID) values (#ID#, #COMMODITY_ID#, #ACCOUNT_TYPE_ID#)
</insert>
<update id="updateFinancialAccountNewPostedBalance">
update PTRFIN_ACCOUNT set POSTED_AMOUNT = POSTED_AMOUNT + (select AMOUNT from PTRFIN_SPLIT where ID = #SPLIT_ID#)
where ID = (select account_id from PTRFIN_SPLIT where ID = #SPLIT_ID#)
</update>

<resultMap id="getFinancialAccount-map" class="java.util.HashMap">
 <result property="ACCOUNT_TYPE_ID" javaType="java.lang.Long"/>
 <result property="COMMODITY_ID" javaType="java.lang.Long"/>
</resultMap>
<select id="getFinancialAccount" resultMap="getFinancialAccount-map" parameterClass="java.lang.Long">
select ACCOUNT_TYPE_ID, COMMODITY_ID from PTRFIN_ACCOUNT where ID = #VALUE#
</select>
<select id="getFinancialAccountPostedBalance" resultClass="java.math.BigDecimal" parameterClass="java.lang.Long">
select POSTED_AMOUNT from ptrfin_account where id = #VALUE#
</select>

<insert id="insertLoanFinancialAccountsLink">
insert into ptrfin_ledger_account_rel (LEDGER_ID, FINANCIAL_ACCOUNT_ID, CREATED_DATE)
values (#ACCOUNT_ID#<!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->,#FINANCIAL_ACCOUNT_ID#,#EFFECTIVE_DATE#)
</insert>
<select id="getLoanFinancialAccountId" resultClass="java.lang.Long" parameterClass="map">
select distinct FINANCIAL_ACCOUNT_ID
from ptrfin_ledger_account_rel l 
 inner join ptrfin_account a on a.id = l.FINANCIAL_ACCOUNT_ID 
where LEDGER_ID = #LEDGER_ID:NUMERIC#
  and a.ACCOUNT_TYPE_ID = #ACCOUNT_TYPE_ID:NUMERIC#
</select>

<insert id="insertFinancialTransaction">
<selectKey keyProperty="ID" resultClass="java.lang.Long" type="pre"><include refid="sequencePrefix"/>PTRFIN_TRANSACTION_ID<include refid="sequenceSuffix"/></selectKey>
insert into PTRFIN_TRANSACTION (ID, COMMODITY_ID, STATUS, TRANSACTION_DATE, POSTING_DATE)
values (#ID#, #COMMODITY_ID#, #STATUS#, #EFFECTIVE_DATE#, #POSTING_DATE#)
</insert>
<update id="updateFinancialTransaction">
update PTRFIN_TRANSACTION set STATUS = #STATUS#, POSTING_DATE = #EFFECTIVE_DATE# where ID = #ID#
</update>
<insert id="insertFinancialSplit">
<selectKey keyProperty="ID" resultClass="java.lang.Long" type="pre"><include refid="sequencePrefix"/>PTRFIN_SPLIT_ID<include refid="sequenceSuffix"/></selectKey>
insert into PTRFIN_SPLIT (ID, TRANSACTION_ID, ACCOUNT_ID, COMMODITY_ID, AMOUNT, EXCHANGED_AMOUNT, STATUS)
values (#ID#, #TRANSACTION_ID#, #ACCOUNT_ID#, #COMMODITY_ID#, #AMOUNT#, #EXCHANGED_AMOUNT#, #STATUS#)
</insert>
<update id="updateFinancialSplit">
update PTRFIN_SPLIT set STATUS = #STATUS# where ID = #ID#
</update>
<resultMap id="getFinancialAccountPostedSplitCreditAmounts-map" class="java.util.HashMap">
<result property="AMOUNT" javaType="java.math.BigDecimal"/>
<result property="POSTING_DATE" javaType="java.util.Date"/>
</resultMap>

<select id="getFinancialAccountPostedSplitCreditAmounts" resultMap="getFinancialAccountPostedSplitCreditAmounts-map" parameterClass="java.util.Map">
select AMOUNT, POSTING_DATE from ptrfin_split s
inner join ptrfin_transaction t on s.transaction_id = t.id
where t.status = 'P' and s.account_id = #ACCOUNT_ID# and s.AMOUNT > 0
and not exists (select * from PTRFIN_TRANSACTION_REVERSAL r
                where t.id in (r.ORIGINAL_TRANSACTION_ID, r.REVERSAL_TRANSACTION_ID))
and not exists (select * from PTRFIN_ATTACHED_TRANSACTION
                where attached_transaction_id = t.id)
</select>

<resultMap  id='getFinancialAccountPostedBalancesForLoan' class='java.util.HashMap'>
 <result property='AMOUNT' javaType='java.math.BigDecimal'/>
 <result property='ACCOUNT_TYPE_CODE' javaType='java.lang.String'/>
</resultMap>
<select id='getFinancialAccountPostedBalancesForLoan' resultMap='getFinancialAccountPostedBalancesForLoan' parameterClass='java.lang.Long'>
select POSTED_AMOUNT, t.CODE 
from ptrfin_ledger_account_rel r
 inner join ptrfin_account a on a.id = r.FINANCIAL_ACCOUNT_ID
 inner join ptrfin_account_type t on t.id = a.account_type_id
where r.LEDGER_ID = #value#
</select>
<insert id='insertLoanAgeInformation'>
insert into PTRLEDGER_AGE 
(OLDEST_OVERDUE_DATE, SUSPENSE_OLDEST_OVERDUE_DATE, NEXT_DUE_DATE, LEDGER_ID) values 
(#OLDEST_OVERDUE_DATE#,#SUSPENSE_OLDEST_OVERDUE_DATE#,#NEXT_DUE_DATE#,#LEDGER_ID#)
</insert>
<update id='updateLoanAgeInformation'>
update PTRLEDGER_AGE 
set OLDEST_OVERDUE_DATE = #OLDEST_OVERDUE_DATE#,
    SUSPENSE_OLDEST_OVERDUE_DATE = #SUSPENSE_OLDEST_OVERDUE_DATE#,
    NEXT_DUE_DATE = #NEXT_DUE_DATE#
where LEDGER_ID = #LEDGER_ID#
</update>

<select id="getLoanFinancialAccountsLinkCreatedDate" resultClass="java.util.Date" parameterClass="java.lang.Long">
select min(created_date)
from ptrfin_ledger_account_rel a
where a.ledger_ID = #value#
</select>

<resultMap id="getLoanPostingScheduleForDate" class="java.util.HashMap">
 <result property="ID" javaType="java.lang.Long"/>
 <result property="START_DATE" javaType="java.util.Date"/>
 <result property="END_DATE" javaType="java.util.Date"/>
 <result property="DATE" javaType="java.util.Date"/>
 <result property="RATE" javaType="java.math.BigDecimal"/>
 <result property="POST" javaType="java.lang.String"/>
 <result property="BILLING_CYCLE" javaType="java.lang.String"/>
 <result property="EXTERNAL_RATE" javaType="java.lang.String"/>
</resultMap>
<select id="getLoanPostingScheduleForDate" resultMap="getLoanPostingScheduleForDate" parameterClass="java.util.Map">
  select s.ID, s.START_DATE, s.END_DATE, r.RATE_DATE, r.RATE_AMOUNT, r.POST, r.BILLING_CYCLE ,null
  from PTRLEDGER_POSTING_SCHEDULE s 
    left outer join PTRLEDGER_POSTING_RATE r on s.id = r.POSTING_SCHEDULE_ID 
  where s.SCHEDULE_TYPE = #SCHEDULE_TYPE# 
    and s.LEDGER_ID = #ACCOUNT_ID# <!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 --> 
    and #EFFECTIVE_DATE# >= s.START_DATE 
    and (s.END_DATE is null or s.END_DATE >= #EFFECTIVE_DATE#)
    and s.DISABLE = 0
 </select>
 <select id="getLoanPostingScheduleNextStartDate" resultClass="date" parameterClass="java.util.Map">
  select min(s.START_DATE) 
  from PTRLEDGER_POSTING_SCHEDULE s 
  where s.SCHEDULE_TYPE = #SCHEDULE_TYPE# 
    and s.LEDGER_ID = #ACCOUNT_ID#  <!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
    and s.START_DATE > #EFFECTIVE_DATE#  
    and (s.END_DATE is null or s.END_DATE >= #EFFECTIVE_DATE#)
    and s.DISABLE = 0
 </select>
 <update id="disableLoanPostingScheduleStartingAfter">
   update PTRLEDGER_POSTING_SCHEDULE set DISABLE = 1
   where LEDGER_ID = #ACCOUNT_ID# <!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
     and SCHEDULE_TYPE = #SCHEDULE_TYPE#
     and START_DATE >= #START_DATE#
 </update>
 <update id="updateLoanPostingScheduleEndDate">
   update PTRLEDGER_POSTING_SCHEDULE set END_DATE = #NEW_END_DATE#
   where LEDGER_ID = #ACCOUNT_ID# <!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
   and SCHEDULE_TYPE = #SCHEDULE_TYPE#
   and (END_DATE is null or END_DATE > #START_DATE#)
 </update>
 <insert id="insertLoanPostingSchedule">
  <selectKey keyProperty="ID" resultClass="long">
  <include refid="sequencePrefix"/>PTRLEDGER_POSTING_SCHEDULE_ID<include refid="sequenceSuffix"/>
  </selectKey>
  insert into PTRLEDGER_POSTING_SCHEDULE 
  (ID, LEDGER_ID, START_DATE, END_DATE, SCHEDULE_TYPE, DISABLE)
  values (#ID#, #ACCOUNT_ID#, <!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
  #START_DATE#, #END_DATE#, #SCHEDULE_TYPE#, 0)
 </insert>
 <insert id="insertLoanPostingScheduleRate">
  <selectKey keyProperty="ID" resultClass="long">
  <include refid="sequencePrefix"/>PTRLEDGER_POSTING_RATE_ID<include refid="sequenceSuffix"/>
  </selectKey>
  insert into PTRLEDGER_POSTING_RATE 
  (ID, POSTING_SCHEDULE_ID, RATE_DATE, RATE_AMOUNT, BILLING_CYCLE, POST)
  values (#ID#, #POSTING_SCHEDULE_ID#, #RATE_DATE#, #RATE_AMOUNT#, #BILLING_CYCLE#, #POST#)
 </insert>
 
 
 <select id="getLoanDefaultInterestRate" resultClass="java.math.BigDecimal" parameterClass="java.lang.Long">
 select 0 <include refid="fromdual"/> where #VALUE:NUMERIC# is not null
 </select>
 <select id="getLoanDefaultBillingCycle" resultClass="java.lang.String" parameterClass="java.lang.Long">
 select '31' <include refid="fromdual"/> where #VALUE:NUMERIC# is not null
 </select>
<select id="getLoanDefaultPenaltyRate" resultClass="java.math.BigDecimal" parameterClass="java.lang.Long">
 select 0 <include refid="fromdual"/> where #VALUE:NUMERIC# is not null
 </select>
<select id="getInterestLastAccruedDate" resultClass="java.util.Date" parameterClass="java.lang.Long">
select ACCRUED_DATE from PTRLEDGER_INTEREST_ACCRUED where LEDGER_ID = #VALUE#
</select>
<select id="getLastImmediateInterestPostedDate" resultClass="java.util.Date" parameterClass="java.lang.Long">
select max(end_date)
from PTRLEDGER_INTEREST_HIST
where LEDGER_ID = #VALUE# 
  and (SOURCE = '200')
</select>
<select id="getLastPenaltyPostedDate" resultClass="java.util.Date" parameterClass="java.lang.Long">
select max(end_date) from PTRLEDGER_PENALTY_HIST where LEDGER_ID = #VALUE#
</select>

<insert id="insertInterestAccruedAmount">
insert into PTRLEDGER_INTEREST_ACCRUED (ACCRUED_AMOUNT, ACCRUED_DATE, LEDGER_ID)
values (#ACCRUED_AMOUNT#,#EFFECTIVE_DATE#,#LEDGER_ID#)
</insert>
<insert id="updateInterestAccruedAmount">
update PTRLEDGER_INTEREST_ACCRUED
set ACCRUED_AMOUNT = #ACCRUED_AMOUNT#, ACCRUED_DATE = #EFFECTIVE_DATE#
where LEDGER_ID = #LEDGER_ID#
</insert>
<update id="clearInterestAccruedAmount">
update PTRLEDGER_INTEREST_ACCRUED set ACCRUED_AMOUNT = 0, ACCRUED_DATE = #EFFECTIVE_DATE#
where LEDGER_ID = #LEDGER_ID#
</update>
<resultMap id="getFinancialAccountSplitHistory-map" class="java.util.HashMap">
 <result property="END_BALANCE" javaType="java.math.BigDecimal"/>
 <result property="SPLIT_DATE" javaType="java.util.Date"/>
 <result property="AMOUNT" javaType="java.math.BigDecimal"/>
</resultMap>
<select id="getFinancialAccountSplitHistory" resultMap="getFinancialAccountSplitHistory-map" parameterClass="java.util.Map">
select a.posted_amount, t.posting_date, sum(s.amount)
from ptrfin_account a
 inner join ptrfin_split s on a.id = s.account_id
 inner join ptrfin_transaction t on s.transaction_id = t.id
where a.id = #ACCOUNT_ID#
  and t.posting_date >= (select max(posting_date)
      from ptrfin_transaction t2
       inner join ptrfin_split s2 on t2.id = s2.transaction_id
      where #START_DATE# >= t2.posting_date
        and s2.account_id = a.id)
group by a.id, a.posted_amount, t.posting_date
</select>
<select id="getLoanNoInstallmentPlanNonPerformingStatus" resultClass="java.lang.Boolean" parameterClass="map">
 select 1 <include refid="fromdual"/>
</select>

  <select id="getLoanInstallmentPlanNonPerformingStatus" resultClass="java.lang.Boolean">
  select 0 <include refid="fromdual"/>
  <!-- Never NPA for this project -->
   <!-- select case 
    when a.OLDEST_OVERDUE_DATE is null then 0
    when #EFFECTIVE_DATE# - COALESCE(a.suspense_oldest_overdue_date, a.OLDEST_OVERDUE_DATE) > 90 then 1
    else 0 end from PTRLEDGER_AGE a where a.LEDGER_ID = #LEDGER_ID#
     -->
  </select>
<resultMap id='getPostingRecordHistory' class='java.util.HashMap'>
  <result property='DATE' javaType='date'/>
  <result property='AMOUNT' javaType='java.math.BigDecimal'/>
  <result property='TYPE'/>
</resultMap>
<select id='getFirstPostingRecordHistory' 
        resultMap='getPostingRecordHistory' parameterClass='map'>
select BILLING_DATE, AMOUNT, 'INTEREST' 
from PTRLEDGER_INTEREST_HIST h 
where h.LEDGER_ID = #ACCOUNT_ID#<!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
union
select BILLING_DATE, AMOUNT, 'PRINCIPAL' 
from PTRLEDGER_INST_PRINCIPAL_HIST h 
where h.LEDGER_ID = #ACCOUNT_ID#<!-- ACCOUNT_ID here is actually ledger ID for legacy reasons, will change in 4.3.02 -->
</select>
<select id='getPostingRecordHistoryAfterDate'  resultMap='getPostingRecordHistory'>
select null <include refid="fromdual"/> where 1 = 2
</select>



<parameterMap id="insertPostingRecord-pmap" class="java.util.Map">
<parameter property="AMOUNT" jdbcType="NUMERIC"/>
<parameter property="EFFECTIVE_DATE" jdbcType="DATE"/>
<parameter property="START_DATE" jdbcType="DATE"/>
<parameter property="END_DATE" jdbcType="DATE"/>
<parameter property="ACCOUNT_ID" jdbcType="NUMERIC"/>
<parameter property="TRANSACTION_ID" jdbcType="NUMERIC"/>
<parameter property="BILLING_DATE" jdbcType="DATE"/>
<parameter property="SOURCE" jdbcType="VARCHAR"/>
</parameterMap>

 <update id="insertPenaltyPostingRecord" parameterMap="insertPostingRecord-pmap">
insert into PTRLEDGER_PENALTY_HIST (AMOUNT, EFFECTIVE_DATE, START_DATE, END_DATE, LEDGER_ID, TRANSACTION_ID, BILLING_DATE, SOURCE)  
values 
(?, ?, ?, ?, ?, ?, ?, ?)
</update>
 <update id="insertInterestPostingRecord" parameterMap="insertPostingRecord-pmap">
insert into PTRLEDGER_INTEREST_HIST (AMOUNT, EFFECTIVE_DATE, START_DATE, END_DATE, LEDGER_ID, TRANSACTION_ID, BILLING_DATE, SOURCE)
values 
(?, ?, ?, ?, ?, ?, ?, ?)
</update>

 <update id="insertInstallmentPrinciplePostingRecord" parameterMap="insertPostingRecord-pmap">
insert into PTRLEDGER_INST_PRINCIPAL_HIST (AMOUNT, EFFECTIVE_DATE, START_DATE, END_DATE, LEDGER_ID, TRANSACTION_ID, BILLING_DATE, SOURCE)  
values 
(?, ?, ?, ?, ?, ?, ?, ?)
</update>

<resultMap id="getLedgersForDailyBatch" class="java.util.HashMap">
 <result property="ID" javaType="long"/>
</resultMap>
<select id="getLedgersForDailyBatch" resultMap="getLedgersForDailyBatch">
select l.ID
from PTRACCOUNT_LEDGER l
where l.LEDGER_TYPE_ID = 1 and 
l.DISABLE = 0 
order by l.ACCOUNT_ID, l.ID
</select>

 <select id="getLoanInterestAmount" resultClass="java.math.BigDecimal" parameterClass="java.util.Map">
select sum(amount)
from PTRLEDGER_INTEREST_HIST
where LEDGER_ID = #ACCOUNT_ID#
 and end_date >= #START_DATE#
 and end_date &lt;= #END_DATE#
</select>

<select id="getLoanInstallmentPrincipalAmount" resultClass="java.math.BigDecimal" parameterClass="java.util.Map">
 select sum(amount) from PTRLEDGER_INST_PRINCIPAL_HIST where LEDGER_ID = #ACCOUNT_ID# 
 and end_date >= #START_DATE# and end_date &lt;= #END_DATE#
 and source = #SOURCE#
</select>


<!-- start taken from encore -->

 <parameterMap id="updateFinancialAccountPendingBalance-map" class="java.util.Map">
<parameter property="SPLIT_ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
<parameter property="SPLIT_ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
</parameterMap>

 <update id="updateFinancialAccountPendingBalance" parameterMap="updateFinancialAccountPendingBalance-map">
update PTRFIN_ACCOUNT set PENDING_AMOUNT = PENDING_AMOUNT + (select AMOUNT from PTRFIN_SPLIT where ID = ?) where ID = (select account_id from PTRFIN_SPLIT where ID = ?)
</update>

<resultMap id="getFinancialAttachedTransactionIds-map" class="java.util.HashMap">
 <result property="ID" javaType="java.lang.Long"/>
</resultMap>

<select id="getFinancialAttachedTransactionIds" resultMap="getFinancialAttachedTransactionIds-map" parameterClass="java.lang.Long">
 select ATTACHED_TRANSACTION_ID from PTRFIN_ATTACHED_TRANSACTION
 where TRANSACTION_ID = #VALUE#
</select>

 <parameterMap id="updateFinancialAccountPostedBalance-map" class="java.util.Map">
<parameter property="SPLIT_ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
<parameter property="SPLIT_ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
<parameter property="SPLIT_ID" jdbcType="NUMERIC" javaType="java.lang.Long"/>
</parameterMap>

 <update id="updateFinancialAccountPostedBalance" parameterMap="updateFinancialAccountPostedBalance-map">
update PTRFIN_ACCOUNT set PENDING_AMOUNT = PENDING_AMOUNT - (select AMOUNT from PTRFIN_SPLIT where ID = ?), POSTED_AMOUNT = POSTED_AMOUNT + (select AMOUNT from PTRFIN_SPLIT where ID = ?) where ID = (select account_id from PTRFIN_SPLIT where ID = ?)
</update>

<!-- end taken from encore -->
</sqlMap>