<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="ramciService">

<!-- ## RAMCI CONTACT IMPORTER ## -->

	<select id="getRamciType" resultMap="global.ref">
		select a.id, a.code, a.description, a.disable, a.sort_priority from
		(values(1,'C','Contact Number',false,1),(2,'A','Address',false,2)) as
		a(id,code,description,disable,sort_priority)
		order by a.sort_priority
	</select>
	
	<resultMap class="hmap" id="getMiscValidCustomers">
	<result property="CUSTOMER_ID" javaType="long" />
	<result property="CUSTOMER_PRIMARY_ID" javaType="string" />
	<result property="CUSTOMER_NAME" javaType="string" />
	<result property="VALID" javaType="boolean" />
	<result property="COLOR" javaType="string" />
	<result property="CUSTOMER_CIF" javaType="string"/>
</resultMap>

	<select id="getMiscValidCustomers" resultMap="getMiscValidCustomers">
		select c.ID, c.CUSTOMER_ID_NO, c.CUSTOMER_NAME, true as VALID, '33ff33' as
		COLOR, c.CUSTOMER_NO from PTRCUSTOMER c
		<iterate prepend="where c.CUSTOMER_ID_NO in " conjunction=","
			property="CUSTOMERS" open="(" close=")">#CUSTOMERS[]#</iterate>
			 and exists 
			(select 1 from PTRACCOUNT a where a.CUSTOMER_ID=c.ID)
	</select>
	
	<resultMap class="hmap" id="getCustomerEmploymentDetailsUpdate">
	<result property="CUSTOMER_ID" javaType="long"/>
	<result property="IS_UPDATE" javaType="boolean"/>
	</resultMap>
	
	<select id="getCustomerEmploymentDetailsUpdate" resultMap="getCustomerEmploymentDetailsUpdate">
		select c.ID, 1 as IS_UPDATE from ptrcustomer c
		inner join ptrcustomer_employment_details ce on ce.customer_id=c.id
		<iterate prepend="where c.CUSTOMER_ID_NO in " conjunction=","
			property="CUSTOMERS" open="(" close=")">#CUSTOMERS[]#</iterate>
			 and exists 
			(select 1 from PTRACCOUNT a where a.CUSTOMER_ID=c.ID)
	</select>

	<insert id="insertRamciContactNumberHistory" parameterClass="map">
		<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrramci_import_contact_history_id
			<include refid="sequenceSuffix" />
		</selectKey>
		insert into ptrramci_import_contact_history
		(id, customer_primary_id, contact_type_1, contact_number_1,
		contact_type_2, contact_number_2, contact_type_3, contact_number_3,
		created_user_id, created_time)
		values
		(#ID#, #CUSTOMER_PRIMARY_ID#, #CONTACT_TYPE_1#,#CONTACT_NUMBER_1#,
		#CONTACT_TYPE_2#,#CONTACT_NUMBER_2#,#CONTACT_TYPE_3#,#CONTACT_NUMBER_3#,
		#CREATED_USER_ID#,#CREATED_TIME#)
	</insert>

	<insert id="insertRamciAddressHistory" parameterClass="map">
		<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrramci_import_address_history_id
			<include refid="sequenceSuffix" />
		</selectKey>
		insert into ptrramci_import_address_history
		(id, customer_primary_id,
		address_type_1,address_line_1_1,address_line_2_1, address_line_3_1,
		city_1, state_1,postcode_1, country_1,
		address_type_2, address_line_1_2,address_line_2_2, address_line_3_2, city_2,
		state_2,postcode_2, country_2,
		created_user_id, created_time)
		values
		(#ID#, #CUSTOMER_PRIMARY_ID#,
		#ADDRESS_TYPE_1#,#ADDRESS_LINE_1_1#,#ADDRESS_LINE_2_1#,
		#ADDRESS_LINE_3_1#, #CITY_1#, #STATE_1#,#POSTCODE_1#, #COUNTRY_1#,
		#ADDRESS_TYPE_2#, #ADDRESS_LINE_1_2#,#ADDRESS_LINE_2_2#,
		#ADDRESS_LINE_3_2#, #CITY_2#, #STATE_2#,#POSTCODE_2#, #COUNTRY_2#,
		#CREATED_USER_ID#,#CREATED_TIME#)
	</insert>
	
	<insert id="insertRamciContactNumber" parameterClass="map">
	<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrcontact_number_id
			<include refid="sequenceSuffix" />
		</selectKey>
	INSERT INTO ptrcontact_number 
(id, customer_id, contact_name, contact_type_id, no,
created_user_id, created_time, contact_source_id) 
VALUES(#ID#, #CUSTOMER_ID#, #CUSTOMER_NAME#, #CONTACT_TYPE_ID#, #NO#, 
#CREATED_USER_ID#, #CREATED_TIME#, 1)
	</insert>


	<insert id="insertRamciAddress" parameterClass="map">
	<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptraddress_id
			<include refid="sequenceSuffix" />
		</selectKey>
insert into ptraddress (id, customer_id, contact_name, line_1, line_2, 
line_3, line_4, postcode, city, state_id, country_id, 
address_type_id, created_user_id, created_time, contact_source_id)
values
(#ID#, #CUSTOMER_ID#, #CUSTOMER_NAME#, #LINE_1#, #LINE_2#, 
#LINE_3#, #LINE_4#, #POSTCODE#, #CITY#, #STATE_ID#, #COUNTRY_ID#, 
#ADDRESS_TYPE_ID#, #CREATED_USER_ID#, #CREATED_TIME#, 1)
	</insert>
	
	<resultMap class="hmap" id="getRamciCityId">
	<result property="CITY_ID" javaType="long"/>
	</resultMap>
	<resultMap class="hmap" id="getRamciStateId">
	<result property="STATE_ID" javaType="long"/>
	</resultMap>
	<resultMap class="hmap" id="getRamciCountryId">
	<result property="COUNTRY_ID" javaType="long"/>
	</resultMap>
	
	<select id="getRamciCityId" resultMap="getRamciCityId">
	select ID from PTRCITY_REF where UPPER(DESCRIPTION) like UPPER('%'||#CITY#||'%')
	</select>
	<select id="getRamciStateId" resultMap="getRamciStateId">
	select ID from PTRSTATE_REF where UPPER(DESCRIPTION) like UPPER('%'||#STATE#||'%')
	</select>
	<select id="getRamciCountryId" resultMap="getRamciCountryId">
	select ID from PTRCOUNTRY_REF where UPPER(DESCRIPTION) like UPPER('%'||#COUNTRY#||'%')
	</select>
	
	
	<!-- ## EMPLOYMENT DETAILS ## -->
	
	<resultMap class="hmap" id="getEmployerId">
	<result property="EMPLOYER_ID" javaType="long"/>
	<result property="EMPLOYER_CODE" javaType="string"/>
	</resultMap>
	
	<select id="getEmployerId" resultMap="getEmployerId">
	select ID, CODE from PTREMPLOYER_REF
	</select>
	
	<resultMap class="hmap" id="getInfoFromEmployerId">
	<result property="INFO_FROM_EMPLOYER_ID" javaType="long"/>
	</resultMap>
	
	<select id="getInfoFromEmployerId" resultMap="getInfoFromEmployerId">
	select ID from ptremployer_default_reason_ref where upper(DESCRIPTION)=upper(#INFO_FROM_EMPLOYER#)
	</select>
	
		<resultMap class="hmap" id="getEmployerNameByCode">
	<result property="EMPLOYER_NAME" javaType="string"/>
	</resultMap>
	
	<select id="getEmployerNameByCode" resultMap="getEmployerNameByCode">
	select gr.description from ptremployer_ref ref
inner join ptremployer_group_ref gr on gr.id=ref.group_id
where upper(ref.CODE)=upper(#EMPLOYER_CODE#)
	</select>

	<insert id="insertCustomerEmploymentDetailsHistory" parameterClass="map">
		<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrcustomer_employment_details_id
			<include refid="sequenceSuffix" />
		</selectKey>
		insert into ptrcustomer_employment_details_history
		(id, customer_id, pdrm_ic, payment_method, location,
		inflow, info_from_biro, employer_default_reason_id, new_contact_number,
		calling_status,
		employer_id, employer_no, mobile, remarks, eca_tps,
		created_user_id, created_time)
		values
		(#ID#, #CUSTOMER_ID#, #PDRM_IC#, #PAYMENT_METHOD#, #LOCATION#,
		#INFLOW#, #INFO_FROM_BIRO#, #INFO_FROM_EMPLOYER_ID#, #NEW_CONTACT_NUMBER#,
		#CALLING_STATUS#,
		#EMPLOYER_ID#, #EMPLOYER_NO#, #MOBILE#, #REMARKS#, #ECA_TPS#,
		#CREATED_USER_ID#, #CREATED_TIME#)
	</insert>
	
	<insert id="insertCustomerEmploymentDetails" parameterClass="map">
		insert into ptrcustomer_employment_details
		(customer_id, pdrm_ic, payment_method, location,
		inflow, info_from_biro, employer_default_reason_id, new_contact_number,
		calling_status,
		employer_id, employer_no, mobile, remarks, eca_tps,
		created_user_id, created_time)
		values
		(#CUSTOMER_ID#, #PDRM_IC#, #PAYMENT_METHOD#, #LOCATION#,
		#INFLOW#, #INFO_FROM_BIRO#, #INFO_FROM_EMPLOYER_ID#, #NEW_CONTACT_NUMBER#,
		#CALLING_STATUS#,
		#EMPLOYER_ID#, #EMPLOYER_NO#, #MOBILE#, #REMARKS#, #ECA_TPS#,
		#CREATED_USER_ID#, #CREATED_TIME#)
	</insert>
	
	<update id="updateCustomerEmploymentDetails" parameterClass="map">
	update ptrcustomer_employment_details set
	pdrm_ic=#PDRM_IC#, 
	payment_method=#PAYMENT_METHOD#, 
	location=#LOCATION#,
		inflow=#INFLOW#, 
		info_from_biro=#INFO_FROM_BIRO#, 
		employer_default_reason_id=#INFO_FROM_EMPLOYER_ID#, 
		new_contact_number=#NEW_CONTACT_NUMBER#,
		calling_status=#CALLING_STATUS#,
		employer_id=#EMPLOYER_ID#, 
		employer_no=#EMPLOYER_NO#, 
		mobile=#MOBILE#, 
		remarks=#REMARKS#, 
		eca_tps=#ECA_TPS#,
		created_user_id=#CREATED_USER_ID#, 
		created_time=#CREATED_TIME#
	where customer_id=#CUSTOMER_ID#

	</update>

<!-- ## VERIFIED CONTACT ## -->

	<select id="getVerifiedContactSource" resultMap="global.ref">
		select id, code, description, disable, sort_priority from (
select null as id, null as code, 'All (Except Host)' as description, false as disable, -1 as sort_priority <include refid="fromdual"/>
union
select id, code, description, disable, sort_priority from ptrcontact_source_ref
)a order by sort_priority, upper(description)
	</select>

	<select id="getVerifiedContactStatus" resultMap="global.ref">
			select id, code, description, disable, sort_priority from (
select null as id, null as code, ' All ' as description, false as disable, -1 as sort_priority <include refid="fromdual"/>
union
select id, code, description, disable, sort_priority from ptrtreatment_status_ref where id in (15001,15004)
)a order by sort_priority, upper(description)
	</select>

	<resultMap class="hmap" id="getVerifiedContactBy">
		<result property="ID" javaType="string" />
		<result property="CODE" javaType="string" />
		<result property="DESCRIPTION" javaType="string" />
		<result property="DISABLE" javaType="boolean" />
		<result property="SORT_PRIORITY" javaType="long" />
	</resultMap>

	<select id="getVerifiedContactBy" resultMap="getVerifiedContactBy">
		select id, code, description, disable, sort_priority from (
		select null as id, null as code, ' All ' as description, false as disable,
		-1 as sort_priority
		union
		select user_id as id, null as code, user_id as description, disable, 1 as
		sort_priority
		from ptruser where (disable is null or disable=false)
		)a order by sort_priority, upper(description)
	</select>
	

<resultMap class="hmap" id="getFiveHundred">
<result property="FIVE_HUNDRED" javaType="long"/>
</resultMap>

<select id="getFiveHundred" resultMap="getFiveHundred">
select 500 <include refid="fromdual"/>
</select>

<sql id="verifiedContactSearch">
where 1=1
<isNotNull property="SOURCE_ID">
and c.CONTACT_SOURCE_ID=#SOURCE_ID#
</isNotNull>
<isNotNull property="VERIFIED_DATE_FROM">
<isNotNull property="VERIFIED_DATE_TO">
and coalesce(t.UPDATED_TIME,t.CREATED_TIME) between #VERIFIED_DATE_FROM# and #VERIFIED_DATE_TO# 
</isNotNull>
</isNotNull>
<isNotNull property="STATUS_ID">
and t.STATUS_ID=#STATUS_ID#
</isNotNull>
<isNotNull property="VERIFIED_BY">
and coalesce(t.UPDATED_USER_ID,t.CREATED_USER_ID)=#VERIFIED_BY#
</isNotNull>
</sql>
	
	
<resultMap class="hmap" id="getVerifiedContactNumberOfAccounts">
<result property="NUMBER_OF_ACCOUNTS" javaType="long"/>
</resultMap>

<select id="getVerifiedContactNumberOfAccounts" resultMap="getVerifiedContactNumberOfAccounts">
select count(pac.ACCOUNT_ID) 
<isEqual property="TYPE_ID" compareValue="1">
from PTRTREATMENT_PLACE_A_CALL pac
inner join PTRCONTACT_NUMBER c on c.ID=pac.CONTACT_ID
</isEqual>
<isEqual property="TYPE_ID" compareValue="2">
from PTRTREATMENT_LETTER pac
inner join PTRADDRESS c on c.ID=pac.CONTACT_ID
</isEqual>
inner join PTRTREATMENT t on t.ID=pac.TREATMENT_ID
<include refid="verifiedContactSearch"/>
</select>

<resultMap class="hmap" id="getVerifiedContactAccountIds">
<result property="ACCOUNT_ID" javaType="long"/>
<result property="TREATMENT_ID" javaType="long"/>
</resultMap>

<select id="getVerifiedContactAccountIds" resultMap="getVerifiedContactAccountIds">
select a.ACCOUNT_ID, a.TREATMENT_ID from
(
select pac.ACCOUNT_ID, pac.TREATMENT_ID, row_number() over(order by pac.ACCOUNT_ID) as RNUM 
<isEqual property="TYPE_ID" compareValue="1">
from PTRTREATMENT_PLACE_A_CALL pac
inner join PTRCONTACT_NUMBER c on c.ID=pac.CONTACT_ID
</isEqual>
<isEqual property="TYPE_ID" compareValue="2">
from PTRTREATMENT_LETTER pac
inner join PTRADDRESS c on c.ID=pac.CONTACT_ID
</isEqual>
inner join PTRTREATMENT t on t.ID=pac.TREATMENT_ID
<include refid="verifiedContactSearch"/>
) a
where
a.RNUM   
between (1 + ((cast(#PAGE_NUMBER# AS NUMERIC)  - 1) * #LIMIT_RESULT:NUMERIC#)) 
and (#LIMIT_RESULT:NUMERIC# * cast(#PAGE_NUMBER# AS NUMERIC))
</select>



<resultMap class="hmap" id="getVerifiedContactResults">
<result property="ACCOUNT_ID" javaType="long"/>
<result property="CUSTOMER_CIF" javaType="string"/>
<result property="CUSTOMER_NAME" javaType="string"/>
<result property="CUSTOMER_PRIMARY_ID" javaType="string"/>
<result property="ACCOUNT_NO" javaType="string"/>
<result property="PRODUCT" javaType="string"/>
<result property="VERIFIED_DATE" javaType="ts"/>
<result property="VERIFIED_BY" javaType="string"/>
<result property="VERIFIED_STATUS" javaType="string"/>
</resultMap>

<resultMap class="hmap" id="getVerifiedContactNumberResults" extends="getVerifiedContactResults">
<result property="MOBILE_NO" javaType="string"/>
<result property="OFFICE_NO" javaType="string"/>
<result property="HOME_NO" javaType="string"/>
<result property="MOBILE_NO_SMS" javaType="string"/>
</resultMap>

<select id="getVerifiedContactNumberResults" resultMap="getVerifiedContactNumberResults">
select 
a.id, c.customer_no, c.customer_name, c.customer_id_no, a.account_no, pro.description,
coalesce(t.updated_time,t.created_time),
coalesce(t.updated_user_id,t.created_user_id),
ts.description,
case when cn.code='MOBILE' then con.no end as MOBILE_NO,
case when cn.code='OFFICE' then con.no end as OFFICE_NO,
case when cn.code='HOME' then con.no end as HOME_NO,
case when cn.code='MOBILE' and con.IS_PREFERRED_SMS=true then con.no end as MOBILE_NO_SMS
from PTRTREATMENT_PLACE_A_CALL pac
inner join ptrtreatment t on t.id=pac.treatment_id
inner join ptraccount a on a.id=pac.account_id
inner join ptrcontact_number con on con.id=pac.contact_id
inner join ptrcontact_number_type_ref cn on cn.id=con.contact_type_id
inner join ptrcustomer c on c.id=a.customer_id
inner join ptrproduct_type_ref pro on pro.id=a.product_type_id
inner join ptrtreatment_status_ref ts on ts.id=t.status_id
<iterate property="TREATMENT_IDS" conjunction="," open="(" close=")" prepend="where pac.TREATMENT_ID in">#TREATMENT_IDS[]#</iterate>
</select>

<resultMap class="hmap" id="getVerifiedContactAddressResults" extends="getVerifiedContactResults">
<result property="FOREIGN_ADDRESS" javaType="string"/>
<result property="ADDRESS_TYPE" javaType="string"/>
<result property="ADDRESS_LINE_1" javaType="string"/>
<result property="ADDRESS_LINE_2" javaType="string"/>
<result property="ADDRESS_LINE_3" javaType="string"/>
<result property="ADDRESS_LINE_4" javaType="string"/>
<result property="POSTCODE" javaType="string"/>
<result property="CITY" javaType="string"/>
<result property="STATE" javaType="string"/>
<result property="COUNTRY" javaType="string"/>
</resultMap>

<select id="getVerifiedContactAddressResults" resultMap="getVerifiedContactAddressResults">
select 
a.id, c.customer_no, c.customer_name, c.customer_id_no, a.account_no, pro.description,
coalesce(t.updated_time,t.created_time),
coalesce(t.updated_user_id,t.created_user_id),
ts.description,
null as FOREIGN_ADDRESS,
adt.description as ADDRESS_TYPE,
ad.line_1 as ADDRESS_LINE_1,
ad.line_2  as ADDRESS_LINE_2,
ad.line_3  as ADDRESS_LINE_3,
ad.line_4 as ADDRESS_LINE_4,
ad.postcode as POSTCODE,
ad.CITY,
st.description as STATE,
cr.description as COUNTRY
from PTRTREATMENT_LETTER l
inner join ptrtreatment t on t.id=l.treatment_id
inner join ptraccount a on a.id=l.account_id
inner join ptraddress ad on ad.id=l.contact_id
inner join ptraddress_type_ref adt on adt.id=ad.address_type_id
inner join ptrcustomer c on c.id=a.customer_id
inner join ptrproduct_type_ref pro on pro.id=a.product_type_id
inner join ptrtreatment_status_ref ts on ts.id=t.status_id
left join ptrstate_ref st on st.id=ad.state_id
left join ptrcountry_ref cr on cr.id=ad.country_id
<iterate property="TREATMENT_IDS" conjunction="," open="(" close=")" prepend="where l.TREATMENT_ID in">#TREATMENT_IDS[]#</iterate>
</select>

<resultMap class="hmap" id="getPreviousThreeMonths">
<result property="PREVIOUS_THREE_MONTHS" javaType="boolean"/>
</resultMap>

<select id="getPreviousThreeMonths" resultMap="getPreviousThreeMonths">
select case when cast(#VERIFIED_DATE_FROM# as date) >= (cast(#CURRENT_DATE# as date) - interval '3' month) then 1 else 0 end <include refid="fromdual"/>
</select>

<!-- ## Redemption Statements ## -->

<resultMap class="hmap" id="getRsMiscValidCustomers">
	<result property="CUSTOMER_ID" javaType="long" />
	<result property="CUSTOMER_PRIMARY_ID" javaType="string" />
	<result property="CUSTOMER_NAME" javaType="string" />
	<result property="VALID" javaType="boolean" />
	<result property="COLOR" javaType="string" />
	<result property="CUSTOMER_CIF" javaType="string"/>
	<result property="ACCOUNT_ID" javaType="long"/>
</resultMap>

	<select id="getRsMiscValidCustomers" resultMap="getRsMiscValidCustomers">
		select c.ID, c.CUSTOMER_ID_NO, c.CUSTOMER_NAME, true as VALID, '33ff33' as
		COLOR, c.CUSTOMER_NO, acc.ID
		 from PTRCUSTOMER c
		inner join PTRACCOUNT acc on acc.CUSTOMER_ID=c.ID
		<iterate prepend="where c.CUSTOMER_ID_NO in " conjunction=","
			property="CUSTOMERS" open="(" close=")">#CUSTOMERS[]#</iterate>
			<iterate prepend="and acc.ACCOUNT_NO in " conjunction=","
			property="ACCOUNTS" open="(" close=")">#ACCOUNTS[]#</iterate>
			 and exists 
			(select 1 from PTRACCOUNT a where a.CUSTOMER_ID=c.ID)
	</select>
	
<resultMap class="hmap" id="getRsDate">
	<result property="EXPIRY_DATE" javaType="date" />
	<result property="REDEMPTION_DATE" javaType="date" />
</resultMap>

	<select id="getRsDate" resultMap="getRsDate">
	select date(#EXPIRY_DATE#), date(#REDEMPTION_DATE#) <include refid="fromdual"/>
	</select>	

<insert id="insertRsImportTemp" parameterClass="map">
		<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrredemption_statements_import_temp_id
			<include refid="sequenceSuffix" />
		</selectKey>
		insert into ptrredemption_statements_import_temp
		(id, customer_id, account_id, expiry_date, redemption_date)
		values
		(#ID#, #CUSTOMER_ID#, #ACCOUNT_ID#, #EXPIRY_DATE#, #REDEMPTION_DATE#)
	</insert>
<insert id="insertRsImportHistory" parameterClass="map">
		<selectKey keyProperty="ID" resultClass="long">
			<include refid="sequencePrefix" />
			ptrredemption_statements_import_history_id
			<include refid="sequenceSuffix" />
		</selectKey>
		insert into ptrredemption_statements_import_history
		(id, customer_id, account_id, expiry_date, redemption_date, created_user_id, created_time)
		values
		(#ID#, #CUSTOMER_ID#, #ACCOUNT_ID#, #EXPIRY_DATE#, #REDEMPTION_DATE#, #CREATED_USER_ID#, #CREATED_TIME#)
	</insert>

<resultMap class="hmap" id="getRsLatestExpiryDate">
<result property="CUSTOMER_ID" javaType="long"/>
<result property="ACCOUNT_ID" javaType="long"/>
<result property="EXPIRY_DATE" javaType="date"/>
<result property="REDEMPTION_DATE" javaType="date"/>
<result property="PROCESS_TYPE_ID" javaType="long"/>
<result property="SUBTYPE_ID" javaType="long"/>
<result property="TYPE_STATUS_ID" javaType="long"/>
<result property="STATUS_ID" javaType="long"/>
<result property="TRUE" javaType="boolean"/>
<result property="FALSE" javaType="boolean"/>
</resultMap>

<select id="getRsLatestExpiryDate" resultMap="getRsLatestExpiryDate">
select t.customer_id, t.account_id, t.expiry_date, t.redemption_date,
44 as process_type_id, sb.id as subtype_id, ts.id as type_status_id, ts.status_id,
<include refid="true"/>, <include refid="false"/>
from ptrredemption_statements_import_temp t
inner join ptrtreatment_subtype_ref sb on sb.type_id=44
inner join ptrtreatment_type_status_ref ts on ts.type_id=44 and ts.code='RDS_INP'
where t.expiry_date=(select max(tt.expiry_date) from ptrredemption_statements_import_temp tt 
where tt.customer_id=t.customer_id and tt.account_id=t.account_id)
</select>

<delete id="deleteRsImportTemp" parameterClass="map">delete from ptrredemption_statements_import_temp</delete>

</sqlMap>