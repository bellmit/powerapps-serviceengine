<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="ecaDynamicAssignmentService">

	<resultMap class="hmap" id="getEcaAccountResults">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="CUSTOMER_ID" javaType="long"/>
	<result property="ACCOUNT_NUMBER" javaType="string"/>
	<result property="PAYMENT_TREND" javaType="$"/>
	<result property="CUSTOMER_NAME" javaType="string"/>
	<result property="PRIMARY_ID" javaType="string"/>
	<result property="NPF_STATUS" javaType="string"/>
	<result property="NPF_DATE" javaType="date"/>
	<result property="REGION" javaType="string"/>
	<result property="PRODUCT" javaType="string"/>
	
	<result property="PRODUCT_TYPE_CATEGORY" javaType="string"/>
	<result property="PRODUCT_TYPE" javaType="string"/>
	<result property="ACCOUNT_STATUS" javaType="string"/>
	<result property="OUTSTANDING_BALANCE" javaType="$"/>
	<result property="GROSS_BALANCE" javaType="$"/>
	<result property="ARREARS_AMOUNT" javaType="$"/>
	<result property="OTHER_CHARGES" javaType="$"/>
	<result property="TOTAL_DUE" javaType="$"/>
	<result property="MIA" javaType="long"/>
	<result property="MONTHLY_INSTALLMENT" javaType="$"/>
	
	<result property="PROFIT_RATE" javaType="double"/>
	<result property="FACILITY_LIMIT" javaType="$"/>
	<result property="TENURE_ID" javaType="long"/>
	<result property="ADVANCED_PAYMENT" javaType="$"/>
	<result property="SECURITY_DEPOSIT" javaType="$"/>
	<result property="PAYMENT_RECEIVED_MTD" javaType="$"/>
	<result property="LAST_PAYMENT_DATE" javaType="date"/>
	<result property="LAST_PAYMENT_AMOUNT" javaType="$"/>
	<result property="FIRST_DISBURSE_DATE" javaType="date"/>
	<result property="LAST_DISBURSE_DATE" javaType="date"/>
	
	<result property="MATURE_DATE" javaType="date"/>
	<result property="STATUS_DECEASED_TPD" javaType="string"/>
	<result property="SHORTFALL_STATUS" javaType="string"/>
	<result property="SALES_PROCEED_DATE" javaType="date"/>
	<result property="DATE_OF_FUNDING" javaType="date"/>
	<result property="MASS_RESCHEDULE" javaType="string"/>
	<result property="MASS_RESCHEDULE_DATE" javaType="date"/>
	<result property="RNR_STATUS" javaType="string"/>
	<result property="RNR_STATUS_1" javaType="string"/>
	<result property="EXPECTED_DECLASSIFIED" javaType="date"/>
	
	<result property="EXPECTED_DECLASSIFIED_1" javaType="date"/>
	<result property="EXPECTED_OUTFLOW_RNR_REJECTED" javaType="date"/>
	<result property="AKPK_TAGGING" javaType="string"/>
	<result property="WRITE_OFF_DATE" javaType="date"/>
	<result property="PARTIAL_WRITE_OFF_FLAG" javaType="string"/>
	<result property="REDEMPTION_STATEMENT_DATE" javaType="date"/>
	<result property="REDEMPTION_EXPIRED_DATE" javaType="date"/>
	<result property="BRANCH_NAME" javaType="string"/>
	<result property="FINANCING_TYPE_DESCRIPTION" javaType="string"/>
	<result property="RESTRUCTURING_DATE" javaType="date"/>
	
	<result property="RESCHEDULE_DATE" javaType="date"/>
	
	
	</resultMap>
	
	
	<select id="getEcaAccountResults" resultMap="getEcaAccountResults">
	select
	a.ID as ACCOUNT_ID,
	a.CUSTOMER_ID,
	a.ACCOUNT_NO as ACCOUNT_NUMBER,
	NULL as PAYMENT_TREND,
	c.CUSTOMER_NAME as CUSTOMER_NAME,
	c.CUSTOMER_ID_NO as PRIMARY_ID,
	npl.description as NPF_STATUS,
	a.npl_date as NPF_DATE,
	reg.description as REGION,
	gr.description as PRODUCT,
	
	pro.code as PRODUCT_TYPE_CATEGORY,
	pro.description as PRODUCT_TYPE,
	st.description as ACCOUNT_STATUS,
	coalesce(a.outstanding_balance,0) as OUTSTANDING_BALANCE,
	coalesce(a.outstanding_balance,0) - (coalesce(a.interest_rebate_amount,0) + coalesce(a.write_off_amount,0)) as GROSS_BALANCE,
	coalesce(a.installment_amount_in_arrears,0) as ARREARS_AMOUNT,
	coalesce(a.other_charge,0) as OTHER_CHARGES,
	coalesce(a.total_amount_due,0) as TOTAL_DUE,
	coalesce(a.months_in_arrears,0) as MIA,
	coalesce(a.payment_amount,0) as MONTHLY_INSTALLMENT,
	
	a.interest_rate as PROFIT_RATE,
	NULL as FACILITY_LIMIT,
	NULL as TENURE_ID,
	coalesce(a.advance_payment_amount,0) as ADVANCED_PAYMENT,
	coalesce(a.security_deposit_amount,0) as SECURITY_DEPOSIT,
	coalesce(a.mtd_payment_received_amount,0) as PAYMENT_RECEIVED_MTD,
	a.last_payment_date as LAST_PAYMENT_DATE,
	coalesce(a.last_payment_amount,0) as LAST_PAYMENT_AMOUNT,
	a.first_release_date as FIRST_DISBURSE_DATE,
	a.full_release_date as LAST_DISBURSE_DATE,
	
	a.maturity_date as MATURE_DATE,
	NULL as STATUS_DECEASED_TPD,
	case when tlast.tlast_value_58 = #tlast.tlast_value_58# then 'Yes' else 'No' end as SHORTFALL_STATUS,
	NULL as SALES_PROCEED_DATE,
	a.first_release_date as DATE_OF_FUNDING,
	NULL as MASS_RESCHEDULE,
	NULL as MASS_RESCHEDULE_DATE,
	case when tag.rnr = <include refid="true"/> then 'Yes' else 'No' end as RNR_STATUS,
	NULL as RNR_STATUS_1,
	NULL as EXPECTED_DECLASSIFIED,
	
	NULL as EXPECTED_DECLASSIFIED_1,
	NULL as EXPECTED_OUTFLOW_RNR_REJECTED,
	case when tag.akpk_flag = <include refid="true"/> then 'Yes' else 'No' end  as AKPK_TAGGING,
	a.charge_off_date as WRITE_OFF_DATE,
	NULL as PARTIAL_WRITE_OFF_FLAG,
	red.redemption_date as REDEMPTION_STATEMENT_DATE,
	red.expiry_date as REDEMPTION_EXPIRED_DATE,
	bb.code||' - '||bb.description as BRANCH_NAME, 
	ptc.description as FINANCING_TYPE_DESCRIPTION,
	NULL as RESTRUCTURING_DATE,
	
	a.RESCHEDULE_DATE
	

	from ptraccount a
	inner join PTRCUSTOMER c on c.ID=a.CUSTOMER_ID
    inner join ptrproduct_type_ref pro on pro.id=a.product_type_id
    inner join ptrproduct_type_category_ref ptc on ptc.id=pro.category_id
    left join ptrnpl_status_ref npl on npl.id=a.npl_status_id
    left join ptrbank_branch_ref bb on bb.id=a.bank_branch_id
    left join ptrregion_ref reg on reg.id=bb.region_id
    left join ptraccount_status_ref st on st.id=a.status_id
    left join ptraccount_tlast tlast on tlast.account_id=a.id
    left join ptraccount_treatment_tagging tag on tag.account_id=a.id
    left join ptraccount_redemption_statement red on red.account_id=a.id
    left join ptrfacility_code_ref fa on fa.id=a.facility_code_id
	left join ptrfacility_type_group_ref gr on gr.id=fa.group_id
		<isNotEmpty property="ACCOUNTS">
			where a.ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	</select>
	
	<sql id="getCurrentAssignmentDetails-fragments">
	select 
	ass.id,
	ass.account_id, 
	ag.description, 
	ass.aborted_date, 
	ass.approved_date, 
	ass.acknowledged_date, 
	eff.effective_date, 
	ass.expected_end_date,
	ass.remarks,
	ecai.description as last_eca_instruction,
	ass.last_eca_instruction_date as last_eca_instruction_date,
	abo.description as ABORT_REASON,
	ass.aborted_date as ACTUAL_ABORT_DATE,
	ass.subtype_id as SUBTYPE_ID
	from ptraccount_agency_assignment ass
	inner join ptrtreatment_subtype_ref sb on sb.id=ass.subtype_id
	left join ptragency ag on ag.id=ass.agency_id
	left join ptragency_effective_assignment eff on eff.agency_assignment_id=ass.id
	left join ptrinstructed_action_ref ecai on ecai.id=ass.last_eca_instruction_action_id
	left join ptrlegal_abort_reason_ref abo on abo.id=ass.abort_reason_id
	where sb.type_id=#PROCESS_TYPE_ID#
	</sql>
	
	<resultMap class="hmap" id="getCurrentAssignmentDetails">
		<result property="AGENCY_ASSIGNMENT_ID" javaType="long"/>
		<result property="ACCOUNT_ID" javaType="long" />
		<result property="AGENCY" javaType="string" />
		<result property="ABORT_DATE" javaType="date" />
		<result property="ASSIGNMENT_DATE" javaType="date"/>
		<result property="ACKNOWLEDGED_DATE" javaType="date"/>
		<result property="EFFECTIVE_DATE" javaType="date"/>
		<result property="EXPECTED_END_DATE" javaType="date"/>
		<result property="REMARK" javaType="string"/>
		<result property="LAST_ECA_INSTRUCTION" javaType="string"/>
		<result property="LAST_ECA_INSTRUCTION_DATE" javaType="date"/>
		<result property="ABORT_REASON" javaType="string"/>
		<result property="ACTUAL_ABORT_DATE" javaType="date"/>
		<result property="SUBTYPE_ID" javaType="long"/>
	</resultMap>
	<select id="getCurrentAssignmentDetails" resultMap="getCurrentAssignmentDetails">
	<include refid="getCurrentAssignmentDetails-fragments"/> and ass.status_id=15007
		<isNotEmpty property="ACCOUNTS">
			and ass.ACCOUNT_ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			and 1 = 0
		</isEmpty>
	</select>
	
	<select id="getPreviousAssignmentDetails" resultMap="getCurrentAssignmentDetails">
	<include refid="getCurrentAssignmentDetails-fragments"/> and not ass.status_id=15007
		<isNotEmpty property="ACCOUNTS">
			and ass.ACCOUNT_ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			and 1 = 0
		</isEmpty>
	order by ass.account_id, ass.id asc
	</select>
	
	<resultMap class="hmap" id="getEcaAccountsWorkListAssignment">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="OPENING_MIA" javaType="long"/>
	<result property="OPENING_OUTSTANDING_BALANCE" javaType="$"/>
	<result property="OPENING_GROSS_BALANCE" javaType="$"/>
	<result property="OPENING_MOVEMENT" javaType="string"/>
	<result property="OPENING_PAYMENT_STATUS" javaType="string"/>
	<result property="OPENING_PAYMENT_METHOD" javaType="string"/>
	<result property="OPENING_ACCOUNT_STATUS" javaType="string"/>
	</resultMap>
	
	<select id="getEcaAccountsWorkListAssignment" resultMap="getEcaAccountsWorkListAssignment">
	select
	a.ID as ACCOUNT_ID,
	coalesce(wlassign.MONTHS_IN_ARREARS,0) as OPENING_MIA,
	coalesce(wlassign.outstanding_balance,0) as OPENING_OUTSTANDING_BALANCE,
	coalesce(wlassign.total_gross_balance,0) as OPENING_GROSS_BALANCE,
	case
        when pref.code is null then 'No Payment'
        when (pref.code ='shortpaid' and cpay.current_month_total_payment >= 0) then 'Shortfall'
        when (pref.code='fullpayment' or pref.code='advancepayment') then
            case
              when wlt_ref.code='NPF' then

                case
                    when (wlassign.months_in_arrears = 4 and a.months_in_arrears = 3) then 'Maintain'
                    when (wlassign.months_in_arrears = 4 and a.months_in_arrears = 2) then 'Declassified'
                    when (wlassign.months_in_arrears = a.months_in_arrears + 1) then 'Maintain'
                    when ( <![CDATA[ wlassign.months_in_arrears >=5 and a.months_in_arrears <= 2 ]]> ) then 'Declassified'
                    when ( <![CDATA[ wlassign.months_in_arrears >=5 ]]> ) then 'Improve'
                end

            when wlt_ref.code='PNPF' then
                case
                    when (wlassign.months_in_arrears = 1 and a.months_in_arrears = 0) then 'Maintain'
                    when (wlassign.months_in_arrears = 2 and a.months_in_arrears = 1) then 'Maintain'
                    when (wlassign.months_in_arrears = 3 and a.months_in_arrears = 2) then 'Maintain'
                    when (wlassign.months_in_arrears = 2 and a.months_in_arrears = 0) then 'Improve'
                    when (wlassign.months_in_arrears = 3 and a.months_in_arrears = 1) then 'Improve'
                    when (wlassign.months_in_arrears = 3 and a.months_in_arrears = 0) then 'Improve'
                end
            end
        else null
    end as OPENING_MOVEMENT,
	NULL as OPENING_PAYMENT_STATUS,
	NULL as OPENING_PAYMENT_METHOD,
	NULL as OPENING_ACCOUNT_STATUS
	from PTRACCOUNT a
	left join ptrvw_current_month_total_payment cpay on cpay.account_id = a.id
    left join ptrpayment_status_ref pref on cpay.payment_status_id = pref.id
	<isEqual property="USER_TYPE_ID" compareValue="2">
         inner join PTRAGENCY_WORK_LIST_ASSIGNMENT wlassign on a.id = wlassign.account_id
         inner join PTRAGENCY_WORK_LIST wl on wl.WORK_LIST_ID=wlassign.WORK_LIST_ID and wl.AGENCY_ID=#AGENCY_ID#
        </isEqual>
        <isNotEqual property="USER_TYPE_ID" compareValue="2">
         inner join PTRACCOUNT_WORK_LIST_ASSIGNMENT wlassign on a.id = wlassign.account_id
         inner join PTRWORK_LIST wl on wl.WORK_LIST_ID=wlassign.WORK_LIST_ID
        </isNotEqual>
        left join ptrwork_list_category_ref wlt_ref on wl.work_list_category = wlt_ref.id
    <isNotEmpty property="ACCOUNTS">
			where a.ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
	   
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	</select>
	
	
	<resultMap class="hmap" id="getEcaAccountsCollateral">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="VEHICLE_NUMBER" javaType="string"/>
	<result property="COLLATERAL_DESCRIPTION" javaType="string"/>
	</resultMap>
	
	<select id="getEcaAccountsCollateral" resultMap="getEcaAccountsCollateral">
	select 
	a.id as ACCOUNT_ID, 
	col.registration_no as VEHICLE_NUMBER,
	col.description as COLLATERAL_DESCRIPTION
	from ptraccount a
	inner join ptraccount_collateral_rel rel on a.id=rel.account_id
	inner join ptrcollateral col on col.id=rel.collateral_id
    <isNotEmpty property="ACCOUNTS">
			where a.ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	order by a.id, col.id asc
	</select>
	
	<resultMap class="hmap" id="getEcaAccountsCorrespondenceAddress">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="ADDRESS_1" javaType="string"/>
	<result property="ADDRESS_2" javaType="string"/>
	<result property="ADDRESS_CITY" javaType="string"/>
	<result property="ZIP_CODE" javaType="string"/>
	<result property="STATE" javaType="string"/> 
	</resultMap>
	
	<select id="getEcaAccountsCorrespondenceAddress" resultMap="getEcaAccountsCorrespondenceAddress">
	select
	a.id as ACCOUNT_ID,
	h.line_1 as ADDRESS_1,
	h.line_2 as ADDRESS_2,
	h.city as ADDRESS_CITY,
	h.postal_code as ZIP_CODE,
	st.description as STATE
	from ptraccount a
	inner join ptrhost_address h on h.customer_id=a.customer_id
	inner join ptrhost_address_type_ref ty on ty.id=h.host_address_type_id
	left join ptrstate_ref st on st.id=h.state_id
    <isNotEmpty property="ACCOUNTS">
			where a.ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	and ty.code='M'
	order by a.id, h.id asc
	</select>

		<resultMap class="hmap" id="getEcaAccountsLegalDetails">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="LEGAL_STATUS" javaType="string"/>
	</resultMap>
	
	<select id="getEcaAccountsLegalDetails" resultMap="getEcaAccountsLegalDetails">
	select
	a.ACCOUNT_ID as ACCOUNT_ID,
	s.description as LEGAL_STATUS
	from ptraccount_last_legal_action a
	inner join ptrlegal_action_process p on p.id=a.process_id
	inner join ptrtreatment_status_ref s on s.id=p.status_id
    <isNotEmpty property="ACCOUNTS">
			where a.ACCOUNT_ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	</select>
		
			<resultMap class="hmap" id="getEcaAccountsEmploymentDetails">
	<result property="ACCOUNT_ID" javaType="long"/>
	<result property="OCCUPATION_NAME" javaType="string"/>
	<result property="EMPLOYER_NAME" javaType="string"/>
	</resultMap>
	
	<select id="getEcaAccountsEmploymentDetails" resultMap="getEcaAccountsEmploymentDetails">
		select 
		a.id as ACCOUNT_ID,  
		oc.description as OCCUPATION_NAME,
		h.employer_name as EMPLOYER_NAME
		from ptraccount a
		inner join ptrhost_employment_history h on h.customer_id=a.customer_id
		inner join ptroccupation_ref oc on oc.id=h.occupation_id
    <isNotEmpty property="ACCOUNTS">
			where a.ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			where 1 = 0
		</isEmpty>
	order by a.id, h.id asc
	</select>
		
		<resultMap class="hmap" id="getEcaAccountsAkpkDetails">
	<result property="ACCOUNT_ID" javaType="long"/>
		<result property="AKPK_FLAG" javaType="string"/>
	<result property="AKPK_COUNTER" javaType="long"/>
	<result property="AKPK_START_DATE" javaType="date"/>
	<result property="AKPK_END_DATE" javaType="date"/>
	</resultMap>
	
	<select id="getEcaAccountsAkpkDetails" resultMap="getEcaAccountsAkpkDetails">
	select
	a.account_id,
	'Yes' as AKPK_FLAG,
	a.current_no_of_time_in_rnr as AKPK_COUNTER,
	a.implemented_date as AKPK_START_DATE,
	a.installment_end_date as AKPK_END_DATE from (
		select 
		rnr.account_id,  
		rnr.implemented_date,
		rnr.current_no_of_time_in_rnr,
		s.installment_end_date,
		row_number() over(partition by rnr.account_id order by rnr.treatment_id desc, s.installment_end_date desc) as rnum
		from ptrtreatment_rnr rnr 
		inner join ptrtreatment_rnr_schedule s on s.treatment_id=rnr.treatment_id
		inner join ptrtreatment_subtype_ref sb on sb.id=rnr.subtype_id
		inner join ptrtreatment_type_status_ref ty on ty.id=rnr.type_status_id
		where sb.code='RNR_AKPK' and ty.status_id=15007
    <isNotEmpty property="ACCOUNTS">
			and rnr.ACCOUNT_ID in(<iterate property="ACCOUNTS" conjunction=",">#ACCOUNTS[]#</iterate>)
		</isNotEmpty>
		<isEmpty property="ACCOUNTS">
			and 1 = 0
		</isEmpty>
	)a where a.rnum=1
	</select>
		

	
</sqlMap>